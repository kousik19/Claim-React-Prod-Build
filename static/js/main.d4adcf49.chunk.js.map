{"version":3,"sources":["components/header/KMRHeader.jsx","components/menu/KMRMenu.jsx","components/AgGridStatusBadgeRenderer.jsx","service/APIService.js","components/KMRInitialTabConent.jsx","components/KMRPendingInfoTabContent.jsx","components/KMRPendingApprovalTabContent.jsx","components/KMRProcessingTabContent.jsx","components/KMRErrorTabContent.jsx","components/KMRAcceptedTabContent.jsx","components/KMRRejectedTabContent.jsx","components/KMRArchieveTabContent.jsx","components/KMRClaims.jsx","service/UtilityService.js","components/create-claim/CreateClaim.jsx","components/master-data-list/MasterDataList.jsx","components/master-data-item/AgGridActionColumnRenderer.jsx","components/master-data-item/MasterDataItem.jsx","components/master-data-entry/MasterDataEntry.jsx","components/master-data-edit/AgGridActionColumnRenderer.jsx","components/master-data-edit/MasterDataEdit.jsx","components/KMRContentArea.jsx","components/login/Login.jsx","components/parent/KMRParentComponent.js","App.js","serviceWorker.js","index.js"],"names":["KMRHeader","sessionStorage","setItem","window","location","href","Navbar","className","expand","Brand","Toggle","aria-controls","Collapse","id","NavDropdown","title","Fragment","Item","eventKey","Divider","Nav","Link","onClick","this","logout","bind","React","Component","KMRMenu","props","state","goToMasterDataEntry","name","navigateTo","userObj","JSON","parse","getItem","console","log","fname","setState","e","path","to","activeKey","onSelect","AgGridStatusBadgeRenderer","reasons","context","componentParent","methodFromParent","node","rowIndex","colDef","headerName","value","Badge","variant","data-tip","Math","floor","random","data-place","APIService","host","port","urlMap","purpose","params","ep","undefined","urlParts","split","paramPointer","i","length","indexOf","constructedUrl","join","err","url","obj","callback","fetch","then","res","json","response","status","alert","payload","method","body","headers","KMRInitialTabContent","apiService","ApiService","onGridSizeChanged","gridWidth","document","getElementById","offsetWidth","columnsToShow","columnsToHide","totalColsWidth","allColumns","columnApi","getAllColumns","column","getMinWidth","push","colId","setColumnsVisible","api","sizeColumnsToFit","columnDefs","field","cellRenderer","rowData","frameworkComponents","gridStatusBadgeRenderer","claimId","memberSSN","submissionDate","fetchClaims","nextProps","getApiUrl","root","invokeGet","data","temp","memberName","ssn","date","cellVal","style","width","height","onCellClicked","KMRPendingInfoTabContent","KMRPendingApprovalTabContent","KMRProcessingTabContent","KMRErrorTabContent","KMRAcceptedTabContent","KMRRejectedTabContent","KMRArchieveTabContent","KMRClaims","formModalRef","createRef","toCreate","attrClaimId","attrMemberSSN","attrSubmissionDate","goToCreateClaim","event","target","dataset","Row","Col","Button","Accordion","Card","as","Header","Body","Form","Group","controlId","Label","Control","type","placeholder","data-name","onChange","updateFilterField","filterClaims","Tabs","defaultActiveKey","Tab","Utility","substring","s","c","charCodeAt","String","fromCharCode","CreateClaim","ctrlKeyPressed","altKeyPressed","isLoading","options","inputProps","types","selectedTabIndex","autoSaveInterval","lineItem","label","masterdata","key","claimIdHeader","providerOptions","depOptions","depValue","depIsLoading","masterClaimType","masterReceivedDate","memberAddress","memberPolicy","memberCity","memberState","memberZip","memberTelephone","memberDob","memberSex","memberEmployer","memberInsurancePlan","patientRelation","patientSSN","patientName","patientDob","patientSex","patientAddress","patientCity","patientState","patientZip","patientTelePhone","patientMStat","patientEStat","patientCondition","diagnosisCodes","pointer","diagnosisLineItems","stringify","totalCharges","totalAllowed","totalDeductible","totalNotCovered","totalPayment","othersFedId","othersPatientAccountNum","othersPendCode","othersBillingNo","othersPayee","othersProvider","othersProviderAddress","showClaimPopup","historyClaims","memberAutoSuggestSSN","lname","memberAutoSuggestFocused","providerAutoSuggestTaxId","handleSelect","handlePatientChange","handleDiagnosticCodeChange","handleLineItemChange","commonChangeHandler","autoSave","tabNavKeyCheck","match","claimid","moment","format","populateMasterDropdown","invokeAPIToPopulateOptions","index","masterData","constructDropdownArray","fetchClaim","serverData","masterItem","list","display","hasOwnProperty","val","finArr","itemObj","tempArr","j","onkeydown","keyIdentifier","keyCode","ctrlKey","lineItems","lineItemArr","mouseClick","selectedMember","address1","address2","city","zip1","phone","UtilityService","formatDate","dob","sex","fetchDependentList","focus","selectedProvider","docNumber","slice","docDescription","trim","zip","selectedValue","dssn","autoPopulatePatient","selectedDependent","relation","patientPolicy","patientTelephone","patientEmployer","patientInsurancePlan","diagnosis","splice","nextLetter","depedentFetchUrl","lineItemsArr","isNaN","parseFloat","getElementsByClassName","classList","add","clearInterval","setTimeout","autoSaveData","startsWith","modifiedArr","innerArr","autoSaveUrl","invokePost","remove","error","reload","claimHistoryUrl","open","clearForm","goToDashBoard","Container","fluid","md","sm","map","maxResults","autoFocus","labelKey","option","onSearch","query","resp","selected","autoPopulateMember","renderMenuItemChildren","initial","readOnly","d","data-index","fontSize","addNewLineItem","Table","striped","bordered","hover","size","tVal","tIndex","class","autoPopulateProvider","Modal","show","onHide","handleClaimPopupClose","closeButton","Title","claim","data-claimId","openHistoryClaim","MasterDataList","labelNameMap","filter","floatingFilter","flex","modules","SetFilterModule","fetchMasterItemList","rows","masteritem","identifier","AgGridActionColumnRenderer","onDeleteClick","delete","MasterDataItem","itemSpecificProperties","item","gridAPI","columnAPI","alertMessage","rowSelection","gridActionColumnRenderer","defaultColDef","sortable","editable","resizable","AllModules","sideBar","toolPanels","labelDefault","iconKey","toolPanel","toolPanelParams","suppressRowGroups","suppressValues","suppressPivots","suppressPivotMode","suppressSideButtons","suppressColumnFilter","suppressColumnSelectAll","suppressColumnExpandAll","defaultToolPanel","fetchMasterDataItem","cols","x","toString","parts","isFirstVisibleCol","visibleColumnCount","hiddenCols","hide","suppressToolPanel","checkboxSelection","headerCheckboxSelection","action","rowdata","invokeDelete","tableData","setRowData","exportCols","exportDataAsCsv","columnKeys","onlySelected","fileName","goToGlobalMasterItemList","goToCreateMasterItem","Alert","showNotification","onFirstDataRendered","onGridReady","onRowDataChanged","onRowDataChange","exportCsv","MasterDataEntry","apiEndPointMap","mid","parentFields","childFields","childRows","formData","varient","submitButtonText","fetchMasterDataItemFormFields","hidden","required","toLowerCase","msg","message","resetForm","crows","child","parent","replace","fdata","masterItemLabel","encodeURI","goToListItems","data-type","maxLength","datalength","createMasterItem","MasterDataEdit","childField","childCols","childClass","childLabel","agGridParams","gridApi","createChildLink","cid","invokePut","constructLabelFromItem","constructedChildLabel","getDataById","toUpperCase","isCaps","ch","getChildTableFields","tableFields","colDefs","rowDefs","row","isDeleted","rowObj","isDeteled","history","back","editMasterItem","export","KMRContentArea","exact","component","Login","username","password","errorMessage","changeUsername","changePassword","login","KMRParentComponent","loggedIn","checkLogin","App","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"0oBAgEeA,G,8KAhDPC,eAAeC,QAAQ,WAAY,GACnCC,OAAOC,SAASC,KAAO,W,+BAIvB,OACI,kBAACC,EAAA,EAAD,CAAQC,UAAU,aAAaC,OAAO,MAClC,kBAACF,EAAA,EAAOG,MAAR,CAAcJ,KAAK,SAAnB,eACA,kBAACC,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAEhB,yBAAKN,UAAU,wBACX,kBAACD,EAAA,EAAD,CAAQC,UAAU,aAEd,kBAACO,EAAA,EAAD,CAAaC,MACT,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,OAENT,UAAU,gBACR,kBAACO,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,6BAA2D,6BAA3D,yBACA,kBAACJ,EAAA,EAAYK,QAAb,MACA,kBAACL,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,8BAA4D,6BAA5D,gCACA,kBAACJ,EAAA,EAAYK,QAAb,MACA,kBAACL,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,oBAAkD,6BAAlD,gCAGJ,kBAACJ,EAAA,EAAD,CAAaC,MACT,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,OAENT,UAAU,gBACR,kBAACO,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,iBACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,cACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,mBAGJ,kBAACE,EAAA,EAAIC,KAAL,CAAUC,QAASC,KAAKC,OAAOC,KAAKF,MAAOhB,UAAU,eACjD,kBAAC,IAAD,e,GAxCRmB,IAAMC,Y,QCmFfC,G,yDArFX,WAAYC,GAAQ,IAAD,8BAEf,cAAMA,IAEDC,MAAQ,CACTC,qBAAqB,EACrBC,KAAM,IAGV,EAAKC,WAAa,EAAKA,WAAWR,KAAhB,gBATH,E,gEAaf,IAAIS,EAAUC,KAAKC,MAAMnC,eAAeoC,QAAQ,SAClC,MAAXH,IACHI,QAAQC,IAAIL,EAAQM,OACpBjB,KAAKkB,SAAS,CACVT,KAAME,EAAQM,W,iCAIXE,GACP,IAAIC,EAAO,GACX,OAAOD,GACH,IAAK,MACDC,EAAO,iBACP,MACJ,IAAK,MACDA,EAAO,oBACP,MACJ,IAAK,MACDA,EAAO,0CACP,MACJ,IAAK,MACDA,EAAO,qCACP,MACJ,IAAK,MACDA,EAAO,qBAGfxC,OAAOC,SAASC,KAAOsC,I,+BAKvB,OAAGpB,KAAKO,MAAMC,oBACH,kBAAC,IAAD,CAAUa,GAAG,uBAIpB,yBAAKrC,UAAU,sBACX,yBAAKA,UAAU,WACX,kBAACa,EAAA,EAAD,CAAKb,UAAU,GAAGsC,UAAU,SAExB,kBAAC/B,EAAA,EAAD,CAAaC,MAAM,SAASF,GAAG,eAAeN,UAAU,eAAeuC,SAAUvB,KAAKU,YAClF,kBAACnB,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,gBACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,iBAIJ,kBAACJ,EAAA,EAAD,CAAaC,MAAM,oBAAoBF,GAAG,eAAeN,UAAU,eAAeuC,SAAUvB,KAAKU,YAC7F,kBAACnB,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,iBACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,eACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,0BAGJ,kBAACJ,EAAA,EAAD,CAAaC,MAAM,WAAWF,GAAG,eAAeN,UAAU,eAAeuC,SAAUvB,KAAKU,YACpF,kBAACnB,EAAA,EAAYG,KAAb,CAAkBC,SAAS,OAA3B,kBAGJ,kBAACE,EAAA,EAAIH,KAAL,KACI,kBAACG,EAAA,EAAIC,KAAL,CAAUH,SAAS,UAAnB,SAGJ,yBAAKX,UAAU,0BAAf,WACagB,KAAKO,MAAME,a,GA7E1BN,IAAMC,Y,2FCDPoB,E,4MAEnBC,QAAU,CACR,mDACA,kBACA,+CACA,iCACA,iD,mEAGAzB,KAAKM,MAAMoB,QAAQC,gBAAgBC,iBAAnC,eACU5B,KAAKM,MAAMuB,KAAKC,SAD1B,kBAC4C9B,KAAKM,MAAMyB,OAAOC,e,+BAK9D,MAAwB,YAArBhC,KAAKM,MAAM2B,MAA2B,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAf,aACZ,iBAArBnC,KAAKM,MAAM2B,MAAgC,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAf,yBACtB,qBAArBnC,KAAKM,MAAM2B,MAAoC,kBAACC,EAAA,EAAD,CAAOC,QAAQ,QAAf,sBAC1B,eAArBnC,KAAKM,MAAM2B,MAA8B,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAf,gBACpB,UAArBnC,KAAKM,MAAM2B,MAAyB,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAf,WACf,aAArBnC,KAAKM,MAAM2B,MAA4B,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAf,IAA0B,kBAAC,IAAD,MAA1B,KAClB,aAArBnC,KAAKM,MAAM2B,MACjB,oCACE,kBAACC,EAAA,EAAD,CAAOC,QAAQ,SAASC,WAAUpC,KAAKyB,QAAQY,KAAKC,MAAsB,EAAhBD,KAAKE,WAAgBC,aAAW,SAA1F,IAAmG,kBAAC,IAAD,MAAnG,KACA,kBAAC,IAAD,YAHC,M,GAtB8CpC,aCqHxCqC,G,wDAzHXC,KAAO,mB,KAEPC,KAAO,O,KAEPC,OAAS,CAEL,MAAU,kBAEV,iBAAqB,+BACrB,mBAAuB,iCACvB,sBAA0B,sCAC1B,cAAkB,iBAClB,aAAiB,uBACjB,iBAAqB,8BACrB,kBAAsB,+BACtB,0BAA8B,2CAG9B,eAAmB,oBACnB,wBAA4B,kCAC5B,eAAmB,uCACnB,gCAAoC,gCACpC,iBAAqB,iBACrB,sBAA0B,mCAC1B,eAAmB,iBACnB,oBAAwB,mCACxB,kBAAsB,8BACtB,uBAA2B,iEAC3B,qBAAyB,iCACzB,oBAAwB,6D,sDAGlBC,GAAuB,IAAdC,EAAa,uDAAJ,GAExB,IACI,IAAIC,EAAK/C,KAAK4C,OAAOC,GACrB,QAASG,GAAND,EAAiB,OAAO,KAK3B,IAHA,IAAIE,EAAWF,EAAGG,MAAM,KACpBC,EAAe,EAEXC,EAAE,EAAGA,EAAGH,EAASI,OAAQD,IAC1BH,EAASG,GAAGE,QAAQ,WAAa,IAChCL,EAASG,GAAKN,EAAOK,MAK7B,IAAII,EAAiBvD,KAAK0C,KAAO,IAAM1C,KAAK2C,KAAO,IAAMM,EAASO,KAAK,KAEvE,OAAOD,EAET,MAAMpC,GAEJ,OADAJ,QAAQ0C,IAAItC,GACL,Q,gCAKLuC,EAAKC,EAAKC,GAEhBC,MAAMH,GAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GACf,WAAnBA,EAASC,OACRN,EAASK,EAAUN,GAClBQ,MAAM,gB,iCAIRT,EAAKU,EAAST,EAAKC,GAM1BC,MACIH,EACA,CACIW,OAAQ,OACRC,KAAMF,EACNG,QAAS,CACL,eAAgB,sBAG1BT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GAC5BL,EAASK,EAAUN,Q,gCAIjBD,EAAKU,EAAST,EAAKC,GAEzBC,MACIH,EACA,CACIW,OAAQ,MACRC,KAAMF,EACNG,QAAS,CACL,eAAgB,sBAG1BT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GAC5BL,EAASK,EAAUN,Q,mCAIdD,EAAKU,EAAST,EAAKC,GAE5BC,MACIH,EACA,CACIW,OAAQ,SACRC,KAAMF,EACNG,QAAS,CACL,eAAgB,sBAG1BT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GAC5BL,EAASK,EAAUN,U,MCDhBa,G,yDAzGX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IAHVmE,WAAa,IAAIC,EAEE,EAoFnBC,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,gBAAgBC,YACpDC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAnGX,EAAK1B,OAAS,UAEd,EAAK3D,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,GAGTC,oBAAqB,CACjBC,wBAAyB1E,GAG7B2E,QAAS7F,EAAM6F,QACfC,UAAW9F,EAAM8F,UACjBC,eAAgB/F,EAAM+F,gBArBX,E,gEA0BfrG,KAAKsG,YAAYtG,Q,gDAGKuG,GACtBvG,KAAKkB,SAAS,CACViF,QAASI,EAAUJ,QACnBC,UAAWG,EAAUH,UACrBC,eAAgBE,EAAUF,iBAE9BtF,QAAQC,IAAIhB,KAAKO,MAAM4F,W,oCAIvB,IAAIzC,EAAM1D,KAAKyE,WAAW+B,UAAU,oBAAqB,CAAC,YACtDC,EAAOzG,KACXA,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAG1C,IAFA,IAAI0C,EAAO1C,EAAS0C,KAChBC,EAAO,GACHxD,EAAE,EAAGA,EAAGuD,EAAKtD,OAAQD,IAAK,CAC9B,IAAIO,EAAM,GACVA,EAAIrE,GAAKqH,EAAKvD,GAAG9D,GACjBqE,EAAIlD,KAAOkG,EAAKvD,GAAGyD,WACnBlD,EAAImD,IAAMH,EAAKvD,GAAGgD,UAClBzC,EAAIoD,KAAO,aACXpD,EAAIO,OAAS,UAEb0C,EAAKpB,KAAK7B,GAGd8C,EAAKvF,SAAS,CAAC,QAAW0F,S,oCAIpBjD,GACV,IAAIqD,EAAUrD,EAAIgD,KAAKrH,GACvBV,OAAOC,SAASC,KAAO,kBAAoBkI,I,+BAK3C,OACI,yBAAK1H,GAAG,eAAe2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnD,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,MAC/CoH,cAAepH,KAAKoH,cAAclH,KAAKF,c,GA9E5BG,IAAMC,YCsE1BiH,E,kDAzEX,WAAY/G,GAAQ,IAAD,8BACf,cAAMA,IAmDVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,6BAA6BC,YACjEC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAnEX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBACjF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,gBAC7E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC9E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBACjF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,aAAcqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,gBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC/E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,gBAC7E,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC/E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,gBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,kBAAmBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAClF,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,gBAC9E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,iBAEnF+B,oBAAqB,CACjBC,wBAAyB1E,IA5BlB,E,qDAkCf,OACI,yBAAKlC,GAAG,4BAA4B2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAChE,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GA3ChCG,IAAMC,WC6E9BkH,E,kDAxEX,WAAYhH,GAAQ,IAAD,8BACf,cAAMA,IAkDVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,iCAAiCC,YACrEC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAlEX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,oBAC7E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,oBAClF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,oBAC7E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAC3E,CAAE5E,GAAI,OAAQmB,KAAM,kBAAmBqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,oBAChF,CAAE5E,GAAI,OAAQmB,KAAM,aAAcqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,oBACjF,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAChF,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAC9E,CAAE5E,GAAI,QAASmB,KAAM,cAAeqG,IAAK,MAAOC,KAAM,aAAc7C,OAAQ,oBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAC9E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAC7E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,oBAC/E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,oBAC5E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,qBAE9E+B,oBAAqB,CACjBC,wBAAyB1E,IA5BlB,E,qDAkCf,OACI,yBAAKlC,GAAG,gCAAgC2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACpE,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GA3C5BG,IAAMC,WC+DlCmH,E,kDA/DX,WAAYjH,GAAQ,IAAD,8BACf,cAAMA,IAyCVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,2BAA2BC,YAC/DC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAzDX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,cAC7E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,cAClF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,cAC7E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,cAC3E,CAAE5E,GAAI,OAAQmB,KAAM,kBAAmBqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,cAChF,CAAE5E,GAAI,OAAQmB,KAAM,aAAcqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,eAEhF+B,oBAAqB,CACjBC,wBAAyB1E,IAnBlB,E,qDAyBf,OACI,yBAAKlC,GAAG,0BAA0B2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAC9D,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GAlCjCG,IAAMC,WC4D7BoH,E,kDA3DX,WAAYlH,GAAQ,IAAD,8BACf,cAAMA,IAqCVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,sBAAsBC,YAC1DC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBArDX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,SAC9E,CAAE5E,GAAI,OAAQmB,KAAM,gBAAiBqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,UAErF+B,oBAAqB,CACjBC,wBAAyB1E,IAflB,E,qDAqBf,OACI,yBAAKlC,GAAG,qBAAqB2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACzD,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GA9BtCG,IAAMC,WC2ExBqH,E,kDAxEX,WAAYnH,GAAQ,IAAD,8BACf,cAAMA,IAkDVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,yBAAyBC,YAC7DC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAlEX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAC7E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAClF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAC7E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC3E,CAAE5E,GAAI,OAAQmB,KAAM,kBAAmBqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,YAChF,CAAE5E,GAAI,OAAQmB,KAAM,aAAcqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC5E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,YACjF,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAChF,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC9E,CAAE5E,GAAI,QAASmB,KAAM,cAAeqG,IAAK,MAAOC,KAAM,aAAc7C,OAAQ,YAC5E,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC9E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC7E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAC/E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,YAC5E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,aAE9E+B,oBAAqB,CACjBC,wBAAyB1E,IA5BlB,E,qDAkCf,OACI,yBAAKlC,GAAG,wBAAwB2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAC5D,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GA3CnCG,IAAMC,WCyE3BsH,E,kDAxEX,WAAYpH,GAAQ,IAAD,8BACf,cAAMA,IAkDVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,yBAAyBC,YAC7DC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAlEX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAC7E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAClF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAC7E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC3E,CAAE5E,GAAI,OAAQmB,KAAM,kBAAmBqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,YAChF,CAAE5E,GAAI,OAAQmB,KAAM,aAAcqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC5E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,YACjF,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAChF,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC9E,CAAE5E,GAAI,QAASmB,KAAM,cAAeqG,IAAK,MAAOC,KAAM,aAAc7C,OAAQ,YAC5E,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC9E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,YAC7E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,YAC/E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,YAC5E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,aAE9E+B,oBAAqB,CACjBC,wBAAyB1E,IA5BlB,E,qDAkCf,OACI,yBAAKlC,GAAG,wBAAwB2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAC5D,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GA3CnCG,IAAMC,WC0E3BuH,E,kDAxEX,WAAYrH,GAAQ,IAAD,8BACf,cAAMA,IAkDVqE,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,yBAAyBC,YAC7DC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAlEX,EAAKrF,MAAQ,CACXsF,WAAY,CACN,CAAE7D,WAAY,WAAY8D,MAAO,MACjC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,aAAc8D,MAAO,OACnC,CAAE9D,WAAY,cAAe8D,MAAO,QACpC,CAAE9D,WAAY,SAAU8D,MAAO,SAAUC,aAAc,4BAE3DC,QAAS,CACL,CAAE1G,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,WAC7E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,gBAClF,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,WAC7E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,WAC3E,CAAE5E,GAAI,OAAQmB,KAAM,kBAAmBqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,SAChF,CAAE5E,GAAI,OAAQmB,KAAM,aAAcqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,SAC5E,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,SAAUC,KAAM,aAAc7C,OAAQ,cACjF,CAAE5E,GAAI,OAAQmB,KAAM,iBAAkBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,WAChF,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,oBAC9E,CAAE5E,GAAI,QAASmB,KAAM,cAAeqG,IAAK,MAAOC,KAAM,aAAc7C,OAAQ,WAC5E,CAAE5E,GAAI,OAAQmB,KAAM,eAAgBqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,cAC9E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,QAASC,KAAM,aAAc7C,OAAQ,WAC7E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,UAAWC,KAAM,aAAc7C,OAAQ,gBAC/E,CAAE5E,GAAI,OAAQmB,KAAM,cAAeqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,WAC5E,CAAE5E,GAAI,OAAQmB,KAAM,YAAaqG,IAAK,OAAQC,KAAM,aAAc7C,OAAQ,YAE9E+B,oBAAqB,CACjBC,wBAAyB1E,IA5BlB,E,qDAkCf,OACI,yBAAKlC,GAAG,wBAAwB2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAC5D,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,c,GA3CnCG,IAAMC,WCiQ3BwH,G,yDA3OX,WAAYtH,GAAQ,IAAD,8BACf,cAAMA,IAEDuH,aAAe1H,IAAM2H,YAE1B,EAAKvH,MAAQ,CACTwH,UAAU,EAGV5B,QAAS,GACTC,UAAW,GACXC,eAAgB,GAGhB2B,YAAa,GACbC,cAAe,GACfC,mBAAoB,IAExB,EAAKC,gBAAkB,EAAKA,gBAAgBjI,KAArB,gBAlBR,E,8DAqBDkI,GACd,IACIzE,EAAM,GACVA,EAFWyE,EAAMC,OAAOC,QAAQ7H,MAEpB2H,EAAMC,OAAOpG,MAEzBjC,KAAKkB,SAASyC,K,qCAId3D,KAAKkB,SAAS,CACV8G,YAAahI,KAAKO,MAAM4F,QACxB8B,cAAejI,KAAKO,MAAM6F,UAC1B8B,mBAAoBlI,KAAKO,MAAM8F,mB,+BAMnC,OAAIrG,KAAKO,MAAMwH,SACJ,kBAAC,IAAD,CAAU1G,GAAG,mBAIpB,oCACI,yBAAKrC,UAAU,oBAEX,kBAACuJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yDAEJ,kBAACA,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,6BAA6BmD,QAAQ,UAAUpC,QAASC,KAAKmI,iBAA/E,kBAMR,kBAACI,EAAA,EAAD,CAAKvJ,UAAU,oBACX,kBAACwJ,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACD,EAAA,EAAUvJ,OAAX,CAAkByJ,GAAID,IAAKE,OAAQlJ,SAAS,KAA5C,WAIA,kBAAC+I,EAAA,EAAUrJ,SAAX,CAAoBM,SAAS,KACzB,kBAACgJ,EAAA,EAAKG,KAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKR,IAAN,KACI,kBAACQ,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,mBAC3B,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,KAAK,SACLC,YAAY,iBACZC,YAAU,UACVrH,MAAOjC,KAAKO,MAAM4F,QAClBoD,SAAUvJ,KAAKwJ,kBAAkBtJ,KAAKF,SAI9C,kBAAC+I,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,sBAC3B,kBAACF,EAAA,EAAKG,MAAN,oBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLE,YAAU,YACVD,YAAY,cACZpH,MAAOjC,KAAKO,MAAM6F,UAClBmD,SAAUvJ,KAAKwJ,kBAAkBtJ,KAAKF,SAiB9C,kBAAC+I,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,0BAC3B,kBAACF,EAAA,EAAKG,MAAN,wBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLE,YAAU,iBACVD,YAAY,kBACZpH,MAAOjC,KAAKO,MAAM8F,eAClBkD,SAAUvJ,KAAKwJ,kBAAkBtJ,KAAKF,UAKlD,kBAAC+I,EAAA,EAAKR,IAAN,KACI,kBAACE,EAAA,EAAD,CAAQtG,QAAQ,UAAUpC,QAASC,KAAKyJ,aAAavJ,KAAKF,OAA1D,kBAYhC,kBAACuI,EAAA,EAAD,CAAKvJ,UAAU,kBACX,kBAACwJ,EAAA,EAAD,KACI,kBAACkB,EAAA,EAAD,CAAMC,iBAAiB,UAAUrK,GAAG,4BAChC,kBAACsK,EAAA,EAAD,CAAKjK,SAAS,UACVH,MACQ,kBAAC,IAAMC,SAAP,qBAEW,kBAACyC,EAAA,EAAD,CAAOC,QAAQ,WAAf,QAGnB,kBAAC,EAAD,CACIgE,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAKnC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,cACVH,MACQ,kBAAC,IAAMC,SAAP,iCAEW,kBAACyC,EAAA,EAAD,CAAOC,QAAQ,WAAf,QAGnB,kBAAC,EAAD,CACIgE,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAGnC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,kBACVH,MACQ,kBAAC,IAAMC,SAAP,8BAEW,kBAACyC,EAAA,EAAD,CAAOC,QAAQ,QAAf,QAGnB,kBAAC,EAAD,CACIgE,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAGnC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,aACVH,MACQ,kBAAC,IAAMC,SAAP,wBAEW,kBAACyC,EAAA,EAAD,CAAOC,QAAQ,WAAf,OAGnB,kBAAC,EAAD,CACIgE,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAGnC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,QACVH,MACQ,kBAAC,IAAMC,SAAP,mBAEW,kBAACyC,EAAA,EAAD,CAAOC,QAAQ,UAAf,OAGnB,kBAAC,EAAD,CACIgE,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAInC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,WAAWH,MAAM,YAC3B,kBAAC,EAAD,CACI2G,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAGnC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,WAAWH,MAAM,YAC3B,kBAAC,EAAD,CACI2G,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,sBAGnC,kBAAC0B,EAAA,EAAD,CAAKjK,SAAS,WAAWH,MAAM,YAC3B,kBAAC,EAAD,CACI2G,QAASnG,KAAKO,MAAMyH,YACpB5B,UAAWpG,KAAKO,MAAM0H,cACtB5B,eAAgBrG,KAAKO,MAAM2H,6B,sCAW/C/G,GACZnB,KAAKkB,UAAS,iBAAO,CAAE6G,UAAU,U,GAzOjB5H,IAAMC,Y,+DCFfyJ,E,wGArBO9C,GAMd,OAJWA,EAAK+C,UAAU,EAAG,GAIf,IAHF/C,EAAK+C,UAAU,EAAG,GAGF,IAFlB/C,EAAK+C,UAAU,EAAG,K,iCAMdC,GACd,IAAIC,EAAGD,EAAEE,WAAW,GACpB,OAAOD,GACH,KAAK,GAAI,MAAO,IAChB,KAAK,IAAK,MAAO,IACjB,QAAW,OAAOE,OAAOC,eAAeH,Q,KCqtCrCI,G,gEA9rCX,WAAY9J,GAAQ,IAAD,8BAEf,cAAMA,IAhBV+J,gBAAiB,EAcE,EAbnBC,eAAgB,EAaG,EAXnBC,WAAW,EAWQ,EAVnBC,QAAU,GAUS,EARnB/F,WAAa,IAAIC,EAQE,EANnB+F,WAAa,CACTpB,YAAa,aACbpH,MAAO,GACPsH,SAAU,EAAKA,UAOf,EAAKmB,MAAQ,CAAC,UAAW,UACzB,EAAKC,iBAAmB,EACxB,EAAKC,sBAAmB5H,EACxB,EAAK6H,SAAW,CACZ,CAACpK,KAAM,cAAe2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,gBACtD,CAACrK,KAAM,cAAe2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,gBACtD,CAACrK,KAAM,QAAS2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,SAChD,CAACrK,KAAM,MAAO2I,KAAM,WAAYnH,MAAO,GAAIuI,QAAS,GAAIO,WAAY,YAAaD,MAAO,OACxF,CAACrK,KAAM,YAAa2I,KAAM,WAAYnH,MAAO,GAAIuI,QAAS,GAAIO,WAAY,kBAAmBD,MAAO,aACpG,CAACrK,KAAM,WAAY2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,YACnD,CAACrK,KAAM,oBAAqB2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,yBAC5D,CAACrK,KAAM,mBAAoB2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,yBAC3D,CAACrK,KAAM,mBAAoB2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,qBAC3D,CAACrK,KAAM,gBAAiB2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,eAC1D,CAACrK,KAAM,QAAS2I,KAAM,OAAQnH,MAAO,GAAI6I,MAAO,SAChD,CAACrK,KAAM,YAAa2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,cACtD,CAACrK,KAAM,UAAW2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,WACpD,CAACrK,KAAM,UAAW2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,WACpD,CAACrK,KAAM,aAAc2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,cACvD,CAACrK,KAAM,aAAc2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,eACvD,CAACrK,KAAM,UAAW2I,KAAM,SAAUnH,MAAO,GAAI6I,MAAO,WACpD,CAACrK,KAAM,gBAAiB2I,KAAM,WAAYnH,MAAO,GAAIuI,QAAS,GAAIO,WAAY,sBAAuBD,MAAO,kBAC5G,CAACrK,KAAM,sBAAuB2I,KAAM,WAAYnH,MAAO,GAAIuI,QAAS,GAAIO,WAAY,sBAAuBD,MAAO,sBAClH,CAACrK,KAAM,qBAAsB2I,KAAM,WAAYnH,MAAO,GAAIuI,QAAS,GAAIO,WAAY,sBAAuBD,MAAO,uBAWrH,EAAKvK,MAAQ,CACTyK,IAAK,EAGL7E,QAAS,GACT8E,cAAe,GAGfhJ,MAAO,GACPuI,QAAS,GACTU,gBAAiB,GACjBX,WAAW,EAGXY,WAAY,GACZC,SAAU,GACVC,cAAc,EAKdC,gBAAiB,GACjBC,mBAAoB,GAGpBnF,UAAW,GACXS,WAAY,GACZ2E,cAAe,GACfC,aAAc,GACdC,WAAY,GACZC,YAAa,GACbC,UAAW,GACXC,gBAAiB,GACjBC,UAAW,GACXC,UAAW,GACXC,eAAgB,GAChBC,oBAAqB,GAGrBC,gBAAiB,GACjBC,WAAY,GACZC,YAAa,GACbC,WAAY,GACZC,WAAY,GACZC,eAAgB,GAChBC,YAAa,GACbC,aAAc,GACdC,WAAY,GACZC,iBAAkB,GAClBC,aAAc,GACdC,aAAc,GACdC,iBAAkB,GAGlBC,eAAiB,CACb,CAACC,QAAS,IAAK/K,MAAO,KAG1BgL,mBAAqB,CACjBrM,KAAKC,MAAMD,KAAKsM,UAAU,EAAKrC,YAInCsC,aAAc,EACdC,aAAc,EACdC,gBAAiB,EACjBC,gBAAiB,EACjBC,aAAc,EAGdC,YAAa,GACbC,wBAAyB,GACzBC,eAAgB,GAChBC,gBAAiB,GACjBC,YAAa,GACbC,eAAgB,GAChBC,sBAAuB,GAGvBC,gBAAgB,EAChBC,cAAe,GAGfC,qBAAuB,CACnBnH,IAAM,GACN7F,MAAQ,GACRiN,MAAQ,IAEZC,0BAA2B,EAG3BC,yBAA2B,IAG/B,EAAKC,aAAe,EAAKA,aAAanO,KAAlB,gBACpB,EAAKoO,oBAAsB,EAAKA,oBAAoBpO,KAAzB,gBAC3B,EAAKqO,2BAA6B,EAAKA,2BAA2BrO,KAAhC,gBAClC,EAAKsO,qBAAuB,EAAKA,qBAAqBtO,KAA1B,gBAC5B,EAAKuO,oBAAsB,EAAKA,oBAAoBvO,KAAzB,gBAC3B,EAAKwO,SAAW,EAAKA,SAASxO,KAAd,gBAEhB,EAAKyO,iBA3IU,E,gEA+If,IAAIxI,EAAUnG,KAAKM,MAAMsO,MAAM9L,OAAO+L,aAGxB7L,GAAXmD,EAECnG,KAAKkB,SAAS,CACV,QAAYiF,EACZ,cAAkB,cAAgBA,EAAU,QAKhDnG,KAAKO,MAAM4N,0BAA2B,EACtCnO,KAAKkB,SAAS,CAACqK,mBAAqBuD,MAASC,OAAO,iBAGxD/O,KAAKgP,2B,+CAML,IAAI,IAAI5L,EAAE,EAAGA,EAAGpD,KAAK6K,SAASxH,OAAQD,IACN,YAAzBpD,KAAK6K,SAASzH,GAAGgG,MACbpJ,KAAK6K,SAASzH,GAAG2H,WAO5B,IAAQ3H,EAAE,EAAGA,EAAGpD,KAAK6K,SAASxH,OAAQD,IACN,YAAzBpD,KAAK6K,SAASzH,GAAGgG,MACkB,oBAA/BpJ,KAAK6K,SAASzH,GAAG2H,YAChB/K,KAAKiP,2BAA2B7L,EAAGpD,KAAK6K,SAASzH,GAAG2H,c,iDAMzCmE,EAAOC,GAC9B,IAAI1I,EAAOzG,KACP0D,EAAM1D,KAAKyE,WAAW+B,UAAU,4BAA6B,CAACxG,KAAK6K,SAASqE,GAAOnE,aACvF/K,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAAUiE,GAC3C,IAAI0C,EAAO1C,EAAS0C,KAEpBF,EAAKoE,SAASqE,GAAO1E,QAAU/D,EAAK2I,uBAAuBzI,EAAMwI,GACjE1I,EAAKvF,SAAS,CACV+L,mBAAqB,CAACrM,KAAKC,MAAMD,KAAKsM,UAAUzG,EAAKoE,cACtD,WACC,IAAI1E,EAAUM,EAAKnG,MAAMsO,MAAM9L,OAAO+L,aAGxB7L,GAAXmD,GACCM,EAAK4I,WAAWlJ,W,6CAMTmJ,EAAYC,GAE/B,IADA,IAAIC,EAAO,GACHpM,EAAI,EAAGA,EAAIkM,EAAWjM,OAAQD,IAAK,CACvC,IAAIO,EAAM,GACQ,aAAd4L,GACA5L,EAAI1B,MAAQqN,EAAWlM,GAAG,UAC1BO,EAAI8L,QAAUH,EAAWlM,GAAG,cAAgB,MAAQkM,EAAWlM,GAAX,YAA+B,KAEjE,mBAAdmM,GACJ5L,EAAI1B,MAAQqN,EAAWlM,GAAG,gBAC1BO,EAAI8L,QAAUH,EAAWlM,GAAG,oBAAsB,MAAQkM,EAAWlM,GAAX,YAA+B,KACrE,uBAAdmM,IACN5L,EAAI1B,MAAQqN,EAAWlM,GAAG,qBAC1BO,EAAI8L,QAAUH,EAAWlM,GAAG,kBAAoB,MAAQkM,EAAWlM,GAAX,YAA+B,KAE3FoM,EAAKhK,KAAK7B,GAEd,OAAO6L,I,iCAGArJ,GAEP,IAAIzC,EAAM1D,KAAKyE,WAAW+B,UAAU,eAAgB,CAACL,IACjDM,EAAOzG,KACXA,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAC1C,IAAIN,EAAMM,EAAS0C,KAEnB,IAAK,IAAIqE,KAAOrH,EACZ,GAAIA,EAAI+L,eAAe1E,GAAM,CACzB,IAAI2E,EAAMhM,EAAIqH,GACd,GAAU,sBAAPA,EAA6B,CAG5B,IADA,IAAI4E,EAAS,GACLxM,EAAE,EAAGA,EAAGuM,EAAItM,OAAQD,IAAK,CAK7B,IAJA,IAAIyM,EAAUF,EAAIvM,GACd0M,EAAU,GAGNC,GADJD,EAAUlP,KAAKC,MAAMD,KAAKsM,UAAUzG,EAAKoE,WACnC,GAAGkF,EAAGD,EAAQzM,OAAQ0M,IAC5BD,EAAQC,GAAR,MAAsBF,EAAQC,EAAQC,GAAR,MAElCH,EAAOpK,KAAKsK,GAEhBnM,EAAIqH,GAAO4E,GAIvBnJ,EAAKvF,SAASyC,GAAK,WACf8C,EAAKlG,MAAM0N,qBAAuB,CAC9BnH,IAAML,EAAKlG,MAAM6F,UACjBnF,MAAQ,GACRiN,MAAQ,OAGhBnN,QAAQC,IAAIyF,EAAKlG,MAAM0N,2B,uCAK3B,IAAIxH,EAAOzG,KACX6E,SAASmL,UAAY,SAAS7O,GAG1B,IAAI6J,GADJ7J,EAAIA,GAAKvC,OAAOwJ,OACJ4C,KAAO7J,EAAE8O,eAAiB9O,EAAE+O,QAErC/O,EAAEgP,UAAW1J,EAAK4D,gBAAiB,GAE5B,YAAPW,GAEKvE,EAAKlG,MAAM0M,mBAAmBzH,KAAK5E,KAAKC,MAAMD,KAAKsM,UAAUzG,EAAKoE,YAIzD,MAAb1J,EAAE+O,QACCzJ,EAAK4D,gBACD5D,EAAKkE,iBAAmB,GAAElE,EAAKkE,mBAGpB,MAAbxJ,EAAE+O,SACJzJ,EAAK4D,gBACD5D,EAAKkE,iBAAmB,GAAElE,EAAKkE,mBAG1ClE,EAAK4H,aAAarO,KAAK2K,kBAAkB,GACzC3K,KAAKqK,gBAAiB,K,uCAK1B,IAAI+F,EAAYpQ,KAAKO,MAAM0M,mBACvBoD,EAAczP,KAAKC,MAAMD,KAAKsM,UAAUlN,KAAK6K,WAEjDwF,EAAY,GAAGpO,MAAQmO,EAAUA,EAAU/M,OAAS,GAAG,GAAGpB,MAC1DoO,EAAY,GAAGpO,MAAQmO,EAAUA,EAAU/M,OAAS,GAAG,GAAGpB,MAE1DmO,EAAU5K,KAAK6K,GACfrQ,KAAKkB,SAAS,CACV+L,mBAAoBmD,M,mCAIfpF,GAAyB,IAApBsF,IAAmB,yDAC9BA,IACCtQ,KAAK2K,iBAAmBK,GAE5BhL,KAAKkB,SAAS,CAAC8J,U,yCAGAuF,GAEf,QAAqBvN,GAAlBuN,EAAH,CAEA,IAAI9J,EAAOzG,KACXA,KAAKkB,SACD,CACIkF,UAAUmK,EAAezJ,IACzBD,WAAW0J,EAAetP,MAAQ,IAAMsP,EAAerC,MACvD1C,cAAc+E,EAAeC,SAAW,IAAMD,EAAeE,SAC7DhF,aAAa,GACbC,WAAW6E,EAAeG,KAC1B/E,YAAY4E,EAAehQ,MAC3BqL,UAAU2E,EAAeI,KACzB9E,gBAAgB0E,EAAeK,MAC/B9E,UAAU+E,EAAeC,WAAWP,EAAeQ,KACnDhF,UAAUwE,EAAeS,IACzBhF,eAAe,GACfC,oBAAqB,KACtB,WACCxF,EAAKiI,WACLjI,EAAKwK,qBACLpM,SAASC,eAAe,oBAAoBoM,c,2CAOnCC,GAEjB,QAAuBnO,GAApBmO,EAAH,CAEA,IAAI1K,EAAOzG,KACXA,KAAKkB,SACD,CAEI2M,eAA4BsD,EAAiBC,UAAUC,OAAO,GAAKF,EAAiBG,eAAeC,OACnGzD,sBAA4BqD,EAAiBX,SAASe,OAAS,KAAOJ,EAAiBT,KAAKa,OAAS,KAAOJ,EAAiB5Q,MAAMgR,OAAS,KAAOJ,EAAiBK,IAAID,SACzK,WACC9K,EAAKiI,iB,0CAMGtG,GAEhB,IAAIqJ,EAAgBrJ,EAAMC,OAAOpG,MACjC,GAAoB,IAAjBwP,EAAH,CACA,IAAIhL,EAAOzG,KACX,GAAoB,QAAjByR,EAECzR,KAAKkB,SACD,CACIgL,gBAAiB,OACjBC,WAAanM,KAAKO,MAAM6F,UACxBgG,YAAcpM,KAAKO,MAAMsG,WACzBwF,WAAarM,KAAKO,MAAMuL,UACxBQ,WAAatM,KAAKO,MAAMwL,UACxBQ,eAAiBvM,KAAKO,MAAMiL,cAC5BgB,YAAcxM,KAAKO,MAAMmL,WACzBe,aAAezM,KAAKO,MAAMoL,YAC1Be,WAAa1M,KAAKO,MAAMqL,UACxBe,iBAAmB3M,KAAKO,MAAMsL,gBAC9Be,aAAe,GACfC,aAAe,GACfC,iBAAmB,KACpB,WACKrG,EAAKiI,mBAIjB,IAAI,IAAItL,EAAE,EAAGA,EAAGpD,KAAKO,MAAM4K,WAAW9H,OAAQD,IAC1C,GAAGpD,KAAKO,MAAM4K,WAAW/H,GAAGsO,MAAQD,EAAe,CAC/CzR,KAAK2R,oBAAoB3R,KAAKO,MAAM4K,WAAW/H,IAC/C,U,0CAMIwO,GAEhB,QAAwB5O,GAArB4O,EAAH,CAEiC,KAA9BA,EAAkBC,SAAgBD,EAAkBC,SAAW,OAC5B,KAA9BD,EAAkBC,SAAgBD,EAAkBC,SAAW,MACjC,KAA9BD,EAAkBC,WAAgBD,EAAkBC,SAAW,YAEvE,IAAIpL,EAAOzG,KACXA,KAAKkB,SACD,CACIgL,gBAAiB0F,EAAkBC,SACnC1F,WAAYyF,EAAkBF,KAC9BtF,YAAawF,EAAkB3Q,MAAQ,IAAM2Q,EAAkB1D,MAC/D3B,eAAgBvM,KAAKO,MAAMiL,cAC3BsG,cAAe,GACftF,YAAaxM,KAAKO,MAAMmL,WACxBe,aAAczM,KAAKO,MAAMoL,YACzBe,WAAY1M,KAAKO,MAAMqL,UACvBmG,iBAAkBH,EAAkBhB,MACpCvE,WAAYwE,EAAeC,WAAWc,EAAkBb,KACxDzE,WAAYsF,EAAkBZ,IAC9BgB,gBAAiB,GACjBC,qBAAsB,KACvB,WACCxL,EAAKiI,iB,iDAKUtG,GAEvB,IAAI3B,EAAOzG,KACP2P,EAAMvH,EAAMC,OAAOpG,MACnBiQ,EAAYlS,KAAKO,MAAMwM,eAE3BmF,EADY9J,EAAMC,OAAOC,QAAQ4G,OAChBjN,MAAQ0N,EAEzB,IAAI,IAAIvM,EAAE,EAAGA,EAAG8O,EAAU7O,OAAQD,IACE,IAA7B8O,EAAU9O,GAAGnB,MAAMsP,QAClBW,EAAUC,OAAO/O,EAAG,GAI5B,IAAQA,EAAE,EAAGA,EAAG8O,EAAU7O,OAAQD,IACtB,GAALA,EAAO8O,EAAU9O,GAAG4J,QAAU,IAC5BkF,EAAUlF,QAAU6D,EAAeuB,WAAWF,EAAU9O,EAAI,GAAG4J,SAGxE,IAAIrJ,EAAM,CAACqJ,QAAS6D,EAAeuB,WAAWF,EAAUA,EAAU7O,OAAS,GAAG2J,SAAU/K,MAAO,IAC/FiQ,EAAU1M,KAAK7B,GAEf3D,KAAKkB,SAAS,CAAC6L,eAAgBmF,IAAY,WACvCzL,EAAKiI,gB,2CAKT,IAAIjI,EAAOzG,KACPqS,EAAmBrS,KAAKyE,WAAW+B,UAAU,wBAAyB,CAACxG,KAAKO,MAAM6F,YACtFpG,KAAKyE,WAAWiC,UAAU2L,EAAkBrS,MAAM,SAASiE,GACvDlD,QAAQC,IAAIiD,GACZwC,EAAKvF,SAAS,CAACiK,WAAalH,EAAS0C,Y,2CAIxByB,GACjB,IAAI8G,EAAQ9G,EAAMC,OAAOC,QAAQ4G,MAC7BzO,EAAO2H,EAAMC,OAAOC,QAAQ7H,KAE5B6R,EAAe1R,KAAKC,MAAMD,KAAKsM,UAAUlN,KAAKO,MAAM0M,qBAG7C,eAARxM,IAEC6R,EAAapD,GAAO,GAAGjN,MAAQmG,EAAMC,OAAOpG,OAShD,IANA,IAAIkL,EAAe,EACfC,EAAe,EACfC,EAAkB,EAClBC,EAAkB,EAClBC,EAAe,EAEXnK,EAAE,EAAGA,EAAGkP,EAAapD,GAAO7L,OAAQD,IACpCkP,EAAapD,GAAO9L,GAAG3C,MAAQA,IAC/B6R,EAAapD,GAAO9L,GAAGnB,MAAQmG,EAAMC,OAAOpG,OAIpD,IAAI,IAAI8N,EAAE,EAAGA,EAAGuC,EAAajP,OAAQ0M,IACjC,IAAQ3M,EAAE,EAAGA,EAAGkP,EAAavC,GAAG1M,OAAQD,IACpCrC,QAAQC,IAAIsR,EAAapD,GAAO9L,GAAG3C,MACA,WAA/B6R,EAAapD,GAAO9L,GAAG3C,OAAmB0M,GAAgBoF,MAAMC,WAAWF,EAAavC,GAAG3M,GAAGnB,QAAU,EAAIuQ,WAAWF,EAAavC,GAAG3M,GAAGnB,QAC3G,WAA/BqQ,EAAapD,GAAO9L,GAAG3C,OAAmB2M,GAAgBmF,MAAMC,WAAWF,EAAavC,GAAG3M,GAAGnB,QAAU,EAAIuQ,WAAWF,EAAavC,GAAG3M,GAAGnB,QAC3G,cAA/BqQ,EAAapD,GAAO9L,GAAG3C,OAAsB4M,GAAmBkF,MAAMC,WAAWF,EAAavC,GAAG3M,GAAGnB,QAAU,EAAIuQ,WAAWF,EAAavC,GAAG3M,GAAGnB,QACjH,cAA/BqQ,EAAapD,GAAO9L,GAAG3C,OAAsB6M,GAAmBiF,MAAMC,WAAWF,EAAavC,GAAG3M,GAAGnB,QAAU,EAAIuQ,WAAWF,EAAavC,GAAG3M,GAAGnB,QACjH,WAA/BqQ,EAAapD,GAAO9L,GAAG3C,OAAmB8M,GAAgBgF,MAAMC,WAAWF,EAAavC,GAAG3M,GAAGnB,QAAU,EAAKuQ,WAAWF,EAAavC,GAAG3M,GAAGnB,QAGvJlB,QAAQC,IAAIsR,GAEZ,IAAI7L,EAAOzG,KACXA,KAAKkB,SAAS,CACV+L,mBAAoBqF,EACpBnF,aAAcA,EACdC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,aAAcA,IACf,WACC9G,EAAKiI,gB,0CAIOtG,GAEhB,IAAI3B,EAAOzG,KACPS,EAAO2H,EAAMC,OAAOC,QAAQ7H,KAChCT,KAAKkB,SAAL,eAAgBT,EAAO2H,EAAMC,OAAOpG,QAAQ,WACxCwE,EAAKiI,gB,iCAMT7J,SAAS4N,uBAAuB,cAAc,GAAGC,UAAUC,IAAI,cACnC3P,GAAzBhD,KAAK4K,kBACJgI,cAAc5S,KAAK4K,kBAEvB,IAAInE,EAAOzG,KAEXA,KAAK4K,iBAAmBiI,YAAW,WAE/B,IAAIC,EAAe,GAEnB,IAAK,IAAI9H,KAAOvE,EAAKlG,MACjB,GAAIkG,EAAKlG,MAAMmP,eAAe1E,KAGtBA,EAAI+H,WAAW,WAAa/H,EAAI+H,WAAW,WAAa/H,EAAI+H,WAAW,YACvE/H,EAAI+H,WAAW,cAAgB/H,EAAI+H,WAAW,UAE1C,GAAU,sBAAP/H,EAA6B,CAG5B,IADA,IAAIgI,EAAc,GACV5P,EAAE,EAAGA,EAAEqD,EAAKlG,MAAMyK,GAAK3H,OAAQD,IAAK,CAIxC,IAFA,IAAI6P,EAAWxM,EAAKlG,MAAMyK,GAAK5H,GAC3BO,EAAM,GACFoM,EAAE,EAAGA,EAAGkD,EAAS5P,OAAQ0M,IAC7BpM,EAAIsP,EAASlD,GAAGtP,MAAQwS,EAASlD,GAAG9N,MAExC+Q,EAAYxN,KAAK7B,GAErBmP,EAAa9H,GAAOgI,OAGpBF,EAAa9H,GAAOvE,EAAKlG,MAAMyK,QAM1BhI,GAAtByD,EAAKlG,MAAM4F,UACV2M,EAAY,GAASrM,EAAKlG,MAAM4F,SAEpC,IAAI+M,EAAczM,EAAKhC,WAAW+B,UAAU,iBAC5CC,EAAKhC,WAAW0O,WAAWD,EAAatS,KAAKsM,UAAU4F,GAAerM,GAAM,SAASxC,GAEjF,IAC4B,YAApBA,EAASC,SACTuC,EAAKvF,SAAS,CAAC,QAAW+C,EAAS0C,KAAKrH,KACxCmH,EAAKvF,SAAS,CAAC,cAAiB,cAAgB+C,EAAS0C,KAAKrH,GAAK,OAEvEuF,SAAS4N,uBAAuB,cAAc,GAAGC,UAAUU,OAAO,SACpE,MAAMjS,GACJJ,QAAQsS,MAAMlS,SAIvB,Q,sCAIHvC,OAAOC,SAASC,KAAO,sB,kCAIvBF,OAAOC,SAASyU,W,uCAKhB,GAAkC,GAA/BtT,KAAKO,MAAM6F,UAAU/C,OAAxB,CAKArD,KAAKkB,SAAS,CAAC6M,gBAAiB,IAEhC,IAAItH,EAAOzG,KACPuT,EAAkBvT,KAAKyE,WAAW+B,UAAU,mBAAoB,CAACxG,KAAKO,MAAM6F,YAChFpG,KAAKyE,WAAWiC,UAAU6M,EAAiBvT,MAAM,SAASiE,GACtDwC,EAAKvF,SAAS,CAAC8M,cAAgB/J,EAAS0C,eATxCxC,MAAM,4B,8CAcVnE,KAAKkB,SAAS,CAAC6M,gBAAiB,M,uCAGnB3F,GACb,IAAIjC,EAAUiC,EAAMC,OAAOC,QAAQuG,QACnCjQ,OAAO4U,KACHxT,KAAKyE,WAAW/B,KAAO,kBAAoByD,EAC3C,gBACA,iC,+BAIE,IAAD,OAEL,OACI,yBAAKnH,UAAU,0BACX,kBAACuJ,EAAA,EAAD,CAAKvJ,UAAU,aACX,kBAACwJ,EAAA,EAAD,KACI,0BAAMxJ,UAAU,aAAhB,iBACA,0BAAMA,UAAU,aAAhB,IAA8BgB,KAAKO,MAAM0K,cAAzC,KACA,0BAAMjM,UAAU,cAAhB,gBAGJ,kBAACwJ,EAAA,EAAD,KAKI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,sBAAsBmD,QAAQ,UAAUpC,QAASC,KAAKyT,UAAUvT,KAAKF,OAAvF,SAIA,kBAACyI,EAAA,EAAD,CAAQzJ,UAAU,sBAAsBmD,QAAQ,UAAUpC,QAASC,KAAK+N,eAAe7N,KAAKF,OAA5F,iBAIA,kBAACyI,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAK0T,cAAcxT,KAAKF,OAArG,qBAMR,kBAAC+I,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,CAAMpI,UAAWtB,KAAK2K,iBAAkBrL,GAAG,oBAAoBN,UAAU,oBAAoBuC,SAAUvB,KAAKqO,cACxG,kBAACzE,EAAA,EAAD,CAAKjK,SAAU,EAAGH,MAAM,qBACpB,kBAACmU,EAAA,EAAD,CAAWC,OAAK,GAEZ,kBAAC7K,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,IAAKvJ,UAAU,YAAYiK,UAAU,gBAC7C,kBAACF,EAAA,EAAKG,MAAN,CAAY5D,QAAM,EAACuO,GAAG,IAAIC,GAAG,KAA7B,gBAIA,kBAACtL,EAAA,EAAD,CAAKqL,GAAG,IAAIC,GAAG,KACX,kBAAC/K,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAAS3G,MAAOjC,KAAKO,MAAM+K,gBAAiBhC,YAAU,kBAAkBC,SAAUvJ,KAAKyO,qBAClGzO,KAAK0K,MAAMqJ,KAAI,SAAC3K,GAAD,OACb,4BAAQnH,MAAOmH,GACVA,QAMjB,kBAACL,EAAA,EAAKG,MAAN,CAAY5D,QAAM,EAACuO,GAAG,IAAIC,GAAG,KAA7B,iBAIA,kBAACtL,EAAA,EAAD,CAAKqL,GAAG,IAAIC,GAAG,KACX,kBAAC/K,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMgL,mBAAoBjC,YAAU,qBAAqBC,SAAUvJ,KAAKyO,uBAGlH,kBAAC1F,EAAA,EAAKG,MAAN,CAAY5D,QAAM,EAACuO,GAAG,IAAIC,GAAG,KAA7B,eAIA,kBAACtL,EAAA,EAAD,CAAKqL,GAAG,IAAIC,GAAG,KACX,kBAAC/K,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOE,YAAU,iBAAiBrH,MAAOjC,KAAKO,MAAMmN,eAAgBnE,SAAUvJ,KAAKyO,oBAAqBpF,YAAY,sBAInJ,6BAEA,kBAACN,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,YAChB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,aAC3B,kBAACF,EAAA,EAAKG,MAAN,8BACA,kBAAC,IAAD,CACI5J,GAAG,sBACH+J,YAAY,oBACZ2K,WAAW,IACXC,UAAWjU,KAAKO,MAAM4N,yBACtBlM,MAAOjC,KAAKO,MAAM6F,UAClBmE,UAAWvK,KAAKO,MAAMgK,UACtB2J,SAAU,SAAAC,GAAM,gBAAOA,EAAOrN,IAAd,YAAqBqN,EAAOlT,MAA5B,YAAqCkT,EAAOjG,QAC5DkG,SAAU,SAACC,GAEP,EAAKnT,SAAS,CAACqJ,WAAW,IAC1B1G,MAAM,EAAKY,WAAW+B,UAAU,mBAAoB,CAAC6N,KACpDvQ,MAAK,SAAAwQ,GAAI,OAAIA,EAAKtQ,UAClBF,MAAK,SAAAE,GACF,EAAK9C,SAAS,CACVsJ,QAASxG,EAAK2C,OAElB,EAAKzF,SAAS,CAACqJ,WAAW,QAIlChB,SAAU,SAACgL,GAEP,EAAKC,mBAAmBD,EAAS,KAGrCE,uBAAwB,SAACN,EAAQ7T,GAAT,OACpB,yBAAKtB,UAAU,uBACX,8BAAOmV,EAAOlT,MAAd,IAAsBkT,EAAOjG,OAC7B,0BAAMlP,UAAU,gBAAhB,WAAwCmV,EAAOrN,IAA/C,QAGR0D,QAASxK,KAAKO,MAAMiK,WAI5B,kBAACzB,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,cAC3B,kBAACF,EAAA,EAAKG,MAAN,sBAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMsG,WAAYwC,YAAY,wBAGxE,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,QAC3B,kBAACF,EAAA,EAAKG,MAAN,wCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMkL,aAAcpC,YAAY,0BAI9E,kBAACN,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,oBAEhB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,iBAC3B,kBAACF,EAAA,EAAKG,MAAN,yBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMiL,cAAenC,YAAY,2BAG3E,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,cAC3B,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMmL,WAAYrC,YAAY,UAGxE,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,eAC3B,kBAACF,EAAA,EAAKG,MAAN,uBAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMoL,YAAatC,YAAY,WAGzE,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,YAAYjK,UAAU,UACjD,kBAAC+J,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMsL,gBAAiBxC,YAAY,wBAG7E,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,OAC3B,kBAACF,EAAA,EAAKG,MAAN,YACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMqL,UAAWvC,YAAY,SAGvE,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,OAC3B,kBAACF,EAAA,EAAKG,MAAN,uBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMuL,UAAWzC,YAAY,SAGvE,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,OAC3B,kBAACF,EAAA,EAAKG,MAAN,YAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAAS3G,MAAOjC,KAAKO,MAAMwL,WACxC,4BAAQ9J,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,cAKR,kBAAC8G,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,UAAUjK,UAAU,UAC/C,kBAAC+J,EAAA,EAAKG,MAAN,wBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMyL,eAAgB3C,YAAY,qBAG5E,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,oBAAoBjK,UAAU,UACzD,kBAAC+J,EAAA,EAAKG,MAAN,+BACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAM0L,oBAAqB5C,YAAY,oBAMzF,6BAEA,kBAACsK,EAAA,EAAD,CAAWC,OAAK,GAEZ,kBAAC7K,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,IAAKvJ,UAAU,YAAYiK,UAAU,gBAE7C,kBAACF,EAAA,EAAKG,MAAN,CAAY5D,QAAM,EAACuO,GAAG,IAAIC,GAAG,KAA7B,WAIA,kBAACtL,EAAA,EAAD,CAAKqL,GAAG,IAAIC,GAAG,KACX,kBAAC/K,EAAA,EAAKI,QAAN,CACIP,GAAG,SACH3G,MAAOjC,KAAKO,MAAM4L,WAClB5C,SAAUvJ,KAAKsO,oBACfhP,GAAG,oBACH,4BAAQ2C,MAAO,IAAf,oBACA,4BAAQA,MAAO,QAAf,QAEIjC,KAAKO,MAAM4K,WAAW4I,KAAI,SAASjO,EAAOoJ,GACtC,OACI,4BAAQjN,MAAO6D,EAAM4L,MAChB5L,EAAM7E,MAAMsQ,OAAS,IAAMzL,EAAMoI,MAAMqD,OAAS,IAAMzL,EAAM4O,QAAQnD,cASrG,6BAEA,kBAACxI,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,sBAEhB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,YAC3B,kBAACF,EAAA,EAAKG,MAAN,wCAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAM2L,gBAAiB7C,YAAY,+BAA+BsL,UAAU,KAGtH,kBAAC5L,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,gBAC3B,kBAACF,EAAA,EAAKG,MAAN,uBAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAM6L,YAAa/C,YAAY,qBAAqBsL,UAAU,KAGxG,kBAAC5L,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,eAC3B,kBAACF,EAAA,EAAKG,MAAN,iCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAM8L,WAAYhD,YAAY,oBAAoBsL,UAAU,KAGtG,kBAAC5L,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,eAC3B,kBAACF,EAAA,EAAKG,MAAN,uBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAAS3G,MAAOjC,KAAKO,MAAM+L,WAAYqI,UAAU,GAC9D,4BAAQ1S,MAAM,IAAd,MACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,eAMZ,kBAAC8G,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,2BAEhB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,kBAC3B,kBAACF,EAAA,EAAKG,MAAN,wCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMgM,eAAgBlD,YAAY,2BAG5E,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,eAC3B,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMiM,YAAanD,YAAY,UAGzE,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,gBAC3B,kBAACF,EAAA,EAAKG,MAAN,cAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMkM,aAAcpD,YAAY,WAG1E,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,cAC3B,kBAACF,EAAA,EAAKG,MAAN,YACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMmM,WAAYrD,YAAY,UAK5E,kBAACN,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,2BAEhB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,oBAC3B,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOnH,MAAOjC,KAAKO,MAAMoM,iBAAkBtD,YAAY,wBAG9E,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,gBAC3B,kBAACF,EAAA,EAAKG,MAAN,+BAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAAS3G,MAAOjC,KAAKO,MAAMqM,cACxC,4CACA,6CACA,8CAIR,kBAAC7D,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,kBAC3B,kBAACF,EAAA,EAAKG,MAAN,kCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAAS3G,MAAOjC,KAAKO,MAAMsM,cACxC,8CACA,uDACA,yDAIR,kBAAC9D,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,eAC3B,kBAACF,EAAA,EAAKG,MAAN,yCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAAS3G,MAAOjC,KAAKO,MAAMuM,kBACxC,gDACA,mDACA,wDAMhB,6BAEA,kBAAC6G,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC7K,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,sBAChB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,aAC3B,kBAACF,EAAA,EAAKG,MAAN,iDAIA,kBAACX,EAAA,EAAD,KACMvI,KAAKO,MAAMwM,eAAegH,KAAI,SAACa,EAAG1F,GAAJ,OAC5B,kBAAC1G,EAAA,EAAD,CAAKqL,GAAG,IAAIC,GAAG,KACX,+BAAKc,EAAE5H,QAAP,WACA,kBAACjE,EAAA,EAAKI,QAAN,CACInK,UAAU,kBACVoK,KAAK,OACLyL,aAAY3F,EACZ3F,SAAU,EAAKgF,2BACftM,MAAO2S,EAAE3S,MACToH,YAAY,YAOpC,kBAACN,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,sBAChB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,aAC3B,kBAACF,EAAA,EAAKG,MAAN,kBAEI,0BAAMjC,MAAO,CAAC6N,SAAS,SAAvB,gCAIA,kBAACrM,EAAA,EAAD,CAAQzJ,UAAU,+BAA+BmD,QAAQ,UAAUpC,QAASC,KAAK+U,eAAe7U,KAAKF,OAArG,sBAIJ,kBAACuI,EAAA,EAAD,KACI,8BAEJ,kBAACA,EAAA,EAAD,KACI,kBAACyM,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKpW,UAAU,2BAC9C,+BAGIgB,KAAKO,MAAM0M,mBAAmB8G,KAAI,SAAC9R,EAAOiN,GACtC,OAEI,4BACI,4BACI,kBAACxG,EAAA,EAAD,KACI,kBAACA,EAAA,EAAUvJ,OAAX,CAAkByJ,GAAID,IAAKE,OAAQlJ,SAAS,KACxC,2BAAI,YAAcuP,EAAQ,IAD9B,YAGK,cAAgF,GAAhE,EAAK3O,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,OAAOlO,OAAc,EAAI,EAAK9C,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,QAH5I,YAKK,cAAgF,GAAhE,EAAKhR,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,OAAOlO,OAAc,EAAI,EAAK9C,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,QAL5I,YAOK,iBAAmF,GAAhE,EAAKhR,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,OAAOlO,OAAc,EAAI,EAAK9C,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,QAP/I,YASK,kBAAoF,GAAhE,EAAKhR,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,OAAOlO,OAAc,EAAI,EAAK9C,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,QAThJ,YAWK,cAAgF,GAAhE,EAAKhR,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,OAAOlO,OAAc,EAAI,EAAK9C,MAAM0M,mBAAmBiC,GAAO,IAAIjN,MAAMsP,SAE5I,kBAAC7I,EAAA,EAAUrJ,SAAX,CAAoBM,SAAS,KACzB,yBAAKX,UAAU,iCAEP,EAAKuB,MAAM0M,mBAAmBiC,GAAO6E,KAAI,SAACsB,EAAMC,GAC5C,MAAiB,aAAdD,EAAKjM,KAEA,6BACI,mCAAQ,+BAAKiM,EAAKvK,MAAV,OAAR,KACA,kBAAC/B,EAAA,EAAKI,QAAN,CAAcP,GAAG,SACHU,YAAW+L,EAAK5U,KAChBwB,MAAOoT,EAAKpT,MACZ4S,aAAY3F,EACZ3F,SAAU,EAAKiF,sBACzB,4BAAQvM,MAAO,KAEX,EAAK1B,MAAM0M,mBAAmBiC,GAAOoG,GAAQ9K,QAAQuJ,KAAI,SAACsB,EAAMC,GAC5D,OAAQ,4BAAQrT,MAAOoT,EAAKpT,OAApB,IAA6BoT,EAAK5F,QAAlC,UAQxB,6BACI,mCAAQ,+BAAK4F,EAAKvK,MAAV,OAAR,KACA,kBAAC/B,EAAA,EAAKI,QAAN,CACII,SAAU,EAAKiF,qBACflF,YAAW+L,EAAK5U,KAChBoU,aAAY3F,EACZjN,MAAOoT,EAAKpT,MACZmH,KAAMiM,EAAKjM,aAQ3C,mCAOxB,4BACI,4BACI,yBAAMmM,MAAO,mBACT,6BACI,mCAAQ,gDAAR,KACA,kBAACxM,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLnH,MAAOjC,KAAKO,MAAM4M,aAClBwH,UAAQ,KAIhB,6BACI,mCAAQ,gDAAR,KACA,kBAAC5L,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLnH,MAAOjC,KAAKO,MAAM6M,aAClBuH,UAAQ,KAIhB,6BACI,mCAAQ,mDAAR,KACA,kBAAC5L,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLnH,MAAOjC,KAAKO,MAAM8M,gBAClBsH,UAAQ,KAIhB,6BACI,mCAAQ,oDAAR,KACA,kBAAC5L,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLnH,MAAOjC,KAAKO,MAAM+M,gBAClBqH,UAAQ,KAIhB,6BACI,mCAAQ,gDAAR,KACA,kBAAC5L,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLnH,MAAOjC,KAAKO,MAAMgN,aAClBoH,UAAQ,cAahD,6BAEA,kBAAChB,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC7K,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,YAChB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,UAC3B,kBAACF,EAAA,EAAKG,MAAN,yBAEA,kBAAC,IAAD,CACII,YAAU,cACVrH,MAAOjC,KAAKO,MAAMiN,YAClBnE,YAAY,mBACZ/J,GAAG,SACH0U,WAAW,IACXzJ,UAAWvK,KAAKO,MAAMgK,UACtB2J,SAAU,SAAAC,GAAM,gBAAOA,EAAO/C,YAC9BgD,SAAU,SAACC,GAEP,EAAKnT,SAAS,CAACqJ,WAAW,IAC1B1G,MAAM,EAAKY,WAAW+B,UAAU,qBAAsB,CAAC6N,KAClDvQ,MAAK,SAAAwQ,GAAI,OAAIA,EAAKtQ,UAClBF,MAAK,SAAAE,GACF,EAAK9C,SAAS,CACVgK,gBAAiBlH,EAAK2C,OAE1B,EAAKzF,SAAS,CAACqJ,WAAW,QAItChB,SAAU,SAACgL,GAEP,EAAKiB,qBAAqBjB,EAAS,KAGvCE,uBAAwB,SAACN,EAAQ7T,GAAT,OACpB,yBAAKtB,UAAU,uBACX,8BAAOmV,EAAO/C,WACd,0BAAMpS,UAAU,gBAAhB,KAAkCmV,EAAO/C,UAAY+C,EAAO7C,eAA5D,QAGR9G,QAASxK,KAAKO,MAAM2K,mBAI5B,kBAACnC,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,YAC3B,kBAACF,EAAA,EAAKG,MAAN,mBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOE,YAAU,iBAAiBrH,MAAOjC,KAAKO,MAAMsN,eAAgBtE,SAAUvJ,KAAKyO,oBAAqBpF,YAAY,oBAG3I,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,mBAC3B,kBAACF,EAAA,EAAKG,MAAN,2BACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOE,YAAU,wBAAwBrH,MAAOjC,KAAKO,MAAMuN,sBAAuBvE,SAAUvJ,KAAKyO,oBAAqBpF,YAAY,6BAI7J,kBAACN,EAAA,EAAKR,IAAN,CAAUvJ,UAAU,YAEhB,kBAAC+J,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,cAC3B,kBAACF,EAAA,EAAKG,MAAN,yBAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOE,YAAU,0BAA0BrH,MAAOjC,KAAKO,MAAMkN,wBAAyBlE,SAAUvJ,KAAKyO,oBAAqBpF,YAAY,4BAQ7J,kBAACN,EAAA,EAAKC,MAAN,CAAYJ,GAAIJ,IAAKS,UAAU,SAC3B,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,GAAG,SAASU,YAAU,cAAcrH,MAAOjC,KAAKO,MAAMqN,YAAarE,SAAUvJ,KAAKyO,oBAAqBpF,YAAY,eAC7H,gDACA,kDACA,0DAU5B,kBAACd,EAAA,EAAD,CAAKvJ,UAAU,aACX,kBAACwJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,2BAA2BmD,QAAQ,WAArD,gBAMR,kBAACsT,EAAA,EAAD,CAAOC,KAAM1V,KAAKO,MAAMwN,eAAgB4H,OAAQ3V,KAAK4V,sBAAsB1V,KAAKF,OAC5E,kBAACyV,EAAA,EAAM5M,OAAP,CAAcgN,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,uBAEJ,kBAACL,EAAA,EAAM3M,KAAP,KACI,kBAACkM,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACA,4BACI,uCACA,8CACA,sCACA,sCAIAnV,KAAKO,MAAMyN,cAAc+F,KAAI,SAACgC,GAAD,OACzB,4BACI,gCAAMA,EAAMzW,GAAZ,KACA,gCAAMwP,IAAOiH,EAAMxK,mBAAoB,cAAcwD,OAAO,cAA5D,KACA,iCACA,gCAAK,kBAACtG,EAAA,EAAD,CAAQuN,eAAcD,EAAMzW,GAAIS,QAAS,EAAKkW,iBAAiB/V,KAAK,IAApE,UAAL,iB,GAjsCdC,IAAMC,Y,kBCsGjB8V,G,yDA1GX,WAAY5V,GAAQ,IAAD,8BAEf,cAAMA,IALVmE,WAAa,IAAIC,EAGE,EAFnByR,aAAe,GAEI,EAqFnBxR,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,iCAAiCC,YACrEC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBAlGX,EAAKrF,MAAQ,CACTsF,WAAY,CACN,CAAE7D,WAAY,eAAgB8D,MAAO,aAAcsQ,QAAQ,EAAMC,gBAAgB,EAAMC,KAAM,IAEjGtQ,QAAS,GAITuQ,QAAS,CACPC,MAIR,EAAKC,sBAjBU,E,4DAqBf7X,OAAOC,SAASC,KAAO,sB,4CAKvB,IAAI4E,EAAM1D,KAAKyE,WAAW+B,UAAU,kBAChCC,EAAOzG,KACXA,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAI1C,IAFA,IAAI0C,EAAO1C,EAAS0C,KAChB+P,EAAO,GACHtT,EAAE,EAAGA,EAAGuD,EAAKtD,OAAQD,IAAK,CAC9B,IAAIO,EAAM,GACVA,EAAG,WAAiBgD,EAAKvD,GAAL,MACpBqD,EAAK0P,aAAaxP,EAAKvD,GAAL,OAAoBuD,EAAKvD,GAAL,WAEtCsT,EAAKlR,KAAK7B,GAEd8C,EAAKvF,SAAS,CAAC8E,QAAU0Q,S,oCAInB/S,GACV5C,QAAQC,IAAI2C,GACZ,IAAIqD,EAAUrD,EAAIgD,KAAKgQ,WACnBC,EAAa5W,KAAKmW,aAAanP,GACnCpI,OAAOC,SAASC,KAAO,sBAAwB8X,EAAa,UAAY5P,I,+BAIxE,OACI,yBAAKhI,UAAU,kBACX,kBAACuJ,EAAA,EAAD,CAAKvJ,UAAU,aACX,kBAACwJ,EAAA,EAAD,KACI,0BAAMxJ,UAAU,aAAhB,uBAGJ,kBAACwJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAK0T,cAAcxT,KAAKF,OAArG,qBAMR,kBAACuI,EAAA,EAAD,KACI,yBAAKjJ,GAAG,gCAAgC2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACpE,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,cAAD,CACIqP,QAASvW,KAAKO,MAAMgW,QACpB1Q,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBC,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,MAC/CoH,cAAepH,KAAKoH,cAAclH,KAAKF,gB,GA/E1CG,IAAMC,Y,iBCXdyW,G,kDAEjB,WAAYvW,GAAQ,IAAD,8BACf,cAAMA,IAEDwW,cAAgB,EAAKA,cAAc5W,KAAnB,gBAHN,E,4DAQfa,QAAQC,IAAIhB,KAAKM,MAAMuB,MACvB7B,KAAKM,MAAMoB,QAAQC,gBAAgBoV,OAC/B/W,KAAKM,MAAMuB,KAAK8E,KAAM3G,KAAKM,MAAMuB,KAAKC,Y,+BAKtC,GAAwB,WAArB9B,KAAKM,MAAM2B,MACV,OACI,oCACI,kBAAC,IAAD,CAAUmT,KAAK,MAAMrV,QAASC,KAAK8W,qB,GApBH1W,a,oBCmZzC4W,I,yDAtSX,WAAY1W,GAAQ,IAAD,8BAEf,cAAMA,IA/FVmE,WAAa,IAAIC,EA6FE,EA5FnBuS,uBAAyB,CACrB,mBAAuB,CACnB,GAAO,mBACP,WAAe,CAAC,qBAGpB,cAAkB,CACV,GAAO,aACP,WAAe,CAAC,eAGxB,gBAAoB,CACZ,GAAO,gBACP,WAAe,CAAC,kBAGxB,oBAAwB,CAChB,GAAO,oBACP,WAAe,CAAC,sBAGxB,iBAAqB,CACb,GAAO,iBACP,WAAe,CAAC,mBAGxB,iBAAqB,CACb,GAAO,gBACP,WAAe,CAAC,kBAGxB,gCAAoC,CAC5B,GAAO,iCACP,WAAe,CAAC,mCAGxB,4BAAgC,CACxB,GAAO,8BACP,WAAe,CAAC,gCAGxB,2BAA+B,CACvB,GAAO,2BACP,WAAe,CAAC,6BAGxB,eAAmB,CACX,GAAO,cACP,WAAe,CAAC,cAAgB,YAAY,QAAQ,MAAM,OAAO,YAAY,UAAU,uBAAuB,WAAW,UAAU,kBAG3I,yBAA6B,CACrB,GAAO,0BACP,WAAe,CAAC,4BAGxB,UAAc,CACN,GAAO,SACP,WAAe,CAAC,WAGxB,yBAA6B,CACrB,GAAO,0BACP,WAAe,CAAC,0BAA4B,gBAGpD,0BAA8B,CACtB,GAAO,4BACP,WAAe,CAAC,4BAA8B,gBAGtD,YAAgB,CACR,GAAO,YACP,WAAe,CAAC,cAGxB,gBAAoB,CACZ,GAAO,eACP,WAAe,CAAC,iBAGxB,aAAiB,CACT,GAAO,YACP,WAAe,CAAC,YAAc,2CAA2C,2CAA2C,wCAAwC,0CAA0C,iDAAiD,8CAA8C,gDAAgD,uCAAuC,uCAAuC,yCAAyC,+CAA+C,+CAA+C,iDAAiD,2BAA2B,6BAA6B,2BAA2B,6BAA6B,8BAA8B,gCAAgC,2BAA2B,6BAA6B,gBAAgB,gBAAgB,mBAAmB,kBAG53B,KAAS,CACL,GAAO,UACP,WAAe,CAAC,UAAW,iBAAkB,SAAU,uCAQ3D,EAAKnM,MAAQ,EAAKxK,MAAMsO,MAAM9L,OAAOgI,MAErC,EAAKvK,MAAQ,CACTsF,WAAY,CAAC,IACbG,QAAS,CAAC,IACV8E,MAAO,EAAKA,MACZoM,KAAM,GACNC,QAAS,KACTC,UAAW,KACXC,aAAc,GACd3V,QAAS,CAAEC,gBAAgB,gBAC3B2V,aAAc,WAEdrR,oBAAqB,CACjBsR,yBAA2BV,IAG/BW,cAAe,CACXC,UAAU,EACVC,UAAU,EACVtB,OAAQ,qBACRC,gBAAgB,EAChBsB,WAAW,EACXrB,KAAM,EACNpP,MAAO,KAGXqP,QAASqB,KACTC,QAAS,CACLC,WAAY,CACV,CACExY,GAAI,UACJyY,aAAc,UACd7D,SAAU,UACV8D,QAAS,UACTC,UAAW,qBACXC,gBAAiB,CACbC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,qBAAqB,EACrBC,sBAAsB,EACtBC,yBAAyB,EACzBC,yBAAyB,KAIjCC,iBAAkB,KApDX,E,gEA2Df3Y,KAAK4Y,wB,6CAILha,OAAOC,SAASC,KAAO,2BAA6BkB,KAAKO,MAAM2W,KAAO,UAAYlX,KAAKO,MAAMuK,Q,iDAI7FlM,OAAOC,SAASC,KAAO,uB,4CAKvB,IAAIoY,EAAOlX,KAAKM,MAAMsO,MAAM9L,OAAOoU,KAEnC,QAAWlU,GAARkU,EAAH,CACAlX,KAAKkB,SAAS,CAAC,KAAQgW,IAGvB,IAAIxT,EAAM1D,KAAKyE,WAAW+B,UAAU,kCAAmC,CAACxG,KAAKM,MAAMsO,MAAM9L,OAAOoU,OAC5FzQ,EAAOzG,KACXA,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAE1C,IAAI0C,EAAO1C,EAAS0C,KAEhBkS,EAAO,GACX,GAAGlS,EAAKtD,OAAS,EAAG,CAGhB,IAAI,IAAIyV,EAAI,EAAGA,EAAInS,EAAKtD,OAAQyV,IAE5B,IAAK,IAAI9N,KAAOrE,EAAKmS,GACjB,GAAmB,MAAhBnS,EAAKmS,GAAG9N,GACPrE,EAAKmS,GAAG9N,GAAO,OAEd,CACD,IAAI/I,EAAQ0E,EAAKmS,GAAG9N,GAAK+N,WAGzB,GAAG9W,EAAM2M,MAAM,sDACf,CACI,IAAIoK,EAAQ/W,EAAMiB,MAAM,KACxBjB,EAAQ+W,EAAM,GAAK,IAAMA,EAAM,GAAK,IAAMA,EAAM,GAEpDrS,EAAKmS,GAAG9N,GAAO/I,EAK3B,IAAIgX,GAAoB,EACpBC,EAAqB,EACzB,IAAK,IAAIlO,KAAOrE,EAAK,GAAI,EACjBhD,EAAM,IACN3B,WAAagJ,EACjBrH,EAAImC,MAAQkF,EAETvE,EAAKwQ,uBAAuBxQ,EAAKlG,MAAM2W,MAAMiC,WAAW7V,QAAQK,EAAImC,QAAU,GAC7EnC,EAAIyV,MAAO,EACXzV,EAAI0V,mBAAoB,IAGrBJ,IACCtV,EAAI2V,mBAAoB,EACxB3V,EAAI4V,yBAA2B,EAC/BN,GAAoB,GAIrBC,EAAqB,IACpBvV,EAAIyV,MAAO,EACXzV,EAAI0V,mBAAoB,GAE5BH,KAEJL,EAAKrT,KAAK7B,IAKlB,IAAIA,EAAM,CACVA,WAAiB,SACjBA,MAAY,SACZA,aAAmB,4BACnBkV,EAAKrT,KAAK7B,GAEV,IAAI,IAAIP,EAAE,EAAGA,EAAGuD,EAAKtD,OAAQD,IAAIuD,EAAKvD,GAAGoW,OAAS,SAElDzY,QAAQC,IAAI6X,GAEZpS,EAAKvF,SAAS,CACV2E,WAAYgT,EACZ7S,QAAUW,IACX,qB,2EAUJ8S,EAAS3X,GACZ,IACIxC,EAAKma,EADKzZ,KAAKiX,uBAAuBjX,KAAKO,MAAM2W,MAAM5X,IAEvDoE,EAAM1D,KAAKyE,WAAW+B,UAAU,uBAAwB,CAACxG,KAAKO,MAAM2W,KAAM5X,IAE1EmH,EAAOzG,KACXA,KAAKyE,WAAWiV,aAAahW,EAAK,GAAI1D,MAAM,SAASiE,GACjD,GAAsB,WAAnBA,EAASC,OAAqB,CAC7B,IAAIyV,EAAYlT,EAAKlG,MAAMyF,QAC3B2T,EAAUxH,OAAOrQ,EAAU,GAC3B2E,EAAKlG,MAAM4W,QAAQyC,WAAWD,QAE9BlT,EAAKlG,MAAM8W,aAAe,8E,kCAK1BvU,GACR9C,KAAKkB,SAAS,CACViW,QAASrU,EAAO6C,IAChByR,UAAWtU,EAAOsC,c,0CAINtC,GAEhBA,EAAO6C,IAAIC,qB,oCAGDjC,GAGV,GAA8B,UAA3BA,EAAI2B,OAAOvD,OAAO+D,MAArB,CACA,IAAI8Q,EAAajT,EAAIgD,KAAK3G,KAAKiX,uBAAuBjX,KAAKO,MAAM2W,MAAM5X,IACvEV,OAAOC,SAASC,KAAO,0BAA4BkB,KAAKO,MAAM2W,KAAO,UAAYlX,KAAKO,MAAMuK,MAAQ,OAAS8L,K,sCAGjG9T,M,kCAOZ,IADA,IAAI+W,EAAa,GACTzW,EAAE,EAAGA,EAAGpD,KAAKO,MAAMsF,WAAWxC,OAAQD,IAEL,UAAlCpD,KAAKO,MAAMsF,WAAWzC,GAAG0C,OAAkB+T,EAAWrU,KAAKxF,KAAKO,MAAMsF,WAAWzC,GAAG0C,OAI3F9F,KAAKO,MAAM4W,QAAQ2C,gBAAgB,CAC/BC,WAAYF,EACZG,cAAc,EACd7U,YAAY,EACZ8U,SALOja,KAKQ8K,MAAQ,gB,+BAK3B,OACI,yBAAK9L,UAAU,kBACX,kBAACuJ,EAAA,EAAD,CAAKvJ,UAAU,aACX,kBAACwJ,EAAA,EAAD,KACI,0BAAMxJ,UAAU,aAAhB,IAA+BgB,KAAK8K,MAApC,WAGJ,kBAACtC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAKka,yBAAyBha,KAAKF,OAAhH,oBAIA,kBAACyI,EAAA,EAAD,CAAQzJ,UAAU,6CAA6CmD,QAAQ,UAAUpC,QAASC,KAAKma,qBAAqBja,KAAKF,OAAzH,UACaA,KAAK8K,SAK1B,kBAACvC,EAAA,EAAD,KAEI,kBAAC6R,EAAA,EAAD,CAAOpP,IAAI,QAAQ7I,QAAQ,SAASnD,UAAYgB,KAAKO,MAAM8Z,iBAAmB,OAAS,UAClFra,KAAKO,MAAM8W,cAGhB,yBAAK/X,GAAG,gCAAgC2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACpE,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,eAAD,CACIrB,WAAY7F,KAAKO,MAAMsF,WACvBG,QAAShG,KAAKO,MAAMyF,QACpBtE,QAAS1B,KAAKO,MAAMmB,QACpB6U,QAASvW,KAAKO,MAAMgW,QACpBsB,QAAS7X,KAAKO,MAAMsX,QACpBP,aAActX,KAAKO,MAAM+W,aACzBE,cAAexX,KAAKO,MAAMiX,cAC1BvR,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,MAC/CoH,cAAepH,KAAKoH,cAAclH,KAAKF,MACvCsa,oBAAqBta,KAAKsa,oBAAoBpa,KAAKF,MACnDua,YAAava,KAAKua,YAAYra,KAAKF,MACnCwa,iBAAkBxa,KAAKya,gBAAgBva,KAAKF,SAKpD,yBAAKuV,MAAM,cACP,kBAAC,IAAD,CAAgBvW,UAAU,cAAcoW,KAAK,QAAQrV,QAASC,KAAK0a,UAAUxa,KAAKF,c,wCAQxF8C,Q,GAhXO3C,IAAMC,YCwUpBua,I,yDApSX,WAAYra,GAAQ,IAAD,8BAEf,cAAMA,IA1CVmE,WAAa,IAAIC,EAwCE,EAvCnBkW,eAAiB,CACb,mBAAuB,yBACvB,iBAAqB,uBACrB,cAAkB,oBAClB,YAAgB,kBAChB,gBAAoB,sBACpB,cAAkB,oBAClB,oBAAwB,0BACxB,kBAAsB,wBACtB,iBAAqB,uBACrB,eAAmB,qBACnB,iBAAqB,uBACrB,eAAmB,qBACnB,gCAAoC,sCACpC,8BAAkC,oCAClC,4BAAgC,kCAChC,0BAA8B,gCAC9B,2BAA+B,iCAC/B,yBAA6B,+BAC7B,eAAmB,qBACnB,aAAiB,mBACjB,yBAA6B,+BAC7B,uBAA2B,6BAC3B,UAAc,gBACd,QAAY,cACZ,yBAA6B,+BAC7B,uBAA2B,6BAC3B,0BAA8B,gCAC9B,wBAA4B,8BAC5B,YAAgB,kBAChB,UAAc,gBACd,gBAAoB,sBACpB,cAAkB,oBAClB,oBAAwB,0BACxB,aAAiB,mBACjB,WAAe,iBACf,KAAS,YAGM,EA+QnBjW,kBAAoB,SAAA7B,GAMhB,IALA,IAAI8B,EAAYC,SAASC,eAAe,iCAAiCC,YACrEC,EAAgB,GAChBC,EAAgB,GAChBC,EAAiB,EACjBC,EAAarC,EAAOsC,UAAUC,gBACzBjC,EAAI,EAAGA,EAAI+B,EAAW9B,OAAQD,IAAK,CAC1C,IAAIkC,EAASH,EAAW/B,IACxB8B,GAAkBI,EAAOC,eACJX,EACnBK,EAAcO,KAAKF,EAAOG,OAE1BT,EAAcQ,KAAKF,EAAOG,OAG9B3C,EAAOsC,UAAUM,kBAAkBV,GAAe,GAClDlC,EAAOsC,UAAUM,kBAAkBT,GAAe,GAClDnC,EAAO6C,IAAIC,oBA5RX,EAAKkF,MAAQ,EAAKxK,MAAMsO,MAAM9L,OAAOgI,MAErC,EAAKvK,MAAQ,CAET2W,KAAO,GACP2D,IAAK,GACL7U,QAAS,GACT8E,MAAO,EAAKA,MACZgQ,aAAc,GACdC,YAAa,GACbC,UAAW,GACXC,SAAU,GAEV5D,aAAc,GACd6D,QAAS,GACTb,kBAAkB,EAElBc,iBAAmB,UArBR,E,gEA2Bfnb,KAAKob,kC,yCAKLpb,KAAKkB,SAAS,CACVia,iBAAmB,kBAKvB,IAAI,IAAI/X,EAAE,EAAGA,EAAGpD,KAAKO,MAAMua,aAAazX,OAAQD,IAC5C,GAAwC,KAArCpD,KAAKO,MAAMua,aAAa1X,GAAGiY,QAAwD,KAAvCrb,KAAKO,MAAMua,aAAa1X,GAAGkY,UAES,GAA5Etb,KAAKO,MAAM0a,SAASjb,KAAKO,MAAMua,aAAa1X,GAAGwT,YAAYrF,OAAOlO,OAAa,CAC9ErD,KAAKkB,SAAS,CACVmW,aAAcrX,KAAKO,MAAMua,aAAa1X,GAAG0H,MAAQ,uBACjDoQ,QAAS,SACTb,kBAAkB,EAClBc,iBAAkB,WAEtB,IAAI1U,EAAOzG,KAMX,YALA6S,YAAW,WACPpM,EAAKvF,SAAS,CACVmZ,kBAAkB,MAEvB,KASf,IAEI3W,EAFAX,EAAK/C,KAAK4a,eAAe5a,KAAKO,MAAM2W,KAAKqE,eAKzC7X,OADiBV,GAAlBhD,KAAKO,MAAMsa,IACJ7a,KAAKyE,WAAW+B,UAAU,mBAAoB,CAACzD,IAE/C/C,KAAKyE,WAAW+B,UAAU,wBAAyB,CAACzD,EAAI/C,KAAKO,MAAMsa,MAE7E9Z,QAAQC,IAAIhB,KAAKO,MAAM0a,UAEnBxU,EAAOzG,KACXA,KAAKyE,WAAW0O,WAAWzP,EAAK9C,KAAKsM,UAAUlN,KAAKO,MAAM0a,UAAWjb,MAAM,SAASiE,GAChF,IACI,GAAuB,WAAnBA,EAASC,OAAqB,CAE9B,IAAIsX,EAAM,sBAAwB/U,EAAKlG,MAAMuK,MACtB,MAApB7G,EAASwX,SAAuC,IAApBxX,EAASwX,UAAcD,EAAMvX,EAASwX,SAErEhV,EAAKvF,SAAS,CACVmW,aAAcmE,EACdN,QAAS,UACTb,kBAAkB,IAGtB5T,EAAKiV,YAEL7I,YAAW,WACPpM,EAAKvF,SAAS,CACVmZ,kBAAkB,MAEvB,UACA,GAAuB,SAAnBpW,EAASC,OAAmB,CACnC,IAAImP,EAAQ,GACRpP,EAASwX,QAAQnY,QAAQ,kCAAoC,IAC7D+P,EAAQ,6BAEZ5M,EAAKvF,SAAS,CACVmW,aAAc,uBAAyB5Q,EAAKlG,MAAMuK,MAAQ,MAAQuI,EAClE6H,QAAS,SACTb,kBAAkB,IAGtBxH,YAAW,WACPpM,EAAKvF,SAAS,CACVmZ,kBAAkB,MAEvB,MAET,MAAMlZ,GACJJ,QAAQsS,MAAMlS,GArClB,QAuCIsF,EAAKlG,MAAM4a,iBAAmB,e,kCAOtC,IADA,IAAIvU,EAAO5G,KAAKO,MAAM0a,SACd7X,EAAE,EAAGA,EAAGpD,KAAKO,MAAMua,aAAazX,OAAQD,IACJ,KAArCpD,KAAKO,MAAMua,aAAa1X,GAAGiY,SAC1BzU,EAAK5G,KAAKO,MAAMua,aAAa1X,GAAGwT,YAAc,IAItD5W,KAAKkB,SAAS,CACV,SAAY0F,M,sDAMhB,IAAIsQ,EAAOlX,KAAKM,MAAMsO,MAAM9L,OAAOoU,KAC/B2D,EAAM7a,KAAKM,MAAMsO,MAAM9L,OAAO+X,IAElC,QAAW7X,GAARkU,EAAH,CACAlX,KAAKkB,SAAS,CACV,KAASgW,EACT,IAAQ2D,IAIZ,IAAInX,EAAM1D,KAAKyE,WAAW+B,UAAU,0BAA2B,CAAC0Q,IAC5DzQ,EAAOzG,KACXA,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAE1ClD,QAAQC,IAAIiD,GAEZ,IAAI0X,EAAQ,GACZA,EAAMnW,KAAKvB,EAAS0C,KAAKiV,OAEzBnV,EAAKvF,SAAS,CAAC4Z,aAAe7W,EAAS0C,KAAKkV,SAC5CpV,EAAKvF,SAAS,CAAC6Z,YAAc9W,EAAS0C,KAAKiV,QAC3CnV,EAAKvF,SAAS,CAAC8Z,UAAYW,IAG3B,IAFA,IAAIhY,EAAM,GAEFP,EAAE,EAAGA,EAAGa,EAAS0C,KAAKkV,OAAOxY,OAAQD,IACzCO,EAAIM,EAAS0C,KAAKkV,OAAOzY,GAAGwT,YAAc,GAS9CnQ,EAAKvF,SAAS,CAAC+Z,SAAWtX,U,0CAIdyE,GAEgB,UAA7BA,EAAMC,OAAOC,QAAQc,OAAiBhB,EAAMC,OAAOpG,MAAQmG,EAAMC,OAAOpG,MAAM6Z,QAAQ,WAAY,KAErG,IAAIC,EAAQ/b,KAAKO,MAAM0a,SACvBc,EAAM3T,EAAMC,OAAOC,QAAQ7H,MAAQ2H,EAAMC,OAAOpG,MAChDjC,KAAKkB,SAAS,CAAC+Z,SAAWc,M,sCAK1B,QAAqB/Y,GAAlBhD,KAAKO,MAAMsa,IACVjc,OAAOC,SAASC,KAAO,sBAAwBkB,KAAKO,MAAM2W,KAAO,UAAYlX,KAAKO,MAAMuK,UAE5F,CACI,IAAIyE,EAAavP,KAAKO,MAAM2W,KAAK4E,QAAQ,OAAQ,IAAM,SACnDE,EAAkBhc,KAAKO,MAAMuK,MAAMgR,QAAQ,QAAS,IAAIvK,OAC5D3S,OAAOC,SAASC,KAAO,0BAA4ByQ,EAAa,UAAY0M,UAAUD,GAAmB,OAAShc,KAAKO,MAAMsa,O,+BAMjI,IAAIpU,EAAOzG,KACX,OACI,yBAAKhB,UAAU,kBACX,kBAACuJ,EAAA,EAAD,CAAKvJ,UAAU,aACX,kBAACwJ,EAAA,EAAD,KACI,0BAAMxJ,UAAU,aAAhB,WAAsCgB,KAAK8K,MAA3C,MAGJ,kBAACtC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAKkc,cAAchc,KAAKF,OAC/FA,KAAK8K,MADX,WAMR,kBAAC6I,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACwG,EAAA,EAAD,CAAOpP,IAAI,QAAQ7I,QAASnC,KAAKO,MAAM2a,QAASlc,UAAYgB,KAAKO,MAAM8Z,iBAAmB,OAAS,UAC9Fra,KAAKO,MAAM8W,cAEhB,kBAACtO,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,KAEZvI,KAAKO,MAAMua,aAAa/G,KAAI,SAASjO,EAAOoJ,GACxC,MAAiB,UAAdpJ,EAAMsD,KAED,kBAACZ,EAAA,EAAD,CAAKqL,GAAI/N,EAAMsP,KAAMtB,GAAIhO,EAAMsP,KAAMpW,UAA4B,KAAhB8G,EAAMuV,OAAgB,OAAS,UAC5E,kBAACtS,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,IAAKvJ,UAAU,eAC3B,kBAAC+J,EAAA,EAAKG,MAAN,CAAYlK,UAA8B,KAAlB8G,EAAMwV,SAAkB,WAAa,eACxDxV,EAAMgF,OAEX,kBAAC/B,EAAA,EAAKI,QAAN,CACI6B,IAAKlF,EAAM8Q,WACXxN,KAAK,OACLnH,MAAOwE,EAAKlG,MAAM0a,SAASnV,EAAM8Q,aAAe,GAChDtN,YAAWxD,EAAM8Q,WACjBuF,YAAWrW,EAAMsD,KACjBgT,UAAWtW,EAAMuW,WACjB9S,SAAU9C,EAAKgI,oBAAoBvO,KAAKuG,OAOpD,kBAAC+B,EAAA,EAAD,CAAKqL,GAAI/N,EAAMsP,KAAMtB,GAAIhO,EAAMsP,KAAMpW,UAA4B,KAAhB8G,EAAMuV,OAAgB,OAAS,UAC5E,kBAACtS,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,IAAKvJ,UAAU,eAC3B,kBAAC+J,EAAA,EAAKG,MAAN,CAAYlK,UAA8B,KAAlB8G,EAAMwV,SAAkB,WAAa,eACxDxV,EAAMgF,OAEX,kBAAC/B,EAAA,EAAKI,QAAN,CACI6B,IAAKlF,EAAM8Q,WACXxN,KAAMtD,EAAMsD,KACZnH,MAAOwE,EAAKlG,MAAM0a,SAASnV,EAAM8Q,aAAe,GAChDtN,YAAWxD,EAAM8Q,WACjBuF,YAAWrW,EAAMsD,KACjBgT,UAAWtW,EAAMuW,WACjB9S,SAAU9C,EAAKgI,oBAAoBvO,KAAKuG,WASpE,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAKsc,iBAAiBpc,KAAKF,OACnGA,KAAKO,MAAM4a,0B,GAhTdhb,IAAMC,Y,UCRfyW,G,kDAEjB,WAAYvW,GAAQ,IAAD,8BACf,cAAMA,IAEDwW,cAAgB,EAAKA,cAAc5W,KAAnB,gBAHN,E,4DAQfa,QAAQC,IAAIhB,KAAKM,MAAMuB,MACvB7B,KAAKM,MAAMoB,QAAQC,gBAAgBoV,OAC/B/W,KAAKM,MAAMuB,KAAK8E,KAAM3G,KAAKM,MAAMuB,KAAKC,Y,+BAKtC,GAAwB,WAArB9B,KAAKM,MAAM2B,MACV,OACI,oCACI,kBAAC,IAAD,CAAUmT,KAAK,MAAMrV,QAASC,KAAK8W,qB,GApBH1W,aCumBzCmc,I,yDA7iBX,WAAYjc,GAAQ,IAAD,8BAEf,cAAMA,IAzCVmE,WAAa,IAAIC,EAuCE,EAtCnBkW,eAAiB,CACb,mBAAuB,2BACvB,iBAAqB,yBACrB,cAAkB,sBAClB,YAAgB,oBAChB,gBAAoB,wBACpB,cAAkB,sBAClB,oBAAwB,4BACxB,kBAAsB,0BACtB,iBAAqB,yBACrB,eAAmB,uBACnB,iBAAqB,yBACrB,eAAmB,uBACnB,gCAAoC,wCACpC,8BAAkC,sCAClC,4BAAgC,oCAChC,0BAA8B,kCAC9B,2BAA+B,mCAC/B,yBAA6B,iCAC7B,eAAmB,uBACnB,aAAiB,qBACjB,yBAA6B,iCAC7B,uBAA2B,+BAC3B,UAAc,kBACd,QAAY,gBACZ,yBAA6B,iCAC7B,uBAA2B,+BAC3B,0BAA8B,kCAC9B,wBAA4B,gCAC5B,YAAgB,oBAChB,UAAc,kBACd,gBAAoB,wBACpB,cAAkB,sBAClB,oBAAwB,4BACxB,aAAiB,qBACjB,WAAe,oBAGA,EAqhBnBjW,kBAAoB,SAAA7B,KAjhBhB,EAAKgI,MAAQ,EAAKxK,MAAMsO,MAAM9L,OAAOgI,MAErC,EAAKvK,MAAQ,CACT2W,KAAO,GACPlR,QAAS,GACT8E,MAAO,EAAKA,MACZxL,GAAI,GACJwb,aAAc,GACd0B,WAAY,GACZxB,UAAW,GACXyB,UAAW,GACXC,WAAY,GACZzB,SAAU,GACV0B,WAAY,GAEZC,aAAc,GAEdC,QAAS,GACTzF,UAAW,GAEXC,aAAc,GACd6D,QAAS,GACTb,kBAAkB,EAElByC,gBAAiB,GAEjBpb,QAAS,CAAEC,gBAAgB,gBAC3BsE,oBAAqB,CACjBsR,yBAA2BV,IAG/BW,cAAe,CACXC,UAAU,EACVC,UAAU,EACVtB,OAAQ,qBACRC,gBAAgB,EAChBsB,WAAW,GAGfpB,QAASqB,KACTC,QAAS,CACLC,WAAY,CACV,CACExY,GAAI,UACJyY,aAAc,UACd7D,SAAU,UACV8D,QAAS,UACTC,UAAW,qBACXC,gBAAiB,CACbC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,qBAAqB,EACrBC,sBAAsB,EACtBC,yBAAyB,EACzBC,yBAAyB,KAIjCC,iBAAkB,KAhEX,E,gEAuEf3Y,KAAKob,kC,+BAML,IADA,IAAIvB,EAAa,GACTzW,EAAE,EAAGA,EAAGpD,KAAKO,MAAMkc,UAAUpZ,OAAQD,IAEL,UAAjCpD,KAAKO,MAAMkc,UAAUrZ,GAAG0C,OAAsB9F,KAAKO,MAAMkc,UAAUrZ,GAAGgW,MACrES,EAAWrU,KAAKxF,KAAKO,MAAMkc,UAAUrZ,GAAG0C,OAIhD9F,KAAKO,MAAM4W,QAAQ2C,gBAAgB,CAC/BC,WAAYF,EAEZ1U,YAAY,EACZ8U,SALOja,KAKQO,MAAMoc,WAAa,gB,uCAWtC,IAAI,IAAIvZ,EAAE,EAAGA,EAAGpD,KAAKO,MAAMua,aAAazX,OAAQD,IAC5C,GAAwC,KAArCpD,KAAKO,MAAMua,aAAa1X,GAAGiY,QAAwD,KAAvCrb,KAAKO,MAAMua,aAAa1X,GAAGkY,UAEoB,GAAvFtb,KAAKO,MAAM0a,SAASjb,KAAKO,MAAMua,aAAa1X,GAAGwT,YAAYmC,WAAWxH,OAAOlO,OAAa,CACzFrD,KAAKkB,SAAS,CACVmW,aAAcrX,KAAKO,MAAMua,aAAa1X,GAAG0H,MAAQ,uBACjDoQ,QAAS,SACTb,kBAAkB,IAEtB,IAAI5T,EAAOzG,KAMX,YALA6S,YAAW,WACPpM,EAAKvF,SAAS,CACVmZ,kBAAkB,MAEvB,KAOf,IAEI3W,EAFAX,EAAK/C,KAAK4a,eAAe5a,KAAKO,MAAM2W,KAAKqE,eAIzC7X,OADiBV,GAAlBhD,KAAKO,MAAMwc,IACJ/c,KAAKyE,WAAW+B,UAAU,iBAAkB,CAACzD,IAE7C/C,KAAKyE,WAAW+B,UAAU,sBAAuB,CAACzD,EAAI/C,KAAKO,MAAMjB,KAE3EyB,QAAQC,IAAIhB,KAAKO,MAAM0a,UAEnBxU,EAAOzG,KACXA,KAAKyE,WAAWuY,UAAUtZ,EAAK9C,KAAKsM,UAAUlN,KAAKO,MAAM0a,UAAWjb,MAAM,SAASiE,GAC/E,GAAsB,WAAnBA,EAASC,OACRuC,EAAKvF,SAAS,CACVmW,aAAc,wBAA0B5Q,EAAKlG,MAAMuK,MACnDoQ,QAAS,UACTb,kBAAkB,IAGtBxH,YAAW,WACPpM,EAAKvF,SAAS,CACVmZ,kBAAkB,MAEvB,UACA,GAAsB,SAAnBpW,EAASC,OAAmB,CAClC,IAAImP,EAAQ,GACTpP,EAASwX,QAAQnY,QAAQ,kCAAoC,IAC5D+P,EAAQ,qCAEZ5M,EAAKvF,SAAS,CACVmW,aAAc,uBAAyB5Q,EAAKlG,MAAMuK,MAAQ,MAAQuI,EAClE6H,QAAS,SACTb,kBAAkB,IAGtBxH,YAAW,WACPpM,EAAKvF,SAAS,CACVmZ,kBAAkB,MAEvB,W,sDAOX,IAAInD,EAAOlX,KAAKM,MAAMsO,MAAM9L,OAAOoU,KAC/B5X,EAAKU,KAAKM,MAAMsO,MAAM9L,OAAOxD,GAK7Byd,EAAM/c,KAAKM,MAAMsO,MAAM9L,OAAOia,IAC9BxN,EAAavP,KAAKM,MAAMsO,MAAM9L,OAAO6T,WAEzC,QAAW3T,GAARkU,QAA2BlU,GAAN1D,EAAxB,CACAU,KAAKkB,SAAS,CACV,KAASgW,EACT,GAAO5X,EACP,IAAQyd,EACR,WAAexN,SAGTvM,GAAP+Z,IAGC/c,KAAK8K,MAAQ9K,KAAKid,uBAAuB/F,GACzClX,KAAKkB,SAAS,CACV,MAAUlB,KAAK8K,SAIvB,IAAIpH,EAAM1D,KAAKyE,WAAW+B,UAAU,0BAA2B,CAAC0Q,IAC5DzQ,EAAOzG,KACXA,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAE1ClD,QAAQC,IAAIiD,GAEZ,IAAIiZ,EAAwB,GACxBV,EAAavY,EAAS0C,KAAK6V,WAGd,MAAdA,IACCU,EAAwBzW,EAAKwW,uBAAuBT,IAGxD/V,EAAKvF,SAAS,CACV4Z,aAAe7W,EAAS0C,KAAKkV,OAC7BW,WAAavY,EAAS0C,KAAK6V,WAC3BE,WAAazY,EAAS0C,KAAK+V,WAC3BC,WAAYO,EACZJ,gBAAiB,2BAA6B7Y,EAAS0C,KAAK+V,WAAa,UAAYQ,EAAwB,QAAUzW,EAAKlG,MAAMjB,KAItI,IAFA,IAAIqE,EAAM,GAEFP,EAAE,EAAGA,EAAGa,EAAS0C,KAAKkV,OAAOxY,OAAQD,IACzCO,EAAIM,EAAS0C,KAAKkV,OAAOzY,GAAGwT,YAAc,GAI9CjT,EAAIM,EAAS0C,KAAK6V,YAAc,GAEhC/V,EAAKvF,SAAS,CAAC+Z,SAAWtX,IAE1B8C,EAAK0W,oB,6CAIUjG,GAEnB,IADA,IAAIpM,EAAQ,GACJ1H,EAAE,EAAGA,EAAG8T,EAAK7T,OAAQD,IACjB,GAALA,EAAO0H,GAASoM,EAAK9T,GAAGga,cACnBpd,KAAKqd,OAAOnG,EAAK9T,IAAI0H,GAAS,IAAMoM,EAAK9T,GAC5C0H,GAASoM,EAAK9T,GAEvB,OAAO0H,I,6BAGJwS,GACH,OAAK/K,MAAW,EAAL+K,GAIJA,GAAMA,EAAGF,eAGTE,GAAMA,EAAG/B,oBAAb,EANO,kB,oCAcV,IAAI9U,EAAOzG,KACP0D,EAAM,GAGNA,OADiBV,GAAlBhD,KAAKO,MAAMwc,IACJ/c,KAAKyE,WAAW+B,UAAU,oBAAqB,CAACxG,KAAKO,MAAM2W,KAAMlX,KAAKO,MAAMjB,KAE5EU,KAAKyE,WAAW+B,UAAU,yBAA0B,CAACxG,KAAKO,MAAM2W,KAAMlX,KAAKO,MAAMjB,GAAIU,KAAKO,MAAMwc,MAE1G/c,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAE1C,IAAI0C,EAAO1C,EAAS0C,KAChBhD,EAAM,GAEV,IAAK,IAAIqH,KAAOvE,EAAKlG,MAAM0a,SAEvBtX,EAAIqH,GAAOrE,EAAKqE,GAGpBvE,EAAKvF,SAAS,CAAC+Z,SAAUtX,SAEJX,GAAlByD,EAAKlG,MAAMwc,KACVtW,EAAK8W,oBAAoB5W,EAAKF,EAAKlG,MAAMic,kB,0CAIjCxB,GAChB,IAAIvU,EAAOzG,KACP0D,EAAM1D,KAAKyE,WAAW+B,UAAU,iBAAkB,CAACxG,KAAKO,MAAMmc,aAElE1c,KAAKyE,WAAWiC,UAAUhD,EAAK1D,MAAM,SAASiE,GAE1C,IACIuZ,EADOvZ,EAAS0C,KACG6W,YACnBC,EAAU,GACVC,EAAU,GACd3c,QAAQC,IAAIga,GACZ,IAAI,IAAI5X,EAAE,EAAGA,EAAGoa,EAAYna,OAAQD,IAE7BA,EAAI,EACyB,KAAzBoa,EAAYpa,GAAGiY,OACdoC,EAAQjY,KAAK,CAAExD,WAAYwb,EAAYpa,GAAG0H,MAAOhF,MAAO0X,EAAYpa,GAAGwT,WAAYwC,MAAM,IAEzFqE,EAAQjY,KAAK,CAAExD,WAAYwb,EAAYpa,GAAG0H,MAAOhF,MAAO0X,EAAYpa,GAAGwT,aAE1E6G,EAAQjY,KACT,CACIxD,WAAYwb,EAAYpa,GAAG0H,MAC3BhF,MAAO0X,EAAYpa,GAAGwT,WACtBwC,MAAM,EACNC,mBAAmB,IAM/B,IAAI1V,EAAM,CACVA,WAAiB,SACjBA,MAAY,SACZA,aAAmB,4BACnB8Z,EAAQjY,KAAK7B,GAEb,IAAQP,EAAE,EAAGA,EAAG4X,EAAU3X,OAAQD,IAAK,CACnC,IAAIua,EAAM3C,EAAU5X,GAGpB,IAAGua,EAAIC,UAAP,CAGA,IAFA,IAAIC,EAAS,GAEL9N,EAAE,EAAGA,EAAGyN,EAAYna,OAAQ0M,IAEhC,GAAqC,MAAlC4N,EAAIH,EAAYzN,GAAG6G,YAClBiH,EAAOL,EAAYzN,GAAG6G,YAAc,OAEnC,CACD,IAAI3U,EAAQ0b,EAAIH,EAAYzN,GAAG6G,YAAYmC,WAG3C,GAAG9W,EAAM2M,MAAM,sDACf,CACI,IAAIoK,EAAQ/W,EAAMiB,MAAM,KACxBjB,EAAQ+W,EAAM,GAAK,IAAMA,EAAM,GAAK,IAAMA,EAAM,GAEpD6E,EAAOL,EAAYzN,GAAG6G,YAAc3U,EAG5C4b,EAAOrE,OAAS,SACZqE,EAAOC,WAAUJ,EAAQlY,KAAKqY,IAKtCpX,EAAKvF,SAAS,CACVub,UAAWgB,EACXzC,UAAW0C,IACZ,oB,0CAIS5a,GAChBA,EAAO6C,IAAIC,qB,0CAGKwC,GAChB,IAAI2T,EAAQ/b,KAAKO,MAAM0a,SACvBc,EAAM3T,EAAMC,OAAOC,QAAQ7H,MAAQ2H,EAAMC,OAAOpG,MAChDjC,KAAKkB,SAAS,CAAC+Z,SAAWc,M,2CAIL/Y,GAAlBhD,KAAKO,MAAMwc,IACVne,OAAOC,SAASC,KAAO,sBAAwBkB,KAAKO,MAAM2W,KAAO,UAAYlX,KAAKO,MAAMuK,MACvFlM,OAAOmf,QAAQC,S,kCAGZlb,GACR9C,KAAKkB,SAAS,CACViW,QAASrU,EAAO6C,IAChByR,UAAWtU,EAAOsC,c,wCAIRtC,GACdA,EAAO6C,IAAIC,qB,6BAGR6T,EAAS3X,GAEZ,IAAIxC,EAAKma,EAAQna,GACjByB,QAAQC,IAAI,CAAChB,KAAKO,MAAM2W,KAAMlX,KAAKO,MAAMjB,GAAIU,KAAKO,MAAMic,WAAYld,IACpE,IAAIoE,EAAM1D,KAAKyE,WAAW+B,UACtB,sBACA,CAACxG,KAAKO,MAAM2W,KAAMlX,KAAKO,MAAMjB,GAAIU,KAAKO,MAAMic,WAAYld,IAGxDmH,EAAOzG,KACXA,KAAKyE,WAAWiV,aAAahW,EAAK,GAAI1D,MAAM,SAASiE,GACjD,GAAsB,WAAnBA,EAASC,OAAqB,CAC7B,IAAIyV,EAAYlT,EAAKlG,MAAMya,UAC3BrB,EAAUxH,OAAOrQ,EAAU,GAC3B2E,EAAKlG,MAAM4W,QAAQyC,WAAWD,QAE9BlT,EAAKlG,MAAM8W,aAAe,8E,oCAKxBvU,GAEV,GAAiC,UAA9BA,EAAOwC,OAAOvD,OAAO+D,MAAxB,CAEW9F,KAAKO,MAAM2W,KACLlX,KAAKO,MAAMoc,WAG5B/d,OAAOC,SAASC,KAAO,0BAA4BkB,KAAKO,MAAMmc,WAAa,OAAS1c,KAAKO,MAAMjB,GAAK,QAAUwD,EAAO6D,KAAKrH,M,+BAK1H,IAAImH,EAAOzG,KACX,OACI,yBAAKhB,UAAU,kBACX,kBAACuJ,EAAA,EAAD,CAAKvJ,UAAU,aACX,kBAACwJ,EAAA,EAAD,KACI,0BAAMxJ,UAAU,aAAhB,SAAoCgB,KAAK8K,MAAzC,MAGJ,kBAACtC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAKkc,cAAchc,KAAKF,OAC/FA,KAAK8K,MADX,WAMR,kBAAC6I,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACwG,EAAA,EAAD,CAAOpP,IAAI,QAAQ7I,QAASnC,KAAKO,MAAM2a,QAASlc,UAAYgB,KAAKO,MAAM8Z,iBAAmB,OAAS,UAC9Fra,KAAKO,MAAM8W,cAEhB,kBAACtO,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,KAEZvI,KAAKO,MAAMua,aAAa/G,KAAI,SAASjO,EAAOoJ,GACxC,MAAiB,UAAdpJ,EAAMsD,KAED,kBAACZ,EAAA,EAAD,CAAKqL,GAAI/N,EAAMsP,KAAMtB,GAAIhO,EAAMsP,KAAMpW,UAA4B,KAAhB8G,EAAMuV,OAAgB,OAAS,UAC5E,kBAACtS,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,IAAKvJ,UAAU,eAC3B,kBAAC+J,EAAA,EAAKG,MAAN,CAAYlK,UAA8B,KAAlB8G,EAAMwV,SAAkB,WAAa,eACxDxV,EAAMgF,OAEX,kBAAC/B,EAAA,EAAKI,QAAN,CACI6B,IAAKlF,EAAM8Q,WACXxN,KAAK,OACLnH,MAAOwE,EAAKlG,MAAM0a,SAASnV,EAAM8Q,aAAe,GAChDtN,YAAWxD,EAAM8Q,WACjBuF,YAAWrW,EAAMsD,KACjBgT,UAAWtW,EAAMuW,WACjB9S,SAAU9C,EAAKgI,oBAAoBvO,KAAKuG,OAOpD,kBAAC+B,EAAA,EAAD,CAAKqL,GAAI/N,EAAMsP,KAAMtB,GAAIhO,EAAMsP,KAAMpW,UAA4B,KAAhB8G,EAAMuV,OAAgB,OAAS,UAC5E,kBAACtS,EAAA,EAAKC,MAAN,CAAYJ,GAAIL,IAAKvJ,UAAU,eAC3B,kBAAC+J,EAAA,EAAKG,MAAN,CAAYlK,UAA8B,KAAlB8G,EAAMwV,SAAkB,WAAa,eACxDxV,EAAMgF,OAEX,kBAAC/B,EAAA,EAAKI,QAAN,CACI6B,IAAKlF,EAAM8Q,WACXxN,KAAMtD,EAAMsD,KACZnH,MAAOwE,EAAKlG,MAAM0a,SAASnV,EAAM8Q,aAAe,GAChDtN,YAAWxD,EAAM8Q,WACjBuF,YAAWrW,EAAMsD,KACjBgT,UAAWtW,EAAMuW,WACjB9S,SAAU9C,EAAKgI,oBAAoBvO,KAAKuG,WASpE,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQzJ,UAAU,gCAAgCmD,QAAQ,UAAUpC,QAASC,KAAKie,eAAe/d,KAAKF,OAAtG,YAMR,6BAEA,kBAACuI,EAAA,EAAD,CAAKvJ,eAA+BgE,GAAlBhD,KAAKO,MAAMwc,IAAoB,OAAS,UACtD,kBAACvU,EAAA,EAAD,CAAKqL,GAAI,IACL,0BAAM7U,UAAU,aAAhB,IAA8BgB,KAAKO,MAAMoc,WAAzC,MAGJ,kBAACnU,EAAA,EAAD,CAAKqL,GAAI,GACL,uBAAG7U,UAAU,iBAAiBF,KAAMkB,KAAKO,MAAMuc,iBAC3C,kBAAC,KAAD,MADJ,gBAEa9c,KAAKO,MAAMoc,cAKhC,kBAACpU,EAAA,EAAD,CAAKvJ,eAA+BgE,GAAlBhD,KAAKO,MAAMwc,IAAoB,OAAS,UACtD,yBAAKzd,GAAG,+BAA+B2H,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnE,yBAAKnI,UAAU,oCAAoCiI,MAAQ,CAACE,OAAQ,QAASD,MAAO,SAChF,kBAAC,eAAD,CACIrB,WAAY7F,KAAKO,MAAMkc,UACvBzW,QAAShG,KAAKO,MAAMya,UACpBtZ,QAAS1B,KAAKO,MAAMmB,QACpB6U,QAASvW,KAAKO,MAAMgW,QACpBsB,QAAS7X,KAAKO,MAAMsX,QACpBL,cAAexX,KAAKO,MAAMiX,cAC1BvR,oBAAqBjG,KAAKO,MAAM0F,oBAChCtB,kBAAmB3E,KAAK2E,kBAAkBzE,KAAKF,MAC/CoH,cAAepH,KAAKoH,cAAclH,KAAKF,MACvCsa,oBAAqBta,KAAKsa,oBAAoBpa,KAAKF,MACnDua,YAAava,KAAKua,YAAYra,KAAKF,SAK3C,yBAAKuV,MAAM,cACP,kBAAC,IAAD,CAAgBvW,UAAU,cAAcoW,KAAK,QAAQrV,QAASC,KAAKke,OAAOhe,KAAKF,YAM/F,6BACA,6BACA,kC,GAzjBaG,IAAMC,YCmBpB+d,G,uKAxBP,OACI,yBAAKnf,UAAU,sCACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOof,OAAK,EAAChd,KAAK,oBAAoBid,UAAWzW,IACjD,kBAAC,IAAD,CAAOwW,OAAK,EAAChd,KAAK,2BAA2Bid,UAAWjU,IACxD,kBAAC,IAAD,CAAOgU,OAAK,EAAChd,KAAK,qBAAqBid,UAAWnI,IAClD,kBAAC,IAAD,CAAOkI,OAAK,EAAChd,KAAK,0CAA0Cid,UAAWrH,KAEvE,kBAAC,IAAD,CAAOoH,OAAK,EAAChd,KAAK,+CAA+Cid,UAAW1D,KAE5E,kBAAC,IAAD,CAAOyD,OAAK,EAAChd,KAAK,yDAAyDid,UAAW1D,KAGtF,kBAAC,IAAD,CAAOyD,OAAK,EAAChd,KAAK,4DAA4Did,UAAW9B,KAGxG,kBAAC,IAAD,CAAO6B,OAAK,EAAChd,KAAK,kDAAkDid,UAAW9B,W,GAnBvDpc,IAAMC,WC+HpBke,I,yDA1HX,WAAYhe,GAAQ,IAAD,8BAEf,cAAMA,IALVmE,WAAa,IAAIC,EAOb,EAAKnE,MAAQ,CACTge,SAAU,GACVC,SAAU,GACVnE,kBAAkB,EAClBoE,aAAc,IARH,E,wGAiBJrW,GACXpI,KAAKkB,SAAS,CAAC,SAAakH,EAAMC,OAAOpG,U,qCAG9BmG,GACXpI,KAAKkB,SAAS,CAAC,SAAakH,EAAMC,OAAOpG,U,8BAIzC,IAAImC,EAAU,CACVma,SAAWve,KAAKO,MAAMge,SACtBC,SAAUxe,KAAKO,MAAMie,UAGrB9a,EAAM1D,KAAKyE,WAAW+B,UAAU,SAChCC,EAAOzG,KACXA,KAAKyE,WAAW0O,WAAWzP,EAAK9C,KAAKsM,UAAU9I,GAAUpE,MAAM,SAASiE,GACpE,IAE0B,WAAnBA,EAASC,QACRxF,eAAeC,QAAQ,WAAY,GACnCD,eAAeC,QAAQ,OAAQiC,KAAKsM,UAAUjJ,EAAS0C,OACvD/H,OAAOC,SAASC,KAAO,qBAEvB2H,EAAKvF,SAAS,CACVud,aAAcxa,EAASwX,QACvBpB,kBAAkB,IAK5B,MAAMlZ,GACJJ,QAAQsS,MAAMlS,GACdsF,EAAKvF,SAAS,CACVud,aAAc,0BACdpE,kBAAkB,U,+BAU9B,OACI,kBAAC1G,EAAA,EAAD,CAAW3U,UAAU,kBAAkB4U,OAAK,GACxC,yBAAK2B,MAAM,mBACP,kBAAC6E,EAAA,EAAD,CAAOpP,IAAI,QAAQ7I,QAAQ,SAASnD,UAAYgB,KAAKO,MAAM8Z,iBAAmB,OAAS,UAClFra,KAAKO,MAAMke,eAGpB,yBAAKzf,UAAU,YACf,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,oBAGf,yBAAKA,UAAU,0BACX,uDACA,iEAEA,6BAFA,2BAQR,yBAAKA,UAAU,cAEX,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,6BAGf,6BACA,yBAAKM,GAAG,gBACJ,yBAAKN,UAAU,mBACX,8CAEJ,2BAAOM,GAAG,WAAWN,UAAU,YAAYoK,KAAK,OAAOC,YAAY,iBAAiBpH,MAAOjC,KAAKO,MAAMge,SAAUhV,SAAUvJ,KAAK0e,eAAexe,KAAKF,QACnJ,6BALJ,IAKW,6BACP,yBAAKhB,UAAU,mBACX,8CAEJ,2BAAOM,GAAG,WAAWN,UAAU,YAAYoK,KAAK,WAAWC,YAAY,iBAAiBpH,MAAOjC,KAAKO,MAAMie,SAAUjV,SAAUvJ,KAAK2e,eAAeze,KAAKF,QACvJ,6BAVJ,IAUW,6BAEP,yBAAKhB,UAAU,sBAAf,YAEI,2BAAOM,GAAG,aAAa8J,KAAK,aAFhC,QAGI,gDAHJ,YAKI,uBAAGtK,KAAK,KAAR,sBAEJ,6BAnBJ,IAmBW,6BACP,4BAAQE,UAAU,aAAae,QAASC,KAAK4e,MAAM1e,KAAKF,OAAxD,mB,GArHRG,IAAMC,YCoCXye,I,yDAlCX,WAAYve,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTue,SAAW,SAJA,E,gEAWf,IAAIC,EAAargB,eAAeoC,QAAQ,iBACvBkC,GAAd+b,GAAyC,GAAdA,EAAgB/e,KAAKkB,SAAS,CAAC,UAAa,IACrElB,KAAKkB,SAAS,CAAC,UAAa,M,+BAIjC,OACI,oCACI,yBAAKlC,UAAagB,KAAKO,MAAMue,SAAoB,SAAT,QACpC,kBAAC,GAAD,OAEJ,yBAAK9f,UAAYgB,KAAKO,MAAMue,SAAW,OAAS,UAC5C,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOV,OAAK,EAAChd,KAAK,0DAA0Did,UAAWF,Y,GA5B9Ehe,IAAMC,YCExB4e,OANf,WACE,OACE,kBAAC,GAAD,OCCgBC,QACW,cAA7BrgB,OAAOC,SAASqgB,UAEe,UAA7BtgB,OAAOC,SAASqgB,UAEhBtgB,OAAOC,SAASqgB,SAAStQ,MACvB,2DCXNuQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,QAGJxa,SAASC,eAAe,SDsHpB,kBAAmBwa,WACrBA,UAAUC,cAAcC,MACrB1b,MAAK,SAAA2b,GACJA,EAAaC,gBAEdC,OAAM,SAAAtM,GACLtS,QAAQsS,MAAMA,EAAMoI,c","file":"static/js/main.d4adcf49.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport { MdPerson } from 'react-icons/md';\r\nimport { MdNotifications } from 'react-icons/md';\r\nimport { MdExitToApp } from 'react-icons/md';\r\n\r\nimport \"./KMRHeader.css\";\r\n\r\n\r\nclass KMRHeader extends React.Component {\r\n\r\n    logout() {\r\n        sessionStorage.setItem(\"loggedin\", 0);\r\n        window.location.href = \"/login\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar className=\"customblue\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\">KMR Systems</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n\r\n                    <div className=\"header-right-section\">\r\n                        <Navbar className=\"right-nav\">\r\n\r\n                            <NavDropdown title={\r\n                                <React.Fragment>\r\n                                    <MdNotifications />\r\n                                </React.Fragment>\r\n                            } className=\"nav-dropdown\">\r\n                                <NavDropdown.Item eventKey=\"4.1\"> Claim# 51322 is assigned <br /> to you for approval </NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item eventKey=\"4.1\"> More than expected number <br /> of claims getting in queue </NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item eventKey=\"4.2\"> Claim# 31253 is <br /> required address details. </NavDropdown.Item>\r\n                            </NavDropdown>\r\n\r\n                            <NavDropdown title={\r\n                                <React.Fragment>\r\n                                    <MdPerson />\r\n                                </React.Fragment>\r\n                            } className=\"nav-dropdown\">\r\n                                <NavDropdown.Item eventKey=\"4.1\"> My Profile  </NavDropdown.Item>\r\n                                <NavDropdown.Item eventKey=\"4.2\"> Settings </NavDropdown.Item>\r\n                                <NavDropdown.Item eventKey=\"4.3\"> Choose Theme </NavDropdown.Item>\r\n                            </NavDropdown>\r\n\r\n                            <Nav.Link onClick={this.logout.bind(this)} className=\"logout-icon\">\r\n                                <MdExitToApp />\r\n                            </Nav.Link>\r\n                        </Navbar>\r\n                    </div>\r\n\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KMRHeader;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'; \r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport \"./KMRMenu.css\";\r\n\r\n\r\nclass KMRMenu extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            goToMasterDataEntry: false,\r\n            name: ''\r\n        }\r\n\r\n        this.navigateTo = this.navigateTo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        var userObj = JSON.parse(sessionStorage.getItem(\"user\"))\r\n        if(userObj == null){return;}\r\n        console.log(userObj.fname);\r\n        this.setState({\r\n            name: userObj.fname\r\n        })\r\n    }\r\n\r\n    navigateTo(e) {\r\n        var path = \"\";\r\n        switch(e) {\r\n            case \"1.1\":\r\n                path = \"/portal/create\";\r\n                break;\r\n            case \"1.2\":\r\n                path = \"/portal/dashboard\";\r\n                break;\r\n            case \"2.1\":\r\n                path = \"/portal/masterdataentry/User/label/User\";\r\n                break;\r\n            case \"2.1\":\r\n                path = \"/portal/masteritem/User/label/User\";\r\n                break;\r\n            case \"3.1\":\r\n                path = \"/portal/masterdata\";\r\n                break;\r\n        }\r\n        window.location.href = path;\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.goToMasterDataEntry) {\r\n            return <Redirect to='/portal/masterdata' />\r\n        }\r\n\r\n        return (\r\n            <div className=\"topFixed mateffect\">\r\n                <div className=\"menuRow\">\r\n                    <Nav className=\"\" activeKey=\"/home\">\r\n\r\n                        <NavDropdown title=\"Claims\" id=\"nav-dropdown\" className=\"nav-dropdown\" onSelect={this.navigateTo}>\r\n                            <NavDropdown.Item eventKey=\"1.1\"> Create New </NavDropdown.Item>\r\n                            <NavDropdown.Item eventKey=\"1.2\"> Claim List </NavDropdown.Item>\r\n                            {/*<NavDropdown.Divider />*/}\r\n                        </NavDropdown>\r\n\r\n                        <NavDropdown title=\"User Maintainance\" id=\"nav-dropdown\" className=\"nav-dropdown\" onSelect={this.navigateTo}>\r\n                            <NavDropdown.Item eventKey=\"2.1\"> Create User </NavDropdown.Item>\r\n                            <NavDropdown.Item eventKey=\"2.2\"> User List </NavDropdown.Item>\r\n                            <NavDropdown.Item eventKey=\"2.3\"> Roles & Permissions </NavDropdown.Item>\r\n                        </NavDropdown>\r\n\r\n                        <NavDropdown title=\"Settings\" id=\"nav-dropdown\" className=\"nav-dropdown\" onSelect={this.navigateTo}>\r\n                            <NavDropdown.Item eventKey=\"3.1\"> Master Data </NavDropdown.Item>\r\n                        </NavDropdown>\r\n\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"link-2\">Help</Nav.Link>\r\n                        </Nav.Item>\r\n\r\n                        <div className=\"welcome-user-container\">\r\n                            Welcome {this.state.name}\r\n                        </div>\r\n                    </Nav>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default KMRMenu;","import React, { Component } from 'react';\r\n\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { MdCheck } from 'react-icons/md';\r\nimport { MdClose } from 'react-icons/md';\r\n\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport default class AgGridStatusBadgeRenderer extends Component {\r\n\r\n  reasons = [\r\n    \"Specific disease is not covered under the scheme\",\r\n    \"Plan is expired\",\r\n    \"Hospital in not under approved list coverage\",\r\n    \"Claim amount exceeds the limit\",\r\n    \"Family member is not covered under the scheme\"\r\n  ];\r\n  invokeParentMethod() {\r\n    this.props.context.componentParent.methodFromParent(\r\n      `Row: ${this.props.node.rowIndex}, Col: ${this.props.colDef.headerName}`\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if(this.props.value === \"Initial\")return <Badge variant='primary'> Initial </Badge>;\r\n    else if(this.props.value === \"Pending Info\")return <Badge variant='warning'> Pending Information </Badge>;\r\n    else if(this.props.value === \"Pending Approval\")return <Badge variant='info'> Pending Approval </Badge>;\r\n    else if(this.props.value === \"Processing\")return <Badge variant='success'> Processing </Badge>;\r\n    else if(this.props.value === \"Error\")return <Badge variant='danger'> Error </Badge>;\r\n    else if(this.props.value === \"Accepted\")return <Badge variant='success'> <MdCheck /> </Badge>;\r\n    else if(this.props.value === \"Rejected\")return (\r\n      <>\r\n        <Badge variant='danger' data-tip={this.reasons[Math.floor(Math.random() * 5)]} data-place='right'> <MdClose /> </Badge>\r\n        <ReactTooltip />\r\n      </>\r\n    );\r\n  }\r\n}","import { axios } from 'axios'\r\n\r\nclass APIService {\r\n\r\n    host = \"http://localhost\";\r\n    //host = \"http://69.2.39.181\";\r\n    port = \"8082\";\r\n\r\n    urlMap = {\r\n\r\n        \"login\" : \"mdlsr/auth/user\",\r\n\r\n        \"memberSuggestUrl\" : \"cdlsr/suggestmember/{param1}\",\r\n        \"providerSuggestUrl\" : \"cdlsr/suggestprovider/{param1}\",\r\n        \"fetchDepedentByMember\" : \"cdlsr/dependentlist/member/{param1}\",\r\n        \"claimAutoSave\" : \"cdlsr/autosave\",\r\n        \"getClaimById\" : \"cdlsr/claim/{param1}\",\r\n        \"getClaimByMember\" : \"cdlsr/claim/member/{param1}\",\r\n        \"getClaimsByStatus\" : \"cdlsr/claims/status/{param1}\",\r\n        \"getMasterItemDropdownList\" : \"cdlsr/getMasterItemDropdownList/{param1}\",\r\n\r\n        /* Master item data entry */\r\n        \"getMasterItems\" : \"mdlsr/masteritems\",\r\n        \"getmasterItemFormFields\" : \"mdlsr/masteritemfields/{param1}\",\r\n        \"getTableFields\" : \"mdlsr/masteritemtablefields/{param1}\",\r\n        \"getmasterSpecificMasterItemList\" : \"mdlsr/masteritemlist/{param1}\",\r\n        \"createMasterItem\" : \"mdlsr/{param1}\",\r\n        \"createMasterChildItem\" : \"mdlsr/{param1}/masterid/{param2}\",\r\n        \"editMasterItem\" : \"mdlsr/{param1}\",\r\n        \"editMasterChildItem\" : \"mdlsr/{param1}/masterid/{param2}\",\r\n        \"getMasterItemById\" : \"mdlsr/get/{param1}/{param2}\",\r\n        \"getMasterChildItemById\" : \"mdlsr/getchilditem/{param1}/masterid/{param2}/childid/{param3}\",\r\n        \"deleteMasterItemById\" : \"mdlsr/delete/{param1}/{param2}\",\r\n        \"deleteChildItemById\" : \"mdlsr/deletechilditem/{param1}/{param2}/{param3}/{param4}\"\r\n    }\r\n\r\n    getApiUrl(purpose, params = []) {\r\n\r\n        try{\r\n            var ep = this.urlMap[purpose];\r\n            if(ep == undefined) return null;\r\n\r\n            var urlParts = ep.split(\"/\");\r\n            var paramPointer = 0;\r\n            \r\n            for(var i=0; i< urlParts.length; i++) {\r\n                if(urlParts[i].indexOf(\"{param\") > -1) {\r\n                    urlParts[i] = params[paramPointer++];\r\n                }\r\n            }\r\n            //console.log(params);\r\n            //console.log(urlParts);\r\n            var constructedUrl = this.host + \":\" + this.port + \"/\" + urlParts.join(\"/\");\r\n            //var constructedUrl = \"/\" + urlParts.join(\"/\");\r\n            return constructedUrl;\r\n\r\n        } catch(e) {\r\n            console.err(e);\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    invokeGet(url, obj, callback) {\r\n\r\n        fetch(url).then(res => res.json()).then((response) => {\r\n            if(response.status == \"success\")\r\n                callback(response, obj);\r\n            else alert(\"Error!!\");\r\n        })\r\n    }\r\n\r\n    invokePost(url, payload, obj, callback) {\r\n\r\n        /*axios.post(url, payload)\r\n        .then(response => {\r\n            callback(response, obj);\r\n        })*/\r\n        fetch(\r\n            url, \r\n            {\r\n                method: \"POST\",\r\n                body: payload,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        ).then(res => res.json()).then((response) => {\r\n            callback(response, obj);\r\n        })\r\n    }\r\n\r\n    invokePut(url, payload, obj, callback) {\r\n\r\n        fetch(\r\n            url, \r\n            {\r\n                method: \"PUT\",\r\n                body: payload,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        ).then(res => res.json()).then((response) => {\r\n            callback(response, obj);\r\n        })\r\n    }\r\n\r\n    invokeDelete(url, payload, obj, callback) {\r\n\r\n        fetch(\r\n            url, \r\n            {\r\n                method: \"DELETE\",\r\n                body: payload,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        ).then(res => res.json()).then((response) => {\r\n            callback(response, obj);\r\n        })\r\n    }\r\n}\r\n\r\nexport default APIService;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\nimport ApiService from './../service/APIService';\r\n\r\nimport \"../styles/KMRInitialTabContent.css\";\r\n\r\n\r\nclass KMRInitialTabContent extends React.Component {\r\n\r\n    apiService = new ApiService();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.status = \"initial\";\r\n\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                \r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            },\r\n\r\n            claimId: props.claimId,\r\n            memberSSN: props.memberSSN,\r\n            submissionDate: props.submissionDate\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchClaims(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            claimId: nextProps.claimId,\r\n            memberSSN: nextProps.memberSSN,\r\n            submissionDate: nextProps.submissionDate\r\n        })\r\n        console.log(this.state.claimId)\r\n    }\r\n\r\n    fetchClaims() {\r\n        var url = this.apiService.getApiUrl(\"getClaimsByStatus\", [\"initial\"]);\r\n        var root = this;\r\n        this.apiService.invokeGet(url, this, function(response){\r\n            var data = response.data;\r\n            var temp = [];\r\n            for(var i=0; i< data.length; i++) {\r\n                var obj = {};\r\n                obj.id = data[i].id;\r\n                obj.name = data[i].memberName;\r\n                obj.ssn = data[i].memberSSN;\r\n                obj.date = \"09/28/2020\";\r\n                obj.status = \"Initial\";\r\n\r\n                temp.push(obj);\r\n            }\r\n\r\n            root.setState({'rowData': temp});\r\n        })\r\n    }\r\n\r\n    onCellClicked(obj) {\r\n        var cellVal = obj.data.id;\r\n        window.location.href = \"/portal/create/\" + cellVal;\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                        onCellClicked={this.onCellClicked.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRInitialTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer';\r\n\r\nclass KMRPendingInfoTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1234\", name: \"Kevin Peterson\", ssn: 42342421, date: \"01/12/2019\", status: \"Pending Info\" },\r\n                { id: \"3452\", name: \"Jack Ryan\", ssn: 65344634, date: \"05/03/2020\", status: \"Pending Info\" },\r\n                { id: \"1221\", name: \"Rob Stark\", ssn: 546343123, date: \"06/07/2019\", status: \"Pending Info\" },\r\n                { id: \"3221\", name: \"Ned Stark\", ssn: 86786545, date: \"12/12/2020\", status: \"Pending Info\" },\r\n                { id: \"5676\", name: \"Denis Lilly\", ssn: 78643456, date: \"12/09/2019\", status: \"Pending Info\" },\r\n                { id: \"8675\", name: \"Michael Vaughn\", ssn: 86754346, date: \"03/12/2019\", status: \"Pending Info\" },\r\n                { id: \"9785\", name: \"John Snow\", ssn: 32424523, date: \"30/12/2019\", status: \"Pending Info\" },\r\n                { id: \"5345\", name: \"Tom Clancy\", ssn: 3453456, date: \"31/08/2019\", status: \"Pending Info\" },\r\n                { id: \"5945\", name: \"Michel Stark\", ssn: 86786789, date: \"12/08/2019\", status: \"Pending Info\" },\r\n                { id: \"5676\", name: \"Steve Smith\", ssn: 5675445, date: \"12/09/2019\", status: \"Pending Info\" },\r\n                { id: \"9786\", name: \"John McNally\", ssn: 67896789, date: \"12/10/2019\", status: \"Pending Info\" },\r\n                { id: \"5988\", name: \"Karl Hooper\", ssn: 234345, date: \"12/12/2019\", status: \"Pending Info\" },\r\n                { id: \"5343\", name: \"Tyrion Lanister\", ssn: 89076789, date: \"12/12/2019\", status: \"Pending Info\" },\r\n                { id: \"9767\", name: \"Brian Smith\", ssn: 58567857, date: \"12/12/2019\", status: \"Pending Info\" },\r\n                { id: \"2218\", name: \"Cerci Lanister\", ssn: 423467, date: \"12/12/2019\", status: \"Pending Info\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-pending-info\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                        \r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-pending-info').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRPendingInfoTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\nimport \"../styles/KMRInitialTabContent.css\";\r\n\r\n\r\nclass KMRPendingApprovalTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1001\", name: \"John Snow\", ssn: 123456789, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1002\", name: \"Cerci Lanister\", ssn: 987654321, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1003\", name: \"Rob Stark\", ssn: 876543210, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1004\", name: \"Ned Stark\", ssn: 7867642, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1005\", name: \"Tyrion Lanister\", ssn: 312435, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1006\", name: \"Tom Clancy\", ssn: 5463512, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1007\", name: \"Kevin Peterson\", ssn: 67546134, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1008\", name: \"Michael Vaughn\", ssn: 3456341, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1009\", name: \"Michel Stark\", ssn: 6457458, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"10010\", name: \"Steve Smith\", ssn: 13243, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1011\", name: \"John McNally\", ssn: 8562534, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1012\", name: \"Karl Hooper\", ssn: 4523534, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1013\", name: \"Denis Lilly\", ssn: 345342354, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1014\", name: \"Brian Smith\", ssn: 234523, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"1015\", name: \"Jack Ryan\", ssn: 534254, date: \"12/12/2019\", status: \"Pending Approval\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-pending-approval\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-pending-approval').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRPendingApprovalTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\n\r\nclass KMRProcessingTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1001\", name: \"John Snow\", ssn: 123456789, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1002\", name: \"Cerci Lanister\", ssn: 987654321, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1003\", name: \"Rob Stark\", ssn: 876543210, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1004\", name: \"Ned Stark\", ssn: 7867642, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1005\", name: \"Tyrion Lanister\", ssn: 312435, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1006\", name: \"Tom Clancy\", ssn: 5463512, date: \"12/12/2019\", status: \"Processing\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-processing\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-processing').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRProcessingTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\nclass KMRErrorTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1001\", name: \"Lui Philips\", ssn: 43213423, date: \"06/12/2020\", status: \"Error\" },\r\n                { id: \"1002\", name: \"Mark Williams\", ssn: 756356564, date: \"08/19/2020\", status: \"Error\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-error\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-error').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRErrorTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\n\r\nclass KMRAcceptedTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1001\", name: \"John Snow\", ssn: 123456789, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1002\", name: \"Cerci Lanister\", ssn: 987654321, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1003\", name: \"Rob Stark\", ssn: 876543210, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1004\", name: \"Ned Stark\", ssn: 7867642, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1005\", name: \"Tyrion Lanister\", ssn: 312435, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1006\", name: \"Tom Clancy\", ssn: 5463512, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1007\", name: \"Kevin Peterson\", ssn: 67546134, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1008\", name: \"Michael Vaughn\", ssn: 3456341, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1009\", name: \"Michel Stark\", ssn: 6457458, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"10010\", name: \"Steve Smith\", ssn: 13243, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1011\", name: \"John McNally\", ssn: 8562534, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1012\", name: \"Karl Hooper\", ssn: 4523534, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1013\", name: \"Denis Lilly\", ssn: 345342354, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1014\", name: \"Brian Smith\", ssn: 234523, date: \"12/12/2019\", status: \"Accepted\" },\r\n                { id: \"1015\", name: \"Jack Ryan\", ssn: 534254, date: \"12/12/2019\", status: \"Accepted\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-accepted\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-accepted').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRAcceptedTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\nclass KMRRejectedTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1001\", name: \"John Snow\", ssn: 123456789, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1002\", name: \"Cerci Lanister\", ssn: 987654321, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1003\", name: \"Rob Stark\", ssn: 876543210, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1004\", name: \"Ned Stark\", ssn: 7867642, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1005\", name: \"Tyrion Lanister\", ssn: 312435, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1006\", name: \"Tom Clancy\", ssn: 5463512, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1007\", name: \"Kevin Peterson\", ssn: 67546134, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1008\", name: \"Michael Vaughn\", ssn: 3456341, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1009\", name: \"Michel Stark\", ssn: 6457458, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"10010\", name: \"Steve Smith\", ssn: 13243, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1011\", name: \"John McNally\", ssn: 8562534, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1012\", name: \"Karl Hooper\", ssn: 4523534, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1013\", name: \"Denis Lilly\", ssn: 345342354, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1014\", name: \"Brian Smith\", ssn: 234523, date: \"12/12/2019\", status: \"Rejected\" },\r\n                { id: \"1015\", name: \"Jack Ryan\", ssn: 534254, date: \"12/12/2019\", status: \"Rejected\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-rejected\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-rejected').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRRejectedTabContent;","import React from 'react';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport AgGridStatusBadgeRenderer from './AgGridStatusBadgeRenderer.jsx';\r\n\r\nclass KMRArchieveTabContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n                { headerName: \"Claim Id\", field: \"id\" },\r\n                { headerName: \"Member Name\", field: \"name\" },\r\n                { headerName: \"Member SSN\", field: \"ssn\" },\r\n                { headerName: \"Last Update\", field: \"date\" },\r\n                { headerName: \"Status\", field: \"status\", cellRenderer: 'gridStatusBadgeRenderer' }\r\n            ],\r\n            rowData: [\r\n                { id: \"1001\", name: \"John Snow\", ssn: 123456789, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1002\", name: \"Cerci Lanister\", ssn: 987654321, date: \"12/12/2019\", status: \"Pending Info\" },\r\n                { id: \"1003\", name: \"Rob Stark\", ssn: 876543210, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1004\", name: \"Ned Stark\", ssn: 7867642, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1005\", name: \"Tyrion Lanister\", ssn: 312435, date: \"12/12/2019\", status: \"Error\" },\r\n                { id: \"1006\", name: \"Tom Clancy\", ssn: 5463512, date: \"12/12/2019\", status: \"Error\" },\r\n                { id: \"1007\", name: \"Kevin Peterson\", ssn: 67546134, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1008\", name: \"Michael Vaughn\", ssn: 3456341, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1009\", name: \"Michel Stark\", ssn: 6457458, date: \"12/12/2019\", status: \"Pending Approval\" },\r\n                { id: \"10010\", name: \"Steve Smith\", ssn: 13243, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1011\", name: \"John McNally\", ssn: 8562534, date: \"12/12/2019\", status: \"Processing\" },\r\n                { id: \"1012\", name: \"Karl Hooper\", ssn: 4523534, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1013\", name: \"Denis Lilly\", ssn: 345342354, date: \"12/12/2019\", status: \"Pending Info\" },\r\n                { id: \"1014\", name: \"Brian Smith\", ssn: 234523, date: \"12/12/2019\", status: \"Initial\" },\r\n                { id: \"1015\", name: \"Jack Ryan\", ssn: 534254, date: \"12/12/2019\", status: \"Initial\" }\r\n            ],\r\n            frameworkComponents: {\r\n                gridStatusBadgeRenderer: AgGridStatusBadgeRenderer,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-wrapper-archieve\" style={{ width: '100%', height: '100%' }}>\r\n                <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                    <AgGridReact\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        frameworkComponents={this.state.frameworkComponents}\r\n                        onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-archieve').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default KMRArchieveTabContent;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'; \r\n\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport KMRInitialTabContent from './KMRInitialTabConent';\r\nimport KMRPendingInfoTabContent from './KMRPendingInfoTabContent';\r\nimport KMRPendingApprovalTabContent from './KMRPendingApprovalTabContent';\r\nimport KMRProcessingTabContent from './KMRProcessingTabContent';\r\nimport KMRErrorTabContent from './KMRErrorTabContent';\r\nimport KMRAcceptedTabContent from './KMRAcceptedTabContent';\r\nimport KMRRejectedTabContent from './KMRRejectedTabContent';\r\nimport KMRArchieveTabContent from './KMRArchieveTabContent';\r\n\r\nimport \"../styles/KMRClaims.css\";\r\n\r\n\r\nclass KMRClaims extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.formModalRef = React.createRef();\r\n\r\n        this.state = {\r\n            toCreate: false,\r\n\r\n            //filters\r\n            claimId: '',\r\n            memberSSN: '',\r\n            submissionDate: '',\r\n\r\n            //child attr\r\n            attrClaimId: '',\r\n            attrMemberSSN: '',\r\n            attrSubmissionDate: ''\r\n        }\r\n        this.goToCreateClaim = this.goToCreateClaim.bind(this);\r\n    }\r\n\r\n    updateFilterField(event) {\r\n        var name = event.target.dataset.name;\r\n        var obj = {};\r\n        obj[name] = event.target.value;\r\n\r\n        this.setState(obj);\r\n    }\r\n\r\n    filterClaims() {\r\n        this.setState({\r\n            attrClaimId: this.state.claimId,\r\n            attrMemberSSN: this.state.memberSSN,\r\n            attrSubmissionDate: this.state.submissionDate\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (this.state.toCreate) {\r\n            return <Redirect to='/portal/create' />\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className=\"claims-container\">\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <h3> Claim System Dashboard </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button className=\"create-claim-btn mateffect\" variant=\"primary\" onClick={this.goToCreateClaim}> \r\n                                Create Claim \r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"filter-container\">\r\n                        <Col>\r\n                            <Accordion>\r\n                                <Card>\r\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                        Filters\r\n                                    </Accordion.Toggle>\r\n\r\n                                    <Accordion.Collapse eventKey=\"0\">\r\n                                        <Card.Body>\r\n                                            <Form>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridClaimid\">\r\n                                                        <Form.Label>Claim Id</Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"number\"\r\n                                                            placeholder=\"Enter Claim Id\"\r\n                                                            data-name=\"claimId\"\r\n                                                            value={this.state.claimId}\r\n                                                            onChange={this.updateFilterField.bind(this)}\r\n                                                        />\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridMembername\">\r\n                                                        <Form.Label>Member Name</Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            data-name=\"memberSSN\"\r\n                                                            placeholder=\"Member Name\"\r\n                                                            value={this.state.memberSSN}\r\n                                                            onChange={this.updateFilterField.bind(this)}\r\n                                                        />\r\n                                                    </Form.Group>\r\n\r\n                                                    {/*<Form.Group as={Col} controlId=\"formGridStatus\">\r\n                                                        <Form.Label>Status</Form.Label>\r\n                                                        <Form.Control as=\"select\" placeholder=\"Enter Calim Id\">\r\n                                                            <option> Initial </option>\r\n                                                            <option> Pending Information </option>\r\n                                                            <option> Pending Approval </option>\r\n                                                            <option> Processing </option>\r\n                                                            <option> Error </option>\r\n                                                            <option> Approved </option>\r\n                                                            <option> Reject </option>\r\n                                                        </Form.Control>\r\n                                                    </Form.Group> */}\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridSubmissiondate\">\r\n                                                        <Form.Label>Submission Date</Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"date\"\r\n                                                            data-name=\"submissionDate\"\r\n                                                            placeholder=\"Submission Date\"\r\n                                                            value={this.state.submissionDate}\r\n                                                            onChange={this.updateFilterField.bind(this)}\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Button variant=\"primary\" onClick={this.filterClaims.bind(this)}>\r\n                                                        Submit\r\n                                                    </Button>\r\n                                                </Form.Row>\r\n                                            </Form>\r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n                            </Accordion>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"tabs-container\">\r\n                        <Col>\r\n                            <Tabs defaultActiveKey=\"initial\" id=\"uncontrolled-tab-example\">\r\n                                <Tab eventKey=\"initial\" \r\n                                    title={\r\n                                            <React.Fragment>\r\n                                                Initial\r\n                                                &nbsp; <Badge variant='primary'>20</Badge>\r\n                                            </React.Fragment>\r\n                                }>\r\n                                    <KMRInitialTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    >\r\n                                    </KMRInitialTabContent>\r\n                                </Tab>\r\n\r\n                                <Tab eventKey=\"pendinginfo\" \r\n                                    title={\r\n                                            <React.Fragment>\r\n                                                Pending Information\r\n                                                &nbsp; <Badge variant='warning'>12</Badge>\r\n                                            </React.Fragment>\r\n                                }>\r\n                                    <KMRPendingInfoTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRPendingInfoTabContent>\r\n                                </Tab>\r\n                                <Tab eventKey=\"pendingapproval\" \r\n                                    title={\r\n                                            <React.Fragment>\r\n                                                Pending Approval\r\n                                                &nbsp; <Badge variant='info'>37</Badge>\r\n                                            </React.Fragment>\r\n                                }>\r\n                                    <KMRPendingApprovalTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRPendingApprovalTabContent>\r\n                                </Tab>\r\n                                <Tab eventKey=\"processing\" \r\n                                    title={\r\n                                            <React.Fragment>\r\n                                                Processing\r\n                                                &nbsp; <Badge variant='success'>6</Badge>\r\n                                            </React.Fragment>\r\n                                }>\r\n                                    <KMRProcessingTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRProcessingTabContent>\r\n                                </Tab>\r\n                                <Tab eventKey=\"error\" \r\n                                    title={\r\n                                            <React.Fragment>\r\n                                                Error\r\n                                                &nbsp; <Badge variant='danger'>2</Badge>\r\n                                            </React.Fragment>\r\n                                }>\r\n                                    <KMRErrorTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRErrorTabContent>\r\n                                </Tab>\r\n\r\n                                <Tab eventKey=\"approved\" title=\"Approved\">\r\n                                    <KMRAcceptedTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRAcceptedTabContent>\r\n                                </Tab>\r\n                                <Tab eventKey=\"rejected\" title=\"Rejected\">\r\n                                    <KMRRejectedTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRRejectedTabContent>\r\n                                </Tab>\r\n                                <Tab eventKey=\"archieve\" title=\"Archieve\">\r\n                                    <KMRArchieveTabContent\r\n                                        claimId={this.state.attrClaimId}\r\n                                        memberSSN={this.state.attrMemberSSN}\r\n                                        submissionDate={this.state.attrSubmissionDate}\r\n                                    ></KMRArchieveTabContent>\r\n                                </Tab>\r\n                            </Tabs>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    goToCreateClaim(e) {\r\n        this.setState(() => ({ toCreate: true }))\r\n    }\r\n}\r\n\r\nexport default KMRClaims;","class Utility {\r\n\r\n    static formatDate(date) {\r\n\r\n        var year = date.substring(0, 4);\r\n        var month = date.substring(4, 6);\r\n        var day = date.substring(6, 8);\r\n\r\n        return year + \"-\" + month + \"-\" + day;\r\n\r\n    }\r\n\r\n    static nextLetter(s){\r\n        var c= s.charCodeAt(0);\r\n        switch(c){\r\n            case 90: return 'A';\r\n            case 122: return 'a';\r\n            default: { return String.fromCharCode(++c);}\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Utility;","import React from 'react';\r\n\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport moment from \"moment\";\r\n\r\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\r\n\r\nimport ApiService from './../../service/APIService';\r\nimport UtilityService from './../../service/UtilityService';\r\n\r\nimport \"./style.css\";\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\n\r\nclass CreateClaim extends React.Component {\r\n\r\n    ctrlKeyPressed = false;\r\n    altKeyPressed = false;\r\n\r\n    isLoading= false;\r\n    options = [];   \r\n\r\n    apiService = new ApiService();\r\n\r\n    inputProps = {\r\n        placeholder: 'Member SSN',\r\n        value: \"\",\r\n        onChange: this.onChange\r\n    };\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.types = ['MEDICAL', 'DENTAL']\r\n        this.selectedTabIndex = 0;\r\n        this.autoSaveInterval = undefined;\r\n        this.lineItem = [\r\n            {name: 'serviceFrom', type: 'date', value: '', label: 'Service From'},\r\n            {name: 'serviceThru', type: 'date', value: '', label: 'Service Thru'},\r\n            {name: 'place', type: 'text', value: '', label: 'Place'},\r\n            {name: 'cpt', type: 'dropdown', value: '', options: [], masterdata: 'CPTMaster', label: 'CPT'},\r\n            {name: 'procedure', type: 'dropdown', value: '', options: [], masterdata: 'ProcedureMaster', label: 'Procedure'},\r\n            {name: 'modifier', type: 'text', value: '', label: 'Modifier'},\r\n            {name: 'secondCptModifier', type: 'text', value: '', label: '2nd CPT Modifier Code'},\r\n            {name: 'thirdCptModifier', type: 'text', value: '', label: '3rd CPT Modifier Code'},\r\n            {name: 'diagnosisPointer', type: 'text', value: '', label: 'Diagnosis Pointer'},\r\n            {name: 'unitsPerVisit', type: 'number', value: '', label: 'Units/Visit'},\r\n            {name: 'coPay', type: 'text', value: '', label: 'CoPay'},\r\n            {name: 'cobAmount', type: 'number', value: '', label: 'COB Amount'},\r\n            {name: 'charges', type: 'number', value: '', label: 'Charges'},\r\n            {name: 'allowed', type: 'number', value: '', label: 'Allowed'},\r\n            {name: 'deductible', type: 'number', value: '', label: 'Deductible'},\r\n            {name: 'notCovered', type: 'number', value: '', label: 'Not Covered'},\r\n            {name: 'payment', type: 'number', value: '', label: 'Payment'},\r\n            {name: 'exclusionCode', type: 'dropdown', value: '', options: [], masterdata: 'ExclusionCodeMaster', label: 'Exclusion Code'},\r\n            {name: 'secondExclusionCode', type: 'dropdown', value: '', options: [], masterdata: 'ExclusionCodeMaster', label: '2nd Exclusion Code'},\r\n            {name: 'thirdExclusionCode', type: 'dropdown', value: '', options: [], masterdata: 'ExclusionCodeMaster', label: '3rd Exclusion Code'}\r\n        ]\r\n\r\n        /*\r\n            NOTE: the attribute name starts with \r\n            1. member\r\n            2. patient\r\n            3. diagnosis\r\n            4. other\r\n             - needs to be used if are required to save\r\n        */\r\n        this.state = {\r\n            key: 2,\r\n\r\n            /* Claim ID */\r\n            claimId: \"\",\r\n            claimIdHeader: \"\",\r\n\r\n            /* Member Auto Suggest */\r\n            value: '',\r\n            options: [],\r\n            providerOptions: [],\r\n            isLoading: false,\r\n\r\n            /* Dependent Auto Suggest */\r\n            depOptions: [],\r\n            depValue: '',\r\n            depIsLoading: false,\r\n\r\n            /* Form Data */\r\n\r\n            /* Master Details */\r\n            masterClaimType: '',\r\n            masterReceivedDate: '',\r\n\r\n            /* Member */\r\n            memberSSN: '',\r\n            memberName: '',\r\n            memberAddress: '',\r\n            memberPolicy: '',\r\n            memberCity: '',\r\n            memberState: '',\r\n            memberZip: '',\r\n            memberTelephone: '',\r\n            memberDob: '',\r\n            memberSex: '',\r\n            memberEmployer: '',\r\n            memberInsurancePlan: '',\r\n\r\n            /* Patient */\r\n            patientRelation: '',\r\n            patientSSN: '',\r\n            patientName: '',\r\n            patientDob: '',\r\n            patientSex: '',\r\n            patientAddress: '',\r\n            patientCity: '',\r\n            patientState: '',\r\n            patientZip: '',\r\n            patientTelePhone: '',\r\n            patientMStat: '',\r\n            patientEStat: '',\r\n            patientCondition: '',\r\n\r\n            /* Diagnosis */\r\n            diagnosisCodes : [\r\n                {pointer: 'A', value: ''}\r\n            ],\r\n\r\n            diagnosisLineItems : [\r\n                JSON.parse(JSON.stringify(this.lineItem))\r\n            ],\r\n\r\n            /* Total */\r\n            totalCharges: 0,\r\n            totalAllowed: 0,\r\n            totalDeductible: 0,\r\n            totalNotCovered: 0,\r\n            totalPayment: 0,\r\n\r\n            /* Others */\r\n            othersFedId: '',\r\n            othersPatientAccountNum: '',\r\n            othersPendCode: '',\r\n            othersBillingNo: '',\r\n            othersPayee: '',\r\n            othersProvider: '',\r\n            othersProviderAddress: '',\r\n\r\n            /* Popup */\r\n            showClaimPopup: false,\r\n            historyClaims: [],\r\n\r\n            /* Member Auto Select Obj For SSN Field */\r\n            memberAutoSuggestSSN : {\r\n                ssn : '',\r\n                fname : '',\r\n                lname : ''\r\n            },\r\n            memberAutoSuggestFocused : true,\r\n\r\n            /* Provider Tax ID auto suggest */\r\n            providerAutoSuggestTaxId : {}\r\n        };\r\n\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        this.handlePatientChange = this.handlePatientChange.bind(this);\r\n        this.handleDiagnosticCodeChange = this.handleDiagnosticCodeChange.bind(this);\r\n        this.handleLineItemChange = this.handleLineItemChange.bind(this);\r\n        this.commonChangeHandler = this.commonChangeHandler.bind(this);\r\n        this.autoSave = this.autoSave.bind(this);\r\n\r\n        this.tabNavKeyCheck();\r\n    }\r\n\r\n    componentDidMount() {\r\n        var claimId = this.props.match.params.claimid;\r\n\r\n        //means edit claim\r\n        if(claimId != undefined){\r\n            //this.fetchClaim(claimId); //<==== this is shifted at line 210\r\n            this.setState({\r\n                \"claimId\" : claimId,\r\n                \"claimIdHeader\" : \"[ Claim# : \" + claimId + \" ]\"\r\n            });\r\n        }\r\n        else {\r\n            //means new claim\r\n            this.state.memberAutoSuggestFocused = true;\r\n            this.setState({masterReceivedDate : moment().format(\"YYYY-MM-DD\")})\r\n        }\r\n\r\n        this.populateMasterDropdown();\r\n    }\r\n\r\n    populateMasterDropdown() {\r\n\r\n        //first fill up which are from user input\r\n        for(var i=0; i< this.lineItem.length; i++) {\r\n            if(this.lineItem[i].type == \"dropdown\") {\r\n                if(this.lineItem[i].masterdata == \"diagnosispointer\") {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        //Then fill up from master data items\r\n        for(var i=0; i< this.lineItem.length; i++) {\r\n            if(this.lineItem[i].type == \"dropdown\") {\r\n                if(this.lineItem[i].masterdata != \"diagnosispointer\") {\r\n                    this.invokeAPIToPopulateOptions(i, this.lineItem[i].masterdata);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    invokeAPIToPopulateOptions(index, masterData) {\r\n        var root = this;\r\n        var url = this.apiService.getApiUrl(\"getMasterItemDropdownList\", [this.lineItem[index].masterdata]);\r\n        this.apiService.invokeGet(url, this, function (response) {\r\n            var data = response.data;\r\n\r\n            root.lineItem[index].options = root.constructDropdownArray(data, masterData)\r\n            root.setState({\r\n                diagnosisLineItems : [JSON.parse(JSON.stringify(root.lineItem))]\r\n            }, function(){\r\n                var claimId = root.props.match.params.claimid;\r\n\r\n                //means edit\r\n                if(claimId != undefined){\r\n                    root.fetchClaim(claimId);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    constructDropdownArray(serverData, masterItem) {\r\n        var list = [];\r\n        for(var i = 0; i < serverData.length; i++) {\r\n            var obj = {};\r\n            if (masterItem == \"CPTMaster\") {\r\n                obj.value = serverData[i]['CPT Id'];\r\n                obj.display = serverData[i]['CPT Number'] + \" ( \" + serverData[i]['Description'] + \")\";\r\n            }\r\n            else if(masterItem == \"ProcedureMaster\") {\r\n                obj.value = serverData[i]['Procedure Id'];\r\n                obj.display = serverData[i]['Procedure Number'] + \" ( \" + serverData[i]['Description'] + \")\";\r\n            } else if(masterItem == \"ExclusionCodeMaster\") {\r\n                obj.value = serverData[i]['Exclusion Code Id'];\r\n                obj.display = serverData[i]['Exclusion Code'] + \" ( \" + serverData[i]['Description'] + \")\";\r\n            }\r\n            list.push(obj);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    fetchClaim(claimId) {\r\n\r\n        var url = this.apiService.getApiUrl(\"getClaimById\", [claimId]);\r\n        var root = this;\r\n        this.apiService.invokeGet(url, this, function(response){\r\n            var obj = response.data\r\n\r\n            for (var key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    var val = obj[key];\r\n                    if(key == 'diagnosisLineItems') {\r\n                        \r\n                        var finArr = [];\r\n                        for(var i=0; i< val.length; i++) {\r\n                            var itemObj = val[i];\r\n                            var tempArr = [];\r\n\r\n                            var tempArr = JSON.parse(JSON.stringify(root.lineItem));\r\n                            for(var j=0; j< tempArr.length; j++) {\r\n                                tempArr[j]['value'] = itemObj[tempArr[j]['name']];\r\n                            }\r\n                            finArr.push(tempArr);\r\n                        }\r\n                        obj[key] = finArr;\r\n                    }\r\n                }\r\n            }\r\n            root.setState(obj, function() {\r\n                root.state.memberAutoSuggestSSN = {\r\n                    ssn : root.state.memberSSN,\r\n                    fname : '',\r\n                    lname : ''\r\n                }\r\n            });\r\n            console.log(root.state.memberAutoSuggestSSN);\r\n        })\r\n    }\r\n\r\n    tabNavKeyCheck() {\r\n        var root = this;\r\n        document.onkeydown = function(e) {\r\n\r\n            e = e || window.event;\r\n            var key = e.key || e.keyIdentifier || e.keyCode;\r\n\r\n            if(e.ctrlKey) { root.ctrlKeyPressed = true; }\r\n\r\n            if(key == 'AltGraph') {\r\n                //if(root.selectedTabIndex == 2) { //this if was required earlier because, then UI was tabbed based\r\n                    root.state.diagnosisLineItems.push(JSON.parse(JSON.stringify(root.lineItem)));\r\n               // }\r\n            }\r\n\r\n            if (e.keyCode == '37') {\r\n                if(root.ctrlKeyPressed) {\r\n                    if(root.selectedTabIndex > 0)root.selectedTabIndex--;\r\n                }\r\n            }\r\n            else if (e.keyCode == '39') {\r\n                if(root.ctrlKeyPressed) {\r\n                    if(root.selectedTabIndex < 4)root.selectedTabIndex++;\r\n                }\r\n            }\r\n            root.handleSelect(this.selectedTabIndex, false);\r\n            this.ctrlKeyPressed = false;\r\n        }\r\n    }\r\n\r\n    addNewLineItem() {\r\n        var lineItems = this.state.diagnosisLineItems;\r\n        var lineItemArr = JSON.parse(JSON.stringify(this.lineItem));\r\n\r\n        lineItemArr[0].value = lineItems[lineItems.length - 1][0].value;\r\n        lineItemArr[1].value = lineItems[lineItems.length - 1][1].value;\r\n\r\n        lineItems.push(lineItemArr);\r\n        this.setState({\r\n            diagnosisLineItems: lineItems\r\n        })\r\n    }\r\n\r\n    handleSelect(key, mouseClick = true) {\r\n        if(mouseClick) {\r\n            this.selectedTabIndex = key;\r\n        }\r\n        this.setState({key});\r\n    }\r\n\r\n    autoPopulateMember(selectedMember) {\r\n\r\n        if(selectedMember == undefined) return;\r\n        //console.log(selectedMember);\r\n        var root = this;\r\n        this.setState(\r\n            {\r\n                memberSSN:selectedMember.ssn,\r\n                memberName:selectedMember.fname + ' ' + selectedMember.lname,\r\n                memberAddress:selectedMember.address1 + ' ' + selectedMember.address2,\r\n                memberPolicy:'',\r\n                memberCity:selectedMember.city,\r\n                memberState:selectedMember.state,\r\n                memberZip:selectedMember.zip1,\r\n                memberTelephone:selectedMember.phone,\r\n                memberDob:UtilityService.formatDate(selectedMember.dob),\r\n                memberSex:selectedMember.sex,\r\n                memberEmployer:'',\r\n                memberInsurancePlan :''\r\n            }, function() {\r\n                root.autoSave();\r\n                root.fetchDependentList();\r\n                document.getElementById(\"select-dependent\").focus();\r\n                //document.getElementById(\"select-dependent\").scrollIntoView();\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    autoPopulateProvider(selectedProvider) {\r\n\r\n        if(selectedProvider == undefined) return;\r\n\r\n        var root = this;\r\n        this.setState(\r\n            {\r\n                //temporary bad solution as provider data is not correct in db\r\n                othersProvider          :   selectedProvider.docNumber.slice(-1) + selectedProvider.docDescription.trim(),\r\n                othersProviderAddress   :   selectedProvider.address1.trim() + \", \" + selectedProvider.city.trim() + \", \" + selectedProvider.state.trim() + \", \" + selectedProvider.zip.trim()\r\n            }, function() {\r\n                root.autoSave();\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    handlePatientChange(event) {\r\n\r\n        var selectedValue = event.target.value;\r\n        if(selectedValue == \"\")return;\r\n        var root = this;\r\n        if(selectedValue == 'Self') {\r\n\r\n            this.setState(\r\n                {\r\n                    patientRelation: 'Self',\r\n                    patientSSN : this.state.memberSSN,\r\n                    patientName : this.state.memberName,\r\n                    patientDob : this.state.memberDob,\r\n                    patientSex : this.state.memberSex,\r\n                    patientAddress : this.state.memberAddress,\r\n                    patientCity : this.state.memberCity,\r\n                    patientState : this.state.memberState,\r\n                    patientZip : this.state.memberZip,\r\n                    patientTelePhone : this.state.memberTelephone,\r\n                    patientMStat : '',\r\n                    patientEStat : '',\r\n                    patientCondition : ''\r\n                }, function() {\r\n                        root.autoSave();\r\n                }\r\n            )\r\n        } else {\r\n            for(var i=0; i< this.state.depOptions.length; i++) {\r\n                if(this.state.depOptions[i].dssn == selectedValue) {\r\n                    this.autoPopulatePatient(this.state.depOptions[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    autoPopulatePatient(selectedDependent) {\r\n\r\n        if(selectedDependent == undefined) return;\r\n\r\n        if(selectedDependent.relation == 'W')selectedDependent.relation = 'Wife';\r\n        else if(selectedDependent.relation == 'S')selectedDependent.relation = 'Son';\r\n        else if(selectedDependent.relation == 'D')selectedDependent.relation = 'Daughter';\r\n\r\n        var root = this;\r\n        this.setState(\r\n            {\r\n                patientRelation: selectedDependent.relation,\r\n                patientSSN: selectedDependent.dssn,\r\n                patientName: selectedDependent.fname + ' ' + selectedDependent.lname,\r\n                patientAddress: this.state.memberAddress,\r\n                patientPolicy: '',\r\n                patientCity: this.state.memberCity,\r\n                patientState: this.state.memberState,\r\n                patientZip: this.state.memberZip,\r\n                patientTelephone: selectedDependent.phone,\r\n                patientDob: UtilityService.formatDate(selectedDependent.dob),\r\n                patientSex: selectedDependent.sex,\r\n                patientEmployer: '',\r\n                patientInsurancePlan: ''\r\n            }, function() {\r\n                root.autoSave();\r\n            }\r\n        )\r\n    }\r\n\r\n    handleDiagnosticCodeChange(event) {\r\n\r\n        var root = this;\r\n        var val = event.target.value;\r\n        var diagnosis = this.state.diagnosisCodes;\r\n        var index = event.target.dataset.index\r\n        diagnosis[index].value = val;\r\n\r\n        for(var i=0; i< diagnosis.length; i++) {\r\n            if(diagnosis[i].value.trim() == \"\") {\r\n                diagnosis.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        for(var i=0; i< diagnosis.length; i++) {\r\n            if(i == 0)diagnosis[i].pointer = 'A';\r\n            else diagnosis.pointer = UtilityService.nextLetter(diagnosis[i - 1].pointer);\r\n        }\r\n\r\n        var obj = {pointer: UtilityService.nextLetter(diagnosis[diagnosis.length - 1].pointer), value: \"\"}\r\n        diagnosis.push(obj);\r\n\r\n        this.setState({diagnosisCodes: diagnosis}, function(){\r\n            root.autoSave();\r\n        })\r\n    }\r\n\r\n    fetchDependentList() {\r\n        var root = this;\r\n        var depedentFetchUrl = this.apiService.getApiUrl(\"fetchDepedentByMember\", [this.state.memberSSN]);\r\n        this.apiService.invokeGet(depedentFetchUrl, this, function(response) {\r\n            console.log(response);\r\n            root.setState({depOptions : response.data});\r\n        });\r\n    }\r\n\r\n    handleLineItemChange(event) {\r\n        var index = event.target.dataset.index;\r\n        var name = event.target.dataset.name;\r\n\r\n        var lineItemsArr = JSON.parse(JSON.stringify(this.state.diagnosisLineItems));\r\n\r\n        //make start date and end date same\r\n        if(name == \"serviceFrom\") {\r\n            //service thru is second item so index 1\r\n            lineItemsArr[index][1].value = event.target.value;\r\n        }\r\n\r\n        var totalCharges = 0;\r\n        var totalAllowed = 0\r\n        var totalDeductible = 0;\r\n        var totalNotCovered = 0;\r\n        var totalPayment = 0;\r\n\r\n        for(var i=0; i< lineItemsArr[index].length; i++) {\r\n            if (lineItemsArr[index][i].name == name) {\r\n                lineItemsArr[index][i].value = event.target.value;\r\n            }\r\n        }\r\n\r\n        for(var j=0; j< lineItemsArr.length; j++) {\r\n            for(var i=0; i< lineItemsArr[j].length; i++) {\r\n                console.log(lineItemsArr[index][i].name);\r\n                if (lineItemsArr[index][i].name == \"charges\") totalCharges += isNaN(parseFloat(lineItemsArr[j][i].value)) ? 0 : parseFloat(lineItemsArr[j][i].value);\r\n                if (lineItemsArr[index][i].name == \"allowed\") totalAllowed += isNaN(parseFloat(lineItemsArr[j][i].value)) ? 0 : parseFloat(lineItemsArr[j][i].value);\r\n                if (lineItemsArr[index][i].name == \"deductible\") totalDeductible += isNaN(parseFloat(lineItemsArr[j][i].value)) ? 0 : parseFloat(lineItemsArr[j][i].value);\r\n                if (lineItemsArr[index][i].name == \"notCovered\") totalNotCovered += isNaN(parseFloat(lineItemsArr[j][i].value)) ? 0 : parseFloat(lineItemsArr[j][i].value);\r\n                if (lineItemsArr[index][i].name == \"payment\") totalPayment += isNaN(parseFloat(lineItemsArr[j][i].value)) ? 0 :  parseFloat(lineItemsArr[j][i].value);\r\n            }\r\n        }\r\n        console.log(lineItemsArr);\r\n\r\n        var root = this;\r\n        this.setState({\r\n            diagnosisLineItems: lineItemsArr,\r\n            totalCharges: totalCharges,\r\n            totalAllowed: totalAllowed,\r\n            totalDeductible: totalDeductible,\r\n            totalNotCovered: totalNotCovered,\r\n            totalPayment: totalPayment,\r\n        }, function() {\r\n            root.autoSave()\r\n        })\r\n    }\r\n\r\n    commonChangeHandler(event) {\r\n\r\n        var root = this;\r\n        var name = event.target.dataset.name;\r\n        this.setState({[name]: event.target.value}, function() {\r\n            root.autoSave();\r\n        });\r\n    }\r\n\r\n    autoSave(){\r\n        \r\n        document.getElementsByClassName(\"small-text\")[0].classList.add(\"blink\");\r\n        if(this.autoSaveInterval != undefined)\r\n            clearInterval(this.autoSaveInterval);\r\n        \r\n        var root = this;\r\n\r\n        this.autoSaveInterval = setTimeout(function(){\r\n\r\n            var autoSaveData = {};\r\n\r\n            for (var key in root.state) {\r\n                if (root.state.hasOwnProperty(key)) {\r\n\r\n                    if(\r\n                        key.startsWith(\"master\") || key.startsWith(\"member\") || key.startsWith(\"patient\") || \r\n                        key.startsWith(\"diagnosis\") || key.startsWith(\"other\")) \r\n                    {\r\n                            if(key == \"diagnosisLineItems\") {\r\n\r\n                                var modifiedArr = [];\r\n                                for(var i=0; i<root.state[key].length; i++) {\r\n\r\n                                    var innerArr = root.state[key][i];\r\n                                    var obj = {};\r\n                                    for(var j=0; j< innerArr.length; j++) {\r\n                                        obj[innerArr[j].name] = innerArr[j].value;\r\n                                    }\r\n                                    modifiedArr.push(obj);\r\n                                }\r\n                                autoSaveData[key] = modifiedArr;\r\n\r\n                            } else {\r\n                                autoSaveData[key] = root.state[key];\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(root.state.claimId != undefined)\r\n                autoSaveData['id'] = root.state.claimId;\r\n            \r\n            var autoSaveUrl = root.apiService.getApiUrl(\"claimAutoSave\");\r\n            root.apiService.invokePost(autoSaveUrl, JSON.stringify(autoSaveData), root, function(response) {\r\n                //console.log(response);\r\n                try {\r\n                    if (response.status === \"success\") {\r\n                        root.setState({\"claimId\": response.data.id});\r\n                        root.setState({\"claimIdHeader\": \"[ Claim# : \" + response.data.id + \"]\"});\r\n                    }\r\n                    document.getElementsByClassName(\"small-text\")[0].classList.remove(\"blink\");\r\n                } catch(e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n\r\n        }, 1500)\r\n    }\r\n\r\n    goToDashBoard() {\r\n        window.location.href = \"/portal/dashboard\";\r\n    }\r\n\r\n    clearForm() {\r\n        window.location.reload();\r\n    }\r\n\r\n    showClaimPopup() {\r\n\r\n        if(this.state.memberSSN.length == 0) {\r\n            alert(\"Member is not selected\");\r\n            return;\r\n        }\r\n\r\n        this.setState({showClaimPopup : true});\r\n\r\n        var root = this;\r\n        var claimHistoryUrl = this.apiService.getApiUrl(\"getClaimByMember\", [this.state.memberSSN]);\r\n        this.apiService.invokeGet(claimHistoryUrl, this, function(response) {\r\n            root.setState({historyClaims : response.data});\r\n        });\r\n    }\r\n\r\n    handleClaimPopupClose() {\r\n        this.setState({showClaimPopup : false});\r\n    }\r\n\r\n    openHistoryClaim(event) {\r\n        var claimId = event.target.dataset.claimid;\r\n        window.open(\r\n            this.apiService.host + \"/portal/create/\" + claimId,\r\n            \"History Claim\",\r\n            \"resizable,scrollbars,status\"\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"create-claim-container\">\r\n                <Row className=\"headerRow\">\r\n                    <Col>\r\n                        <span className=\"h3-header\"> Claim Entry </span>\r\n                        <span className=\"h3-header\"> {this.state.claimIdHeader} </span>\r\n                        <span className='small-text'> Saving... </span>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        {/*<Button className=\"adjudicate-btn mateffect\" variant=\"primary\">\r\n                            Adjudicate\r\n                        </Button> */}\r\n\r\n                        <Button className=\"clear-btn mateffect\" variant=\"primary\" onClick={this.clearForm.bind(this)}>\r\n                            Clear\r\n                        </Button>\r\n\r\n                        <Button className=\"clear-btn mateffect\" variant=\"primary\" onClick={this.showClaimPopup.bind(this)}>\r\n                            Claim History\r\n                        </Button>\r\n\r\n                        <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.goToDashBoard.bind(this)}> \r\n                            Claim Dashboard\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Form>\r\n                    <Tabs activeKey={this.selectedTabIndex} id=\"create-claim-tabs\" className=\"create-claim-tabs\" onSelect={this.handleSelect}>\r\n                        <Tab eventKey={0} title=\"Claim Information\">\r\n                            <Container fluid>\r\n                                {/* Tab content start */}\r\n                                <Form.Group as={Row} className=\"first-row\" controlId=\"programTypes\">\r\n                                        <Form.Label column md=\"2\" sm=\"2\">\r\n                                            Claim Type : \r\n                                        </Form.Label>\r\n                                        \r\n                                        <Col md=\"2\" sm=\"2\">\r\n                                            <Form.Control as=\"select\" value={this.state.masterClaimType} data-name=\"masterClaimType\" onChange={this.commonChangeHandler}>\r\n                                                { this.types.map((type) => (\r\n                                                    <option value={type}> \r\n                                                        {type} \r\n                                                    </option>\r\n                                                )) }\r\n                                            </Form.Control>\r\n                                        </Col>\r\n\r\n                                        <Form.Label column md=\"2\" sm=\"2\">\r\n                                            Received On : \r\n                                        </Form.Label>\r\n                                        \r\n                                        <Col md=\"2\" sm=\"2\">\r\n                                            <Form.Control type=\"date\" value={this.state.masterReceivedDate} data-name=\"masterReceivedDate\" onChange={this.commonChangeHandler}/>\r\n                                        </Col>\r\n\r\n                                        <Form.Label column md=\"2\" sm=\"2\">\r\n                                            Pend Code :\r\n                                        </Form.Label>\r\n\r\n                                        <Col md=\"2\" sm=\"2\">\r\n                                            <Form.Control type=\"text\" data-name=\"othersPendCode\" value={this.state.othersPendCode} onChange={this.commonChangeHandler} placeholder=\"Enter Pend Code\" />\r\n                                        </Col>\r\n                                </Form.Group>\r\n\r\n                                <hr />\r\n\r\n                                <Form.Row className=\"form-row\">\r\n                                    <Form.Group as={Col} controlId=\"insuredId\">\r\n                                        <Form.Label> Member's Name / SSN </Form.Label>\r\n                                        <AsyncTypeahead\r\n                                            id=\"member-auto-suggest\"\r\n                                            placeholder=\"Search Name / SSN\"\r\n                                            maxResults='6'\r\n                                            autoFocus={this.state.memberAutoSuggestFocused}\r\n                                            value={this.state.memberSSN}\r\n                                            isLoading={this.state.isLoading}\r\n                                            labelKey={option => `${option.ssn} ${option.fname} ${option.lname}`}\r\n                                            onSearch={(query) => {\r\n                                                    \r\n                                                this.setState({isLoading: true});\r\n                                                fetch(this.apiService.getApiUrl(\"memberSuggestUrl\", [query]))\r\n                                                .then(resp => resp.json())\r\n                                                .then(json => {\r\n                                                    this.setState({\r\n                                                        options: json.data\r\n                                                    });\r\n                                                    this.setState({isLoading: false});\r\n                                                });\r\n                                            }}\r\n\r\n                                            onChange={(selected) => {\r\n\r\n                                                this.autoPopulateMember(selected[0])\r\n                                            }}\r\n\r\n                                            renderMenuItemChildren={(option, props) => (\r\n                                                <div className=\"suggestionContainer\">\r\n                                                    <span>{option.fname} {option.lname}</span>\r\n                                                    <span className=\"smallSSNText\"> (SSN : {option.ssn}) </span>\r\n                                                </div>\r\n                                            )}\r\n                                            options={this.state.options}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"memberName\">\r\n                                        <Form.Label>\r\n                                            Member's Name \r\n                                        </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberName} placeholder=\"Enter Insured Name\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"feca\">\r\n                                        <Form.Label> Member's Policy Group or FECA#</Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberPolicy} placeholder=\"Enter Insured FECA#\" />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                <Form.Row className=\"form-row odd-row\">\r\n\r\n                                    <Form.Group as={Col} controlId=\"memberAddress\">\r\n                                        <Form.Label>Member's Address</Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberAddress} placeholder=\"Enter Insured Address\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"memberCity\">\r\n                                        <Form.Label>City </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberCity} placeholder=\"City\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"memberState\">\r\n                                        <Form.Label>\r\n                                            Member's State\r\n                                        </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberState} placeholder=\"State\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"telephone\" className=\"hidden\">\r\n                                        <Form.Label> Telephone# </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberTelephone} placeholder=\"(XXX) - XXX - XXXX\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"zip\">\r\n                                        <Form.Label>Zip</Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberZip} placeholder=\"Zip\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"dob\">\r\n                                        <Form.Label>Date Of Birth </Form.Label>\r\n                                        <Form.Control type=\"date\" value={this.state.memberDob} placeholder=\"DOB\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"sex\">\r\n                                        <Form.Label>\r\n                                            Sex\r\n                                        </Form.Label>\r\n                                        <Form.Control as=\"select\" value={this.state.memberSex} >\r\n                                            <option value='M'> Male </option>\r\n                                            <option value='F'> Female </option>\r\n                                        </Form.Control>\r\n                                        \r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"empname\" className=\"hidden\">\r\n                                        <Form.Label>Employer's Name</Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberEmployer} placeholder=\"Employer's Name\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"insurancePlanName\" className=\"hidden\">\r\n                                        <Form.Label> Insurance Plan Name  </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.memberInsurancePlan} placeholder=\"Program Name\" />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                            </Container>\r\n\r\n                            <hr />\r\n\r\n                            <Container fluid>\r\n\r\n                                <Form.Group as={Row} className=\"first-row\" controlId=\"programTypes\">\r\n\r\n                                        <Form.Label column md=\"3\" sm=\"3\">\r\n                                            Patient\r\n                                        </Form.Label>\r\n\r\n                                        <Col md=\"3\" sm=\"3\">\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                value={this.state.patientSSN}\r\n                                                onChange={this.handlePatientChange}\r\n                                                id=\"select-dependent\">\r\n                                                <option value={\"\"}>Select Dependent</option>\r\n                                                <option value={\"Self\"}>Self</option>\r\n                                                {\r\n                                                    this.state.depOptions.map(function(field, index) {\r\n                                                        return (\r\n                                                            <option value={field.dssn}>\r\n                                                                {field.fname.trim() + ' ' + field.lname.trim() + ' ' + field.initial.trim()}\r\n                                                            </option>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                </Form.Group>\r\n\r\n                                <hr />\r\n                                {/* ======================= Patient Details ======================*/}\r\n                                <Form.Row className=\"first-row form-row\">\r\n\r\n                                    <Form.Group as={Col} controlId=\"relation\">\r\n                                        <Form.Label>\r\n                                            Patient Relationship To Insured\r\n                                        </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientRelation} placeholder=\"Patient Relation With Member\" readOnly={true}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patient-name\">\r\n                                        <Form.Label>\r\n                                            Patient's Name\r\n                                        </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientName} placeholder=\"Enter Patient Name\" readOnly={true}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patient-dob\">\r\n                                        <Form.Label> Patient's Date Of Birth</Form.Label>\r\n                                        <Form.Control type=\"Date\" value={this.state.patientDob} placeholder=\"Enter Patient DOB\" readOnly={true}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"pateint-sex\">\r\n                                        <Form.Label> Patient's Sex</Form.Label>\r\n                                        <Form.Control as=\"select\" value={this.state.patientSex} readOnly={true}>\r\n                                            <option value=''>  </option>\r\n                                            <option value='M'> Male </option>\r\n                                            <option value='F'> Female </option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                {/* Hiding this row as per mail on Dec 8, 2020 */}\r\n                                <Form.Row className=\"form-row odd-row hidden\">\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientAddress\">\r\n                                        <Form.Label>Patient's Address (No., Street)</Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientAddress} placeholder=\"Enter Patient Address\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientCity\">\r\n                                        <Form.Label>City </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientCity} placeholder=\"City\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientState\">\r\n                                        <Form.Label>\r\n                                            State\r\n                                        </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientState} placeholder=\"State\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientZip\">\r\n                                        <Form.Label>Zip</Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientZip} placeholder=\"Zip\" />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                {/* Hiding this row as per mail on Dec 8, 2020 */}\r\n                                <Form.Row className=\"form-row odd-row hidden\">\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientTelephone\">\r\n                                        <Form.Label> Telephone# </Form.Label>\r\n                                        <Form.Control type=\"text\" value={this.state.patientTelePhone} placeholder=\"(XXX) - XXX - XXXX\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientMstat\">\r\n                                        <Form.Label>\r\n                                            Patient Marital Status\r\n                                        </Form.Label>\r\n                                        <Form.Control as=\"select\" value={this.state.patientMStat}>\r\n                                            <option> Single </option>\r\n                                            <option> Married </option>\r\n                                            <option> Others </option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientEmpStat\">\r\n                                        <Form.Label>Patient Employment Status</Form.Label>\r\n                                        <Form.Control as=\"select\" value={this.state.patientEStat}>\r\n                                            <option> Employed </option>\r\n                                            <option> Full Time Student </option>\r\n                                            <option> Part Time Student </option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientCond\">\r\n                                        <Form.Label> Patient's Condition Related To </Form.Label>\r\n                                        <Form.Control as=\"select\" value={this.state.patientCondition}>\r\n                                            <option> Employment </option>\r\n                                            <option> Auto Accident </option>\r\n                                            <option> Other Accident </option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            </Container>\r\n\r\n                            <hr />\r\n                            {/* =================== SERVICE DETAILS ====================== */}\r\n                            <Container fluid>\r\n                                <Form.Row className=\"first-row form-row\">\r\n                                    <Form.Group as={Col} controlId=\"diagnosis\">\r\n                                        <Form.Label>\r\n                                            Diagnosis Or Nature Of Illness Or Injury\r\n                                        </Form.Label>\r\n\r\n                                        <Row>\r\n                                            { this.state.diagnosisCodes.map((d, index) => (\r\n                                                <Col md=\"2\" sm=\"2\">\r\n                                                    <b> {d.pointer}. &nbsp; </b>\r\n                                                    <Form.Control\r\n                                                        className=\"uppercase-input\"\r\n                                                        type=\"text\"\r\n                                                        data-index={index}\r\n                                                        onChange={this.handleDiagnosticCodeChange}\r\n                                                        value={d.value}\r\n                                                        placeholder=\"\" />\r\n                                                </Col>\r\n                                            ))\r\n                                            }\r\n                                        </Row>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row className=\"first-row form-row\">\r\n                                    <Form.Group as={Col} controlId=\"lineItems\">\r\n                                        <Form.Label>\r\n                                            Line Items\r\n                                            <span style={{fontSize:10 + \"px\"}}>\r\n                                                &nbsp; (Right Alt To Add More)\r\n                                            </span>\r\n\r\n                                            <Button className=\"addnewlineitem-btn mateffect\" variant=\"primary\" onClick={this.addNewLineItem.bind(this)}>\r\n                                                Add New Line Item\r\n                                            </Button>\r\n                                        </Form.Label>\r\n                                        <Row>\r\n                                            <hr />\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Table striped bordered hover size=\"sm\" className=\"small-header-size-table\">\r\n                                                <tbody>\r\n\r\n                                                {\r\n                                                    this.state.diagnosisLineItems.map((value, index) => {\r\n                                                        return (\r\n\r\n                                                            <tr>\r\n                                                                <td>\r\n                                                                    <Accordion>\r\n                                                                        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                                                            <b>{\"Line# : \" + (index + 1) }</b>\r\n                                                                            &nbsp; &nbsp;\r\n                                                                            {\"Charges : \" + (this.state.diagnosisLineItems[index][12].value.trim().length == 0 ? 0 : this.state.diagnosisLineItems[index][12].value.trim())}\r\n                                                                            &nbsp; &nbsp;\r\n                                                                            {\"Allowed : \" + (this.state.diagnosisLineItems[index][13].value.trim().length == 0 ? 0 : this.state.diagnosisLineItems[index][13].value.trim())}\r\n                                                                            &nbsp; &nbsp;\r\n                                                                            {\"Deductible : \" + (this.state.diagnosisLineItems[index][14].value.trim().length == 0 ? 0 : this.state.diagnosisLineItems[index][14].value.trim())}\r\n                                                                            &nbsp; &nbsp;\r\n                                                                            {\"Not Covered : \" + (this.state.diagnosisLineItems[index][15].value.trim().length == 0 ? 0 : this.state.diagnosisLineItems[index][15].value.trim())}\r\n                                                                            &nbsp; &nbsp;\r\n                                                                            {\"Payment : \" + (this.state.diagnosisLineItems[index][16].value.trim().length == 0 ? 0 : this.state.diagnosisLineItems[index][16].value.trim())}\r\n                                                                        </Accordion.Toggle>\r\n                                                                        <Accordion.Collapse eventKey=\"0\">\r\n                                                                            <div className=\"diagnosis-line-item-container\">\r\n                                                                                {\r\n                                                                                    this.state.diagnosisLineItems[index].map((tVal, tIndex) => {\r\n                                                                                        if(tVal.type === \"dropdown\")\r\n                                                                                            return (\r\n                                                                                                <div>\r\n                                                                                                    <label> <b> {tVal.label} : </b> </label>\r\n                                                                                                    <Form.Control as=\"select\"\r\n                                                                                                                  data-name={tVal.name}\r\n                                                                                                                  value={tVal.value}\r\n                                                                                                                  data-index={index}\r\n                                                                                                                  onChange={this.handleLineItemChange}>\r\n                                                                                                        <option value={''}></option>\r\n                                                                                                        {\r\n                                                                                                            this.state.diagnosisLineItems[index][tIndex].options.map((tVal, tIndex) => {\r\n                                                                                                                return (<option value={tVal.value}> {tVal.display} </option>)\r\n                                                                                                            })\r\n                                                                                                        }\r\n                                                                                                    </Form.Control>\r\n                                                                                                </div>\r\n                                                                                            )\r\n                                                                                        else\r\n                                                                                            return (\r\n                                                                                                <div>\r\n                                                                                                    <label> <b> {tVal.label} : </b> </label>\r\n                                                                                                    <Form.Control\r\n                                                                                                        onChange={this.handleLineItemChange}\r\n                                                                                                        data-name={tVal.name}\r\n                                                                                                        data-index={index}\r\n                                                                                                        value={tVal.value}\r\n                                                                                                        type={tVal.type}\r\n                                                                                                    />\r\n                                                                                                </div>\r\n                                                                                            )\r\n                                                                                    })\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        </Accordion.Collapse>\r\n                                                                        <hr />\r\n                                                                    </Accordion>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <div  class={\"total-container\"}>\r\n                                                            <div>\r\n                                                                <label> <b> Total Charges : </b> </label>\r\n                                                                <Form.Control\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.totalCharges}\r\n                                                                    readOnly\r\n                                                                />\r\n                                                            </div>\r\n\r\n                                                            <div>\r\n                                                                <label> <b> Total Allowed : </b> </label>\r\n                                                                <Form.Control\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.totalAllowed}\r\n                                                                    readOnly\r\n                                                                />\r\n                                                            </div>\r\n\r\n                                                            <div>\r\n                                                                <label> <b> Total Deductible : </b> </label>\r\n                                                                <Form.Control\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.totalDeductible}\r\n                                                                    readOnly\r\n                                                                />\r\n                                                            </div>\r\n\r\n                                                            <div>\r\n                                                                <label> <b> Total Not Covered : </b> </label>\r\n                                                                <Form.Control\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.totalNotCovered}\r\n                                                                    readOnly\r\n                                                                />\r\n                                                            </div>\r\n\r\n                                                            <div>\r\n                                                                <label> <b> Total Payment : </b> </label>\r\n                                                                <Form.Control\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.totalPayment}\r\n                                                                    readOnly\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                </tbody>\r\n                                            </Table>\r\n                                        </Row>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            </Container>\r\n\r\n                            <hr />\r\n                            {/* ==================  OTHERS TAB =================== */}\r\n                            <Container fluid>\r\n                                <Form.Row className=\"form-row\">\r\n                                    <Form.Group as={Col} controlId=\"fedtax\">\r\n                                        <Form.Label>Federal Tax Id# </Form.Label>\r\n                                        {/*<Form.Control type=\"text\" data-name=\"othersFedId\" value={this.state.othersFedId} onChange={this.commonChangeHandler} placeholder=\"Enter Provider #\" />*/}\r\n                                        <AsyncTypeahead\r\n                                            data-name=\"othersFedId\"\r\n                                            value={this.state.othersFedId}\r\n                                            placeholder=\"Enter Provider #\"\r\n                                            id=\"fed-id\"\r\n                                            maxResults='6'\r\n                                            isLoading={this.state.isLoading}\r\n                                            labelKey={option => `${option.docNumber}`}\r\n                                            onSearch={(query) => {\r\n\r\n                                                this.setState({isLoading: true});\r\n                                                fetch(this.apiService.getApiUrl(\"providerSuggestUrl\", [query]))\r\n                                                    .then(resp => resp.json())\r\n                                                    .then(json => {\r\n                                                        this.setState({\r\n                                                            providerOptions: json.data\r\n                                                        });\r\n                                                        this.setState({isLoading: false});\r\n                                                    });\r\n                                            }}\r\n\r\n                                            onChange={(selected) => {\r\n\r\n                                                this.autoPopulateProvider(selected[0])\r\n                                            }}\r\n\r\n                                            renderMenuItemChildren={(option, props) => (\r\n                                                <div className=\"suggestionContainer\">\r\n                                                    <span>{option.docNumber}</span>\r\n                                                    <span className=\"smallSSNText\"> ({option.docNumber + option.docDescription}) </span>\r\n                                                </div>\r\n                                            )}\r\n                                            options={this.state.providerOptions}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"provider\">\r\n                                        <Form.Label> Provider </Form.Label>\r\n                                        <Form.Control type=\"text\" data-name=\"othersProvider\" value={this.state.othersProvider} onChange={this.commonChangeHandler} placeholder=\"Enter Provider\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"providerAddress\">\r\n                                        <Form.Label> Provider Address </Form.Label>\r\n                                        <Form.Control type=\"text\" data-name=\"othersProviderAddress\" value={this.state.othersProviderAddress} onChange={this.commonChangeHandler} placeholder=\"Enter Provider Address\" />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                <Form.Row className=\"form-row\">\r\n\r\n                                    <Form.Group as={Col} controlId=\"patientAcc\">\r\n                                        <Form.Label>\r\n                                            Patient Account#\r\n                                        </Form.Label>\r\n                                        <Form.Control type=\"text\" data-name=\"othersPatientAccountNum\" value={this.state.othersPatientAccountNum} onChange={this.commonChangeHandler} placeholder=\"Patient Account Number\" />\r\n                                    </Form.Group>\r\n\r\n                                    {/*<Form.Group as={Col} controlId=\"billing\">\r\n                                        <Form.Label> Billing# </Form.Label>\r\n                                        <Form.Control type=\"text\" data-name=\"othersBillingNo\" value={this.state.othersBillingNo} onChange={this.commonChangeHandler} placeholder=\"Enter Billing#\" />\r\n                                    </Form.Group> */}\r\n\r\n                                    <Form.Group as={Col} controlId=\"payee\">\r\n                                        <Form.Label> Payee </Form.Label>\r\n                                        <Form.Control as=\"select\" data-name=\"othersPayee\" value={this.state.othersPayee} onChange={this.commonChangeHandler} placeholder=\"Enter Payee\">\r\n                                            <option> M - Member </option>\r\n                                            <option> P - Provider </option>\r\n                                            <option> D - Dependent </option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Row>\r\n                            </Container>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </Form>\r\n\r\n                <Row className=\"headerRow\">\r\n                    <Col>\r\n                        <Button className=\"adjudicate-btn mateffect\" variant=\"primary\">\r\n                            Adjudicate\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Modal show={this.state.showClaimPopup} onHide={this.handleClaimPopupClose.bind(this)}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Claim History</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Claim #</th>\r\n                                <th>Processed Date</th>\r\n                                <th>Status</th>\r\n                                <th>Open</th>\r\n                            </tr>\r\n                            </thead>\r\n                            {\r\n                                this.state.historyClaims.map((claim) => (\r\n                                    <tr>\r\n                                        <td> {claim.id} </td>\r\n                                        <td> {moment(claim.masterReceivedDate, \"YYYY-MM-DD\").format(\"MM/DD/YYYY\")} </td>\r\n                                        <td> </td>\r\n                                        <td> <Button data-claimId={claim.id} onClick={this.openHistoryClaim.bind(this)}> Open </Button> </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                        </Table>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateClaim;","import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport {AgGridReact} from 'ag-grid-react';\r\n\r\nimport 'ag-grid-enterprise';\r\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\r\n\r\nimport ApiService from './../../service/APIService';\r\n\r\nimport \"./style.css\";\r\n\r\nclass MasterDataList extends React.Component {\r\n\r\n    apiService = new ApiService();\r\n    labelNameMap = {};\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            columnDefs: [\r\n                  { headerName: \"Master Items\", field: \"masteritem\", filter: true, floatingFilter: true, flex: 1 }\r\n              ],\r\n              rowData: [\r\n                  \r\n              ],\r\n\r\n              modules: [\r\n                SetFilterModule\r\n              ]\r\n        }\r\n\r\n        this.fetchMasterItemList();\r\n    }\r\n\r\n    goToDashBoard() {\r\n        window.location.href = \"/portal/dashboard\";\r\n    }\r\n\r\n    fetchMasterItemList() {\r\n\r\n        var url = this.apiService.getApiUrl(\"getMasterItems\");\r\n        var root = this;\r\n        this.apiService.invokeGet(url, this, function(response){\r\n\r\n            var data = response.data;\r\n            var rows = [];\r\n            for(var i=0; i< data.length; i++) {\r\n                var obj = {};\r\n                obj['masteritem'] = data[i]['label'];\r\n                root.labelNameMap[data[i]['label']] = data[i]['identifier'];\r\n\r\n                rows.push(obj);\r\n            }\r\n            root.setState({rowData : rows});\r\n        })\r\n    }\r\n\r\n    onCellClicked(obj) {\r\n        console.log(obj);\r\n        var cellVal = obj.data.masteritem;\r\n        var identifier = this.labelNameMap[cellVal];\r\n        window.location.href = \"/portal/masteritem/\" + identifier + \"/label/\" + cellVal;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-container\">\r\n                <Row className=\"headerRow\">\r\n                    <Col>\r\n                        <span className=\"h3-header\"> Master Data List </span>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.goToDashBoard.bind(this)}> \r\n                            Go To Dashboard\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <div id=\"grid-wrapper-master-item-list\" style={{ width: '100%', height: '100%' }}>\r\n                        <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '400px', width: '100%'} }>\r\n                            <AgGridReact\r\n                                modules={this.state.modules}\r\n                                columnDefs={this.state.columnDefs}\r\n                                rowData={this.state.rowData}\r\n                                frameworkComponents={this.state.frameworkComponents}\r\n                                onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                                onCellClicked={this.onCellClicked.bind(this)}\r\n                                \r\n                            >\r\n                            </AgGridReact>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-master-item-list').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default MasterDataList;","import React, { Component } from 'react';\r\n\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nexport default class AgGridActionColumnRenderer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onDeleteClick = this.onDeleteClick.bind(this);\r\n    }\r\n\r\n    onDeleteClick() {\r\n\r\n        console.log(this.props.node);\r\n        this.props.context.componentParent.delete(\r\n            this.props.node.data, this.props.node.rowIndex\r\n        );\r\n    }\r\n\r\n    render() {\r\n            if(this.props.value === \"delete\"){\r\n                return (\r\n                    <>\r\n                        <MdDelete size='2em' onClick={this.onDeleteClick}/>\r\n                    </>\r\n                )\r\n            }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport AgGridActionColumnRenderer from './AgGridActionColumnRenderer'\r\n\r\nimport { AgGridReact } from '@ag-grid-community/react';\r\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\r\n\r\nimport { MdFileDownload } from 'react-icons/md';\r\n\r\nimport ApiService from './../../service/APIService';\r\n\r\nimport \"./style.css\";\r\n\r\nclass MasterDataItem extends React.Component {\r\n\r\n    apiService = new ApiService();\r\n    itemSpecificProperties = {\r\n        \"CoverageTypeMaster\" : {\r\n            \"id\" : \"Coverage Type Id\",\r\n            \"hiddenCols\" : [\"Coverage Type Id\" ]\r\n        },\r\n\r\n        \"NetworkMaster\" : {\r\n                \"id\" : \"Network Id\",\r\n                \"hiddenCols\" : [\"Network Id\" ]\r\n        },\r\n\r\n        \"ClaimTypeMaster\" : {\r\n                \"id\" : \"Claim Type Id\",\r\n                \"hiddenCols\" : [\"Claim Type Id\" ]\r\n        },\r\n\r\n        \"ExclusionCodeMaster\" : {\r\n                \"id\" : \"Exclusion Code Id\",\r\n                \"hiddenCols\" : [\"Exclusion Code Id\" ]\r\n        },\r\n\r\n        \"StatusTypeMaster\" : {\r\n                \"id\" : \"Status Type Id\",\r\n                \"hiddenCols\" : [\"Status Type Id\" ]\r\n        },\r\n\r\n        \"SupervisorMaster\" : {\r\n                \"id\" : \"Supervisor Id\",\r\n                \"hiddenCols\" : [\"Supervisor Id\" ]\r\n        },\r\n\r\n        \"EligibilityOverrideReasonMaster\" : {\r\n                \"id\" : \"Eligibility Override Reason Id\",\r\n                \"hiddenCols\" : [\"Eligibility Override Reason Id\" ]\r\n        },\r\n\r\n        \"ReasonforHoldingClaimMaster\" : {\r\n                \"id\" : \"Reason for Holding Claim Id\",\r\n                \"hiddenCols\" : [\"Reason for Holding Claim Id\" ]\r\n        },\r\n\r\n        \"AdjudicationSequenceMaster\" : {\r\n                \"id\" : \"Adjudication Sequence Id\",\r\n                \"hiddenCols\" : [\"Adjudication Sequence Id\" ]\r\n        },\r\n\r\n        \"ProviderMaster\" : {\r\n                \"id\" : \"Provider Id\",\r\n                \"hiddenCols\" : [\"Provider Id\" , \"Address 2\",\"State\",\"Zip\",\"Zip4\",\"Telephone\",\"Foreign\",\"Hospital/Office Code\",\"Comments\",\"Tax ID#\",\"Provider Type\"]\r\n        },\r\n\r\n        \"ProviderStatusTypeMaster\" : {\r\n                \"id\" : \"Provider Status Type Id\",\r\n                \"hiddenCols\" : [\"Provider Status Type Id\" ]\r\n        },\r\n\r\n        \"CPTMaster\" : {\r\n                \"id\" : \"CPT Id\",\r\n                \"hiddenCols\" : [\"CPT Id\" ]\r\n        },\r\n\r\n        \"SpecialProviderCPTMaster\" : {\r\n                \"id\" : \"Special Provider CPT Id\",\r\n                \"hiddenCols\" : [\"Special Provider CPT Id\" , \"Description\"]\r\n        },\r\n\r\n        \"SpecialClaimTypeCPTMaster\" : {\r\n                \"id\" : \"Special Claim Type CPT Id\",\r\n                \"hiddenCols\" : [\"Special Claim Type CPT Id\" , \"Description\"]\r\n        },\r\n\r\n        \"ICD10Master\" : {\r\n                \"id\" : \"ICD-10 Id\",\r\n                \"hiddenCols\" : [\"ICD-10 Id\" ]\r\n        },\r\n\r\n        \"ProcedureMaster\" : {\r\n                \"id\" : \"Procedure Id\",\r\n                \"hiddenCols\" : [\"Procedure Id\" ]\r\n        },\r\n\r\n        \"LimitsMaster\" : {\r\n                \"id\" : \"Limits Id\",\r\n                \"hiddenCols\" : [\"Limits Id\" , \"Medical Lifetime Limit for Coverage Type\",\"Dental Family Coverage for Coverage Type\",\"Dental Yearly Limit for Coverage Type\",\"Dental Lifetime Limit for Coverage Type\",\"Prescription Family Coverage for Coverage Type\",\"Prescription Yearly Limit for Coverage Type\",\"Prescription Lifetime Limit for Coverage Type\",\"Track Basic Limits for Coverage Type\",\"Basic Yearly Limit for Coverage Type\",\"Basic Lifetime Limit for Coverage Type\",\"Track Major Medical Limits for Coverage Type\",\"Major Medical Yearly Limit for Coverage Type\",\"Major Medical Lifetime Limit for Coverage Type\",\"Member Yearly Deductible\",\"Member Lifetime Deductible\",\"Spouse Yearly Deductible\",\"Spouse Lifetime Deductible\",\"Dependent Yearly Deductible\",\"Dependent Lifetime Deductible\",\"Family Yearly Deductible\",\"Family Lifetime Deductible\",\"Member Co-Pay\",\"Spouse Co-Pay\",\"Dependent Co-Pay\",\"Family Co-Pay\"]\r\n        },\r\n\r\n        \"User\" : {\r\n            \"id\" : \"User Id\",\r\n            \"hiddenCols\" : [\"User Id\", \"Login Password\", \"Status\", \"First Login After Password Change\"]\r\n        }\r\n    };\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.label = this.props.match.params.label;\r\n\r\n        this.state = {\r\n            columnDefs: [{}],\r\n            rowData: [{}],\r\n            label: this.label,\r\n            item: \"\",\r\n            gridAPI: null,\r\n            columnAPI: null,\r\n            alertMessage: \"\",\r\n            context: { componentParent: this },\r\n            rowSelection: 'multiple',\r\n\r\n            frameworkComponents: {\r\n                gridActionColumnRenderer : AgGridActionColumnRenderer,\r\n            },\r\n\r\n            defaultColDef: {\r\n                sortable: true,\r\n                editable: true,\r\n                filter: 'agTextColumnFilter',\r\n                floatingFilter: true,\r\n                resizable: true,\r\n                flex: 1,\r\n                width: 200,\r\n            },\r\n\r\n            modules: AllModules,\r\n            sideBar: {\r\n                toolPanels: [\r\n                  {\r\n                    id: 'columns',\r\n                    labelDefault: 'Columns',\r\n                    labelKey: 'columns',\r\n                    iconKey: 'columns',\r\n                    toolPanel: 'agColumnsToolPanel',\r\n                    toolPanelParams: {\r\n                        suppressRowGroups: true,\r\n                        suppressValues: true,\r\n                        suppressPivots: true,\r\n                        suppressPivotMode: true,\r\n                        suppressSideButtons: true,\r\n                        suppressColumnFilter: true,\r\n                        suppressColumnSelectAll: true,\r\n                        suppressColumnExpandAll: true,\r\n                      },\r\n                  },\r\n                ],\r\n                defaultToolPanel: '',\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchMasterDataItem();\r\n    }\r\n\r\n    goToCreateMasterItem() {\r\n        window.location.href = \"/portal/masterdataentry/\" + this.state.item + \"/label/\" + this.state.label;\r\n    }\r\n\r\n    goToGlobalMasterItemList() {\r\n        window.location.href = \"/portal/masterdata\";\r\n    }\r\n\r\n    fetchMasterDataItem() {\r\n\r\n        var item = this.props.match.params.item;\r\n\r\n        if(item == undefined) return;\r\n        this.setState({'item': item});\r\n\r\n\r\n        var url = this.apiService.getApiUrl(\"getmasterSpecificMasterItemList\", [this.props.match.params.item]);\r\n        var root = this;\r\n        this.apiService.invokeGet(url, this, function(response){\r\n\r\n            var data = response.data;\r\n            \r\n            var cols = [];\r\n            if(data.length > 0) {\r\n\r\n                //modify data (date format/null checking etc.)\r\n                for(var x = 0; x < data.length; x++) {\r\n\r\n                    for (var key in data[x]) {\r\n                        if(data[x][key] == null) {\r\n                            data[x][key] = \"\";\r\n                        }\r\n                        else {\r\n                            var value = data[x][key].toString();\r\n\r\n                            //check if date => match pattern yyyy-mm-dd\r\n                            if(value.match(/^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/))\r\n                            {\r\n                                var parts = value.split(\"-\");\r\n                                value = parts[1] + \"/\" + parts[2] + \"/\" + parts[0];\r\n                            }\r\n                            data[x][key] = value;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var isFirstVisibleCol = true;\r\n                var visibleColumnCount = 0;\r\n                for (var key in data[0]) {\r\n                    var obj = {}\r\n                    obj.headerName = key;\r\n                    obj.field = key;\r\n\r\n                    if(root.itemSpecificProperties[root.state.item].hiddenCols.indexOf(obj.field) >= 0) {\r\n                        obj.hide = true;\r\n                        obj.suppressToolPanel = true;\r\n                    } else {\r\n                        //for first visible row add checkbox selection\r\n                        if(isFirstVisibleCol) {\r\n                            obj.checkboxSelection = true;\r\n                            obj.headerCheckboxSelection =  true;\r\n                            isFirstVisibleCol = false;\r\n                        }\r\n\r\n                        //after first 4 columns hide the rest\r\n                        if(visibleColumnCount > 4) {\r\n                            obj.hide = true;\r\n                            obj.suppressToolPanel = true;\r\n                        }\r\n                        visibleColumnCount++;\r\n                    }\r\n                    cols.push(obj);\r\n                }\r\n            }\r\n            \r\n            //extra column for actions like delete\r\n            var obj = {};\r\n            obj.headerName = \"Action\"\r\n            obj.field = \"action\"\r\n            obj.cellRenderer = 'gridActionColumnRenderer'\r\n            cols.push(obj);\r\n\r\n            for(var i=0; i< data.length; i++)data[i].action = \"delete\";\r\n\r\n            console.log(cols);\r\n\r\n            root.setState({\r\n                columnDefs: cols,\r\n                rowData : data\r\n            }, function(){\r\n               \r\n            });\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        \r\n    }\r\n\r\n    delete(rowdata, rowIndex) {\r\n        var idField = this.itemSpecificProperties[this.state.item].id;\r\n        var id = rowdata[idField];\r\n        var url = this.apiService.getApiUrl(\"deleteMasterItemById\", [this.state.item, id]);\r\n\r\n        var root = this;\r\n        this.apiService.invokeDelete(url, {}, this, function(response) {\r\n            if(response.status == \"success\") {\r\n                var tableData = root.state.rowData;\r\n                tableData.splice(rowIndex, 1);\r\n                root.state.gridAPI.setRowData(tableData);\r\n            } else {\r\n                root.state.alertMessage = \"Error during deleting the record. Please contact System administrator.\"\r\n            }\r\n        })\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.setState({\r\n            gridAPI: params.api,\r\n            columnAPI: params.columnApi\r\n        })\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        var root = this;\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    onCellClicked(obj) {\r\n        //console.log(obj);\r\n        //for action item click, it should not redirect to edit page\r\n        if(obj.column.colDef.field == \"action\") return;\r\n        var identifier = obj.data[this.itemSpecificProperties[this.state.item].id];\r\n        window.location.href = \"/portal/masterdataedit/\" + this.state.item + \"/label/\" + this.state.label + \"/id/\" + identifier;\r\n    }\r\n\r\n    onRowDataChange(params) {\r\n        \r\n    }\r\n\r\n    exportCsv() {\r\n        //console.log(this.state.columnDefs);\r\n        var exportCols = [];\r\n        for(var i=0; i< this.state.columnDefs.length; i++)\r\n        {\r\n            if(this.state.columnDefs[i].field != \"action\")exportCols.push(this.state.columnDefs[i].field);\r\n        }\r\n\r\n        var root = this;\r\n        this.state.gridAPI.exportDataAsCsv({\r\n            columnKeys: exportCols,\r\n            onlySelected: true,\r\n            allColumns: false,\r\n            fileName: root.label + \" List.csv\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-container\">\r\n                <Row className=\"headerRow\">\r\n                    <Col>\r\n                        <span className=\"h3-header\"> { this.label } List </span>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.goToGlobalMasterItemList.bind(this)}> \r\n                            Master Item List\r\n                        </Button>\r\n\r\n                        <Button className=\"claim-dashboard-btn mateffect margin-right\" variant=\"primary\" onClick={this.goToCreateMasterItem.bind(this)}> \r\n                            Create { this.label }\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n\r\n                    <Alert key=\"alert\" variant=\"danger\" className={(this.state.showNotification ? 'show' : 'hidden')}>\r\n                        {this.state.alertMessage}\r\n                    </Alert>\r\n\r\n                    <div id=\"grid-wrapper-master-data-item\" style={{ width: '100%', height: '100%' }}>\r\n                        <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '400px', width: '100%'} }>\r\n                            <AgGridReact\r\n                                columnDefs={this.state.columnDefs}\r\n                                rowData={this.state.rowData}\r\n                                context={this.state.context}\r\n                                modules={this.state.modules}\r\n                                sideBar={this.state.sideBar}\r\n                                rowSelection={this.state.rowSelection}\r\n                                defaultColDef={this.state.defaultColDef}\r\n                                frameworkComponents={this.state.frameworkComponents}\r\n                                onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                                onCellClicked={this.onCellClicked.bind(this)}\r\n                                onFirstDataRendered={this.onFirstDataRendered.bind(this)}\r\n                                onGridReady={this.onGridReady.bind(this)}\r\n                                onRowDataChanged={this.onRowDataChange.bind(this)}\r\n                                \r\n                            >\r\n                            </AgGridReact>\r\n                        </div>\r\n                        <div class=\"tbl-footer\">\r\n                            <MdFileDownload className=\"export-icon\" size='1.5em' onClick={this.exportCsv.bind(this)}/>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        /*var gridWidth = document.getElementById('grid-wrapper-master-data-item').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();*/\r\n    }\r\n}\r\n\r\nexport default MasterDataItem;","import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport ApiService from './../../service/APIService';\r\nimport { Container, FormGroup } from 'react-bootstrap';\r\n\r\nimport \"./style.css\";\r\nclass MasterDataEntry extends React.Component {\r\n\r\n    apiService = new ApiService();\r\n    apiEndPointMap = {\r\n        \"coveragetypemaster\" : \"savecoveragetypemaster\",\r\n        \"coveragetyperule\" : \"savecoveragetyperule\",\r\n        \"networkmaster\" : \"savenetworkmaster\",\r\n        \"networkrule\" : \"savenetworkrule\",\r\n        \"claimtypemaster\" : \"saveclaimtypemaster\",\r\n        \"claimtyperule\" : \"saveclaimtyperule\",\r\n        \"exclusioncodemaster\" : \"saveexclusioncodemaster\",\r\n        \"exclusioncoderule\" : \"saveexclusioncoderule\",\r\n        \"statustypemaster\" : \"savestatustypemaster\",\r\n        \"statustyperule\" : \"savestatustyperule\",\r\n        \"supervisormaster\" : \"savesupervisormaster\",\r\n        \"supervisorrule\" : \"savesupervisorrule\",\r\n        \"eligibilityoverridereasonmaster\" : \"saveeligibilityoverridereasonmaster\",\r\n        \"eligibilityoverridereasonrule\" : \"saveeligibilityoverridereasonrule\",\r\n        \"reasonforholdingclaimmaster\" : \"savereasonforholdingclaimmaster\",\r\n        \"reasonforholdingclaimrule\" : \"savereasonforholdingclaimrule\",\r\n        \"adjudicationsequencemaster\" : \"saveadjudicationsequencemaster\",\r\n        \"adjudicationsequencerule\" : \"saveadjudicationsequencerule\",\r\n        \"providermaster\" : \"saveprovidermaster\",\r\n        \"providerrule\" : \"saveproviderrule\",\r\n        \"providerstatustypemaster\" : \"saveproviderstatustypemaster\",\r\n        \"providerstatustyperule\" : \"saveproviderstatustyperule\",\r\n        \"cptmaster\" : \"savecptmaster\",\r\n        \"cptrule\" : \"savecptrule\",\r\n        \"specialprovidercptmaster\" : \"savespecialprovidercptmaster\",\r\n        \"specialprovidercptrule\" : \"savespecialprovidercptrule\",\r\n        \"specialclaimtypecptmaster\" : \"savespecialclaimtypecptmaster\",\r\n        \"specialclaimtypecptrule\" : \"savespecialclaimtypecptrule\",\r\n        \"icd10master\" : \"saveicd10master\",\r\n        \"icd10rule\" : \"saveicd10rule\",\r\n        \"proceduremaster\" : \"saveproceduremaster\",\r\n        \"procedurerule\" : \"saveprocedurerule\",\r\n        \"procedurelimitsused\" : \"saveprocedurelimitsused\",\r\n        \"limitsmaster\" : \"savelimitsmaster\",\r\n        \"limitsused\" : \"savelimitsused\",\r\n        \"user\" : \"saveuser\"\r\n    }\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.label = this.props.match.params.label;\r\n\r\n        this.state = {\r\n\r\n            item : \"\",\r\n            mid: \"\",\r\n            rowData: [],\r\n            label: this.label,\r\n            parentFields: [],\r\n            childFields: [],\r\n            childRows: [],\r\n            formData: {},\r\n\r\n            alertMessage: \"\",\r\n            varient: \"\",\r\n            showNotification: false,\r\n\r\n            submitButtonText : \"Submit\"\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchMasterDataItemFormFields();\r\n    }\r\n\r\n    createMasterItem() {\r\n\r\n        this.setState({\r\n            submitButtonText : \"Please Wait..\"\r\n        });\r\n\r\n        //validation\r\n        //1. Required fields\r\n        for(var i=0; i< this.state.parentFields.length; i++) {\r\n            if(this.state.parentFields[i].hidden != 'y' && this.state.parentFields[i].required == 'y') {\r\n\r\n                if(this.state.formData[this.state.parentFields[i].identifier].trim().length == 0) {\r\n                    this.setState({\r\n                        alertMessage: this.state.parentFields[i].label + \" is a required field\",\r\n                        varient: \"danger\",\r\n                        showNotification: true,\r\n                        submitButtonText: \"Submit\"\r\n                    })\r\n                    var root = this;\r\n                    setTimeout(function() {\r\n                        root.setState({\r\n                            showNotification: false\r\n                        })\r\n                    }, 4000)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //end validation\r\n        \r\n        var ep = this.apiEndPointMap[this.state.item.toLowerCase()];\r\n\r\n        var url;\r\n\r\n        if(this.state.mid == undefined) //which means master item entry\r\n            url = this.apiService.getApiUrl(\"createMasterItem\", [ep]);\r\n        else //which means master child item entry\r\n            url = this.apiService.getApiUrl(\"createMasterChildItem\", [ep, this.state.mid]);\r\n\r\n        console.log(this.state.formData);\r\n\r\n        var root = this;\r\n        this.apiService.invokePost(url, JSON.stringify(this.state.formData), this, function(response){\r\n            try {\r\n                if (response.status == 'success') {\r\n\r\n                    var msg = \"Successfully added \" + root.state.label;\r\n                    if(response.message != null && response.message != \"\")msg = response.message;\r\n\r\n                    root.setState({\r\n                        alertMessage: msg,\r\n                        varient: \"success\",\r\n                        showNotification: true\r\n                    })\r\n\r\n                    root.resetForm();\r\n\r\n                    setTimeout(function () {\r\n                        root.setState({\r\n                            showNotification: false\r\n                        })\r\n                    }, 4000)\r\n                } else if (response.status == 'error') {\r\n                    var error = \"\";\r\n                    if (response.message.indexOf(\"duplicate key error collection\") > 0)\r\n                        error = \"Same Id is already exists\";\r\n\r\n                    root.setState({\r\n                        alertMessage: \"Error during saving \" + root.state.label + \" : \" + error,\r\n                        varient: \"danger\",\r\n                        showNotification: true\r\n                    })\r\n\r\n                    setTimeout(function () {\r\n                        root.setState({\r\n                            showNotification: false\r\n                        })\r\n                    }, 4000)\r\n                }\r\n            } catch(e) {\r\n                console.error(e);\r\n            } finally {\r\n                root.state.submitButtonText = \"Submit\";\r\n            }\r\n        })\r\n    }\r\n\r\n    resetForm() {\r\n        var temp = this.state.formData;\r\n        for(var i=0; i< this.state.parentFields.length; i++) {\r\n            if(this.state.parentFields[i].hidden != 'y') {\r\n                temp[this.state.parentFields[i].identifier] = \"\"\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            'formData': temp\r\n        })\r\n    }\r\n\r\n    fetchMasterDataItemFormFields() {\r\n\r\n        var item = this.props.match.params.item;\r\n        var mid = this.props.match.params.mid;\r\n\r\n        if(item == undefined) return;\r\n        this.setState({\r\n            'item' : item,\r\n            'mid' : mid\r\n        })\r\n\r\n\r\n        var url = this.apiService.getApiUrl(\"getmasterItemFormFields\", [item]);\r\n        var root = this;\r\n        this.apiService.invokeGet(url, this, function(response){\r\n\r\n            console.log(response);\r\n\r\n            var crows = [];\r\n            crows.push(response.data.child);\r\n\r\n            root.setState({parentFields : response.data.parent});\r\n            root.setState({childFields : response.data.child});\r\n            root.setState({childRows : crows});\r\n            var obj = {};\r\n\r\n            for(var i=0; i< response.data.parent.length; i++) {\r\n                obj[response.data.parent[i].identifier] = \"\"\r\n            }\r\n\r\n            //var childObj = {};\r\n            //for(var i=0; i< response.data.child.length; i++) {\r\n            //    childObj[response.data.child[i].identifier] = \"\"\r\n            //}\r\n\r\n            //obj[response.data.parentField] = childObj;\r\n            root.setState({formData : obj})\r\n        })\r\n    }\r\n\r\n    commonChangeHandler(event) {\r\n\r\n        if(event.target.dataset.type == \"number\")event.target.value = event.target.value.replace(/[^0-9.]/g, \"\"); \r\n\r\n        var fdata = this.state.formData;\r\n        fdata[event.target.dataset.name] = event.target.value\r\n        this.setState({formData : fdata})\r\n    }\r\n\r\n    goToListItems() {\r\n\r\n        if(this.state.mid == undefined) //means master data entry\r\n            window.location.href = \"/portal/masteritem/\" + this.state.item + \"/label/\" + this.state.label;\r\n        else //means child data entry \r\n        {\r\n            var masterItem = this.state.item.replace(\"Rule\", \"\") + \"Master\";\r\n            var masterItemLabel = this.state.label.replace(\"Rules\", \"\").trim();\r\n            window.location.href = \"/portal/masterdataedit/\" + masterItem + \"/label/\" + encodeURI(masterItemLabel) + \"/id/\" + this.state.mid;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        var root = this;\r\n        return (\r\n            <div className=\"list-container\">\r\n                <Row className=\"headerRow\">\r\n                    <Col>\r\n                        <span className=\"h3-header\"> Create { this.label } </span>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.goToListItems.bind(this)}> \r\n                            { this.label } List\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Container fluid>\r\n                    <Alert key=\"alert\" variant={this.state.varient} className={(this.state.showNotification ? 'show' : 'hidden')}>\r\n                        {this.state.alertMessage}\r\n                    </Alert>\r\n                    <Form.Group as={Row}>\r\n                    {\r\n                        this.state.parentFields.map(function(field, index) {\r\n                            if(field.type == \"number\")\r\n                                return (\r\n                                    <Col md={field.size} sm={field.size} className={(field.hidden == 'n' ? 'show' : 'hidden')}>\r\n                                        <Form.Group as={Row} className=\"field-group\">\r\n                                            <Form.Label className={(field.required == 'y' ? 'required' : 'notrequired')}> \r\n                                                {field.label} \r\n                                            </Form.Label>\r\n                                            <Form.Control \r\n                                                key={field.identifier}\r\n                                                type=\"text\"\r\n                                                value={root.state.formData[field.identifier] || \"\"} \r\n                                                data-name={field.identifier}\r\n                                                data-type={field.type}\r\n                                                maxLength={field.datalength}\r\n                                                onChange={root.commonChangeHandler.bind(root)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                )\r\n                            else\r\n                                return (\r\n                                    <Col md={field.size} sm={field.size} className={(field.hidden == 'n' ? 'show' : 'hidden')}>\r\n                                        <Form.Group as={Row} className=\"field-group\">\r\n                                            <Form.Label className={(field.required == 'y' ? 'required' : 'notrequired')}> \r\n                                                {field.label} \r\n                                            </Form.Label>\r\n                                            <Form.Control \r\n                                                key={field.identifier}\r\n                                                type={field.type}\r\n                                                value={root.state.formData[field.identifier] || \"\"} \r\n                                                data-name={field.identifier}\r\n                                                data-type={field.type} \r\n                                                maxLength={field.datalength}\r\n                                                onChange={root.commonChangeHandler.bind(root)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                )\r\n                        })\r\n                    }\r\n                    </Form.Group>\r\n                    \r\n                    <Row>\r\n                        <Col>\r\n                            <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.createMasterItem.bind(this)}> \r\n                                {this.state.submitButtonText}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onGridSizeChanged = params => {\r\n        var gridWidth = document.getElementById('grid-wrapper-master-data-item').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();\r\n    };\r\n}\r\n\r\nexport default MasterDataEntry;","import React, { Component } from 'react';\r\n\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nexport default class AgGridActionColumnRenderer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onDeleteClick = this.onDeleteClick.bind(this);\r\n    }\r\n\r\n    onDeleteClick() {\r\n\r\n        console.log(this.props.node);\r\n        this.props.context.componentParent.delete(\r\n            this.props.node.data, this.props.node.rowIndex\r\n        );\r\n    }\r\n\r\n    render() {\r\n            if(this.props.value === \"delete\"){\r\n                return (\r\n                    <>\r\n                        <MdDelete size='2em' onClick={this.onDeleteClick}/>\r\n                    </>\r\n                )\r\n            }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { AgGridReact } from '@ag-grid-community/react';\r\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\r\n\r\nimport { BiPlusCircle } from \"react-icons/bi\";\r\nimport { MdFileDownload } from 'react-icons/md';\r\n\r\nimport ApiService from './../../service/APIService';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nimport AgGridActionColumnRenderer from './AgGridActionColumnRenderer'\r\n\r\nimport \"./style.css\";\r\n\r\nclass MasterDataEdit extends React.Component {\r\n\r\n    apiService = new ApiService();\r\n    apiEndPointMap = {\r\n        \"coveragetypemaster\" : \"updatecoveragetypemaster\",\r\n        \"coveragetyperule\" : \"updatecoveragetyperule\",\r\n        \"networkmaster\" : \"updatenetworkmaster\",\r\n        \"networkrule\" : \"updatenetworkrule\",\r\n        \"claimtypemaster\" : \"updateclaimtypemaster\",\r\n        \"claimtyperule\" : \"updateclaimtyperule\",\r\n        \"exclusioncodemaster\" : \"updateexclusioncodemaster\",\r\n        \"exclusioncoderule\" : \"updateexclusioncoderule\",\r\n        \"statustypemaster\" : \"updatestatustypemaster\",\r\n        \"statustyperule\" : \"updatestatustyperule\",\r\n        \"supervisormaster\" : \"updatesupervisormaster\",\r\n        \"supervisorrule\" : \"updatesupervisorrule\",\r\n        \"eligibilityoverridereasonmaster\" : \"updateeligibilityoverridereasonmaster\",\r\n        \"eligibilityoverridereasonrule\" : \"updateeligibilityoverridereasonrule\",\r\n        \"reasonforholdingclaimmaster\" : \"updatereasonforholdingclaimmaster\",\r\n        \"reasonforholdingclaimrule\" : \"updatereasonforholdingclaimrule\",\r\n        \"adjudicationsequencemaster\" : \"updateadjudicationsequencemaster\",\r\n        \"adjudicationsequencerule\" : \"updateadjudicationsequencerule\",\r\n        \"providermaster\" : \"updateprovidermaster\",\r\n        \"providerrule\" : \"updateproviderrule\",\r\n        \"providerstatustypemaster\" : \"updateproviderstatustypemaster\",\r\n        \"providerstatustyperule\" : \"updateproviderstatustyperule\",\r\n        \"cptmaster\" : \"updatecptmaster\",\r\n        \"cptrule\" : \"updatecptrule\",\r\n        \"specialprovidercptmaster\" : \"updatespecialprovidercptmaster\",\r\n        \"specialprovidercptrule\" : \"updatespecialprovidercptrule\",\r\n        \"specialclaimtypecptmaster\" : \"updatespecialclaimtypecptmaster\",\r\n        \"specialclaimtypecptrule\" : \"updatespecialclaimtypecptrule\",\r\n        \"icd10master\" : \"updateicd10master\",\r\n        \"icd10rule\" : \"updateicd10rule\",\r\n        \"proceduremaster\" : \"updateproceduremaster\",\r\n        \"procedurerule\" : \"updateprocedurerule\",\r\n        \"procedurelimitsused\" : \"updateprocedurelimitsused\",\r\n        \"limitsmaster\" : \"updatelimitsmaster\",\r\n        \"limitsused\" : \"updatelimitsused\"\r\n    }\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.label = this.props.match.params.label;\r\n\r\n        this.state = {\r\n            item : \"\",\r\n            rowData: [],\r\n            label: this.label,\r\n            id: \"\",\r\n            parentFields: [],\r\n            childField: \"\",\r\n            childRows: [],\r\n            childCols: [],\r\n            childClass: \"\",\r\n            formData: {},\r\n            childLabel: \"\",\r\n\r\n            agGridParams: \"\",\r\n\r\n            gridApi: \"\",\r\n            columnAPI: \"\",\r\n\r\n            alertMessage: \"\",\r\n            varient: \"\",\r\n            showNotification: false,\r\n\r\n            createChildLink: \"\",\r\n\r\n            context: { componentParent: this },\r\n            frameworkComponents: {\r\n                gridActionColumnRenderer : AgGridActionColumnRenderer,\r\n            },\r\n\r\n            defaultColDef: {\r\n                sortable: true,\r\n                editable: true,\r\n                filter: 'agTextColumnFilter',\r\n                floatingFilter: true,\r\n                resizable: true,\r\n            },\r\n\r\n            modules: AllModules,\r\n            sideBar: {\r\n                toolPanels: [\r\n                  {\r\n                    id: 'columns',\r\n                    labelDefault: 'Columns',\r\n                    labelKey: 'columns',\r\n                    iconKey: 'columns',\r\n                    toolPanel: 'agColumnsToolPanel',\r\n                    toolPanelParams: {\r\n                        suppressRowGroups: true,\r\n                        suppressValues: true,\r\n                        suppressPivots: true,\r\n                        suppressPivotMode: true,\r\n                        suppressSideButtons: true,\r\n                        suppressColumnFilter: true,\r\n                        suppressColumnSelectAll: true,\r\n                        suppressColumnExpandAll: true,\r\n                      },\r\n                  },\r\n                ],\r\n                defaultToolPanel: '',\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchMasterDataItemFormFields();\r\n    }\r\n\r\n    export() {\r\n\r\n        var exportCols = [];\r\n        for(var i=0; i< this.state.childCols.length; i++)\r\n        {\r\n            if(this.state.childCols[i].field != \"action\" && !this.state.childCols[i].hide)\r\n                exportCols.push(this.state.childCols[i].field);\r\n        }\r\n\r\n        var root = this;\r\n        this.state.gridAPI.exportDataAsCsv({\r\n            columnKeys: exportCols,\r\n            //onlySelected: true,\r\n            allColumns: false,\r\n            fileName: root.state.childLabel + \" List.csv\"\r\n        });\r\n\r\n        //this.state.gridAPI.exportDataAsCsv({});\r\n    }\r\n\r\n    editMasterItem() {\r\n\r\n        //validation\r\n\r\n        //1. Required fields\r\n        for(var i=0; i< this.state.parentFields.length; i++) {\r\n            if(this.state.parentFields[i].hidden != 'y' && this.state.parentFields[i].required == 'y') {\r\n\r\n                if(this.state.formData[this.state.parentFields[i].identifier].toString().trim().length == 0) {\r\n                    this.setState({\r\n                        alertMessage: this.state.parentFields[i].label + \" is a required field\",\r\n                        varient: \"danger\",\r\n                        showNotification: true\r\n                    })\r\n                    var root = this;\r\n                    setTimeout(function() {\r\n                        root.setState({\r\n                            showNotification: false\r\n                        })\r\n                    }, 4000)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        //end validation\r\n        \r\n        var ep = this.apiEndPointMap[this.state.item.toLowerCase()];\r\n\r\n        var url;\r\n        if(this.state.cid == undefined) //means master item\r\n            url = this.apiService.getApiUrl(\"editMasterItem\", [ep]);\r\n        else \r\n            url = this.apiService.getApiUrl(\"editMasterChildItem\", [ep, this.state.id]);\r\n\r\n        console.log(this.state.formData);\r\n\r\n        var root = this;\r\n        this.apiService.invokePut(url, JSON.stringify(this.state.formData), this, function(response){\r\n            if(response.status == 'success') {\r\n                root.setState({\r\n                    alertMessage: \"Successfully updated \" + root.state.label,\r\n                    varient: \"success\",\r\n                    showNotification: true\r\n                })\r\n\r\n                setTimeout(function() {\r\n                    root.setState({\r\n                        showNotification: false\r\n                    })\r\n                }, 4000)\r\n            } else if(response.status == 'error') {\r\n                var error = \"\";\r\n                if(response.message.indexOf(\"duplicate key error collection\") > 0)\r\n                    error = \"Same CPT number is already exists\";\r\n\r\n                root.setState({\r\n                    alertMessage: \"Error during saving \" + root.state.label + \" : \" + error,\r\n                    varient: \"danger\",\r\n                    showNotification: true\r\n                })\r\n\r\n                setTimeout(function() {\r\n                    root.setState({\r\n                        showNotification: false\r\n                    })\r\n                }, 4000)\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchMasterDataItemFormFields() {\r\n\r\n        var item = this.props.match.params.item;\r\n        var id = this.props.match.params.id;\r\n\r\n        //only for child edit\r\n        //child edit URL pattern\r\n        ///portal/masterdataedit/:item?/masteritem/:masteritem?/label/:label?/id/:id?/cid/:cid?\r\n        var cid = this.props.match.params.cid;     //child id\r\n        var masterItem = this.props.match.params.masteritem;\r\n\r\n        if(item == undefined || id == undefined) return;\r\n        this.setState({\r\n            'item' : item,\r\n            'id' : id,\r\n            'cid' : cid,\r\n            'masterItem' : masterItem\r\n        })\r\n\r\n        if(cid != undefined) //merans child edit\r\n        {\r\n            //if child item edit, I could not able to brind the label via URl due to some react routing issue\r\n            this.label = this.constructLabelFromItem(item);\r\n            this.setState({\r\n                'label' : this.label\r\n            })\r\n        }\r\n\r\n        var url = this.apiService.getApiUrl(\"getmasterItemFormFields\", [item]);\r\n        var root = this;\r\n        this.apiService.invokeGet(url, this, function(response){\r\n\r\n            console.log(response);\r\n\r\n            var constructedChildLabel = \"\";\r\n            var childField = response.data.childField;\r\n\r\n            //for child items edit child field will be null, so check it first\r\n            if(childField != null) {\r\n                constructedChildLabel = root.constructLabelFromItem(childField);\r\n            }\r\n\r\n            root.setState({\r\n                parentFields : response.data.parent,\r\n                childField : response.data.childField,\r\n                childClass : response.data.childClass,\r\n                childLabel: constructedChildLabel,\r\n                createChildLink: \"/portal/masterdataentry/\" + response.data.childClass + \"/label/\" + constructedChildLabel + \"/mid/\" + root.state.id\r\n            })\r\n            var obj = {};\r\n            \r\n            for(var i=0; i< response.data.parent.length; i++) {\r\n                obj[response.data.parent[i].identifier] = \"\"\r\n            }\r\n\r\n            //add child field\r\n            obj[response.data.childField] = \"\";\r\n\r\n            root.setState({formData : obj})\r\n\r\n            root.getDataById();\r\n        })\r\n    }\r\n\r\n    constructLabelFromItem(item) {\r\n        var label = \"\";\r\n        for(var i=0; i< item.length; i++) {\r\n            if(i == 0)label += item[i].toUpperCase();\r\n            else if(this.isCaps(item[i]))label += ' ' + item[i];\r\n            else label += item[i]\r\n        }\r\n        return label;\r\n    }\r\n\r\n    isCaps(ch) {\r\n        if (!isNaN(ch * 1)){\r\n           return 'ch is numeric';\r\n        }\r\n         else {\r\n           if (ch == ch.toUpperCase()) {\r\n              return true;\r\n           }\r\n           if (ch == ch.toLowerCase()){\r\n              return false;\r\n           }\r\n        }\r\n    }\r\n\r\n    getDataById() {\r\n\r\n        var root = this;\r\n        var url = \"\";\r\n        \r\n        if(this.state.cid == undefined) //means parent item\r\n            url = this.apiService.getApiUrl(\"getMasterItemById\", [this.state.item, this.state.id]);\r\n        else \r\n            url = this.apiService.getApiUrl(\"getMasterChildItemById\", [this.state.item, this.state.id, this.state.cid]); //for child item this.state.item indicates child\r\n\r\n        this.apiService.invokeGet(url, this, function(response){\r\n\r\n            var data = response.data;\r\n            var obj = {};\r\n            var childRows;\r\n            for (var key in root.state.formData) {\r\n\r\n                obj[key] = data[key];\r\n            }\r\n\r\n            root.setState({formData: obj})\r\n\r\n            if(root.state.cid == undefined) //means parent item\r\n                root.getChildTableFields(data[root.state.childField]);\r\n        })\r\n    }\r\n\r\n    getChildTableFields(childRows) {\r\n        var root = this;\r\n        var url = this.apiService.getApiUrl(\"getTableFields\", [this.state.childClass]);\r\n\r\n        this.apiService.invokeGet(url, this, function(response){\r\n\r\n            var data = response.data;\r\n            var tableFields = data.tableFields;\r\n            var colDefs = [];\r\n            var rowDefs = [];\r\n            console.log(childRows);\r\n            for(var i=0; i< tableFields.length; i++) {\r\n                //after first 4 columns hide the rest\r\n                if(i < 4){\r\n                    if(tableFields[i].hidden == 'y')\r\n                        colDefs.push({ headerName: tableFields[i].label, field: tableFields[i].identifier, hide: true })\r\n                    else\r\n                        colDefs.push({ headerName: tableFields[i].label, field: tableFields[i].identifier})\r\n                }\r\n                else colDefs.push(\r\n                    { \r\n                        headerName: tableFields[i].label, \r\n                        field: tableFields[i].identifier,\r\n                        hide: true,\r\n                        suppressToolPanel: true\r\n                    }\r\n                )\r\n            }\r\n\r\n            //extra column for actions like delete\r\n            var obj = {};\r\n            obj.headerName = \"Action\"\r\n            obj.field = \"action\"\r\n            obj.cellRenderer = 'gridActionColumnRenderer'\r\n            colDefs.push(obj);\r\n\r\n            for(var i=0; i< childRows.length; i++) {\r\n                var row = childRows[i];\r\n                \r\n                //BAD CODING!!! Need to check at Server side.. for quick delivery\r\n                if(row.isDeleted)continue;\r\n                var rowObj = {};\r\n\r\n                for(var j=0; j< tableFields.length; j++) {\r\n\r\n                    if(row[tableFields[j].identifier] == null) {\r\n                        rowObj[tableFields[j].identifier] = \"\";\r\n                    }\r\n                    else {\r\n                        var value = row[tableFields[j].identifier].toString();\r\n\r\n                        //check if date => match pattern yyyy-mm-dd\r\n                        if(value.match(/^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/))\r\n                        {\r\n                            var parts = value.split(\"-\");\r\n                            value = parts[1] + \"/\" + parts[2] + \"/\" + parts[0];\r\n                        }\r\n                        rowObj[tableFields[j].identifier] = value;\r\n                    }\r\n                }\r\n                rowObj.action = \"delete\";\r\n                if(!rowObj.isDeteled)rowDefs.push(rowObj);\r\n            }\r\n            \r\n            //console.log(colDefs);\r\n            //console.log(rowDefs);\r\n            root.setState({\r\n                childCols: colDefs,\r\n                childRows: rowDefs\r\n            }, function() {})\r\n        })\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    commonChangeHandler(event) {\r\n        var fdata = this.state.formData;\r\n        fdata[event.target.dataset.name] = event.target.value\r\n        this.setState({formData : fdata})\r\n    }\r\n\r\n    goToListItems() {\r\n        if(this.state.cid == undefined) //means parent item\r\n            window.location.href = \"/portal/masteritem/\" + this.state.item + \"/label/\" + this.state.label;\r\n        else window.history.back();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.setState({\r\n            gridAPI: params.api,\r\n            columnAPI: params.columnApi\r\n        })\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    delete(rowdata, rowIndex) {\r\n\r\n        var id = rowdata.id;\r\n        console.log([this.state.item, this.state.id, this.state.childField, id]);\r\n        var url = this.apiService.getApiUrl(\r\n            \"deleteChildItemById\", \r\n            [this.state.item, this.state.id, this.state.childField, id]\r\n        );\r\n\r\n        var root = this;\r\n        this.apiService.invokeDelete(url, {}, this, function(response) {\r\n            if(response.status == \"success\") {\r\n                var tableData = root.state.childRows;\r\n                tableData.splice(rowIndex, 1);\r\n                root.state.gridAPI.setRowData(tableData);\r\n            } else {\r\n                root.state.alertMessage = \"Error during deleting the record. Please contact System administrator.\"\r\n            }\r\n        })\r\n    }\r\n\r\n    onCellClicked(params) {\r\n        //console.log(params.data.id);\r\n        if(params.column.colDef.field == \"action\") return;\r\n\r\n        var item = this.state.item;\r\n        var childLabel = this.state.childLabel;\r\n        ///portal/masterdataedit/:item?/label/:label?/id/:id?\r\n        //window.location.href = \"/portal/masterdataedit/\" + this.state.childClass + \"/masteritem/\" + item + \"/label/\" + childLabel + \"/id/\" + this.state.id + \"/cid/\" + params.data.id;\r\n        window.location.href = \"/portal/masterdataedit/\" + this.state.childClass + \"/id/\" + this.state.id + \"/cid/\" + params.data.id;\r\n    }\r\n\r\n    render() {\r\n\r\n        var root = this;\r\n        return (\r\n            <div className=\"list-container\">\r\n                <Row className=\"headerRow\">\r\n                    <Col>\r\n                        <span className=\"h3-header\"> Edit { this.label } </span>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.goToListItems.bind(this)}> \r\n                            { this.label } List\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Container fluid>\r\n                    <Alert key=\"alert\" variant={this.state.varient} className={(this.state.showNotification ? 'show' : 'hidden')}>\r\n                        {this.state.alertMessage}\r\n                    </Alert>\r\n                    <Form.Group as={Row}>\r\n                    {\r\n                        this.state.parentFields.map(function(field, index) {\r\n                            if(field.type == \"number\")\r\n                                return (\r\n                                    <Col md={field.size} sm={field.size} className={(field.hidden == 'n' ? 'show' : 'hidden')}>\r\n                                        <Form.Group as={Row} className=\"field-group\">\r\n                                            <Form.Label className={(field.required == 'y' ? 'required' : 'notrequired')}> \r\n                                                {field.label} \r\n                                            </Form.Label>\r\n                                            <Form.Control \r\n                                                key={field.identifier}\r\n                                                type=\"text\"\r\n                                                value={root.state.formData[field.identifier] || \"\"} \r\n                                                data-name={field.identifier}\r\n                                                data-type={field.type}\r\n                                                maxLength={field.datalength}\r\n                                                onChange={root.commonChangeHandler.bind(root)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                )\r\n                            else\r\n                                return (\r\n                                    <Col md={field.size} sm={field.size} className={(field.hidden == 'n' ? 'show' : 'hidden')}>\r\n                                        <Form.Group as={Row} className=\"field-group\">\r\n                                            <Form.Label className={(field.required == 'y' ? 'required' : 'notrequired')}> \r\n                                                {field.label} \r\n                                            </Form.Label>\r\n                                            <Form.Control \r\n                                                key={field.identifier}\r\n                                                type={field.type}\r\n                                                value={root.state.formData[field.identifier] || \"\"} \r\n                                                data-name={field.identifier}\r\n                                                data-type={field.type} \r\n                                                maxLength={field.datalength}\r\n                                                onChange={root.commonChangeHandler.bind(root)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                )\r\n                        })\r\n                    }\r\n                    </Form.Group>\r\n                    \r\n                    <Row>\r\n                        <Col>\r\n                            <Button className=\"claim-dashboard-btn mateffect\" variant=\"primary\" onClick={this.editMasterItem.bind(this)}> \r\n                                Update\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <hr />\r\n\r\n                    <Row className={((this.state.cid == undefined) ? 'show' : 'hidden')}>\r\n                        <Col md={10}>\r\n                            <span className=\"h3-header\"> {this.state.childLabel} </span>\r\n                        </Col>\r\n\r\n                        <Col md={2}>\r\n                            <a className=\"add-child-link\" href={this.state.createChildLink}> \r\n                                <BiPlusCircle />&nbsp;\r\n                                Add new {this.state.childLabel} \r\n                            </a>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className={((this.state.cid == undefined) ? 'show' : 'hidden')}>\r\n                        <div id=\"grid-wrapper-child-item-list\" style={{ width: '100%', height: '100%' }}>\r\n                            <div className=\"ag-theme-alpine ag-grid-container\" style={ {height: '300px', width: '100%'} }>\r\n                                <AgGridReact\r\n                                    columnDefs={this.state.childCols}\r\n                                    rowData={this.state.childRows}\r\n                                    context={this.state.context}\r\n                                    modules={this.state.modules}\r\n                                    sideBar={this.state.sideBar}\r\n                                    defaultColDef={this.state.defaultColDef}\r\n                                    frameworkComponents={this.state.frameworkComponents}\r\n                                    onGridSizeChanged={this.onGridSizeChanged.bind(this)}\r\n                                    onCellClicked={this.onCellClicked.bind(this)}\r\n                                    onFirstDataRendered={this.onFirstDataRendered.bind(this)}\r\n                                    onGridReady={this.onGridReady.bind(this)}\r\n                                    \r\n                                >\r\n                                </AgGridReact>\r\n                            </div>\r\n                            <div class=\"tbl-footer\">\r\n                                <MdFileDownload className=\"export-icon\" size='1.5em' onClick={this.export.bind(this)}/>\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <br />\r\n                <br />\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onGridSizeChanged = params => {\r\n\r\n        /*this.setState({agGridParams: params});\r\n\r\n        var gridWidth = document.getElementById('grid-wrapper-child-item-list').offsetWidth;\r\n        var columnsToShow = [];\r\n        var columnsToHide = [];\r\n        var totalColsWidth = 0;\r\n        var allColumns = params.columnApi.getAllColumns();\r\n        for (var i = 0; i < allColumns.length; i++) {\r\n          var column = allColumns[i];\r\n          totalColsWidth += column.getMinWidth();\r\n          if (totalColsWidth > gridWidth) {\r\n            columnsToHide.push(column.colId);\r\n          } else {\r\n            columnsToShow.push(column.colId);\r\n          }\r\n        }\r\n        params.columnApi.setColumnsVisible(columnsToShow, true);\r\n        params.columnApi.setColumnsVisible(columnsToHide, false);\r\n        params.api.sizeColumnsToFit();*/\r\n    };\r\n}\r\n\r\nexport default MasterDataEdit;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; \r\n\r\nimport KMRClaims from './KMRClaims';\r\nimport CreateClaim from './create-claim/CreateClaim';\r\nimport MasterDataList from './master-data-list/MasterDataList';\r\n\r\nimport \"../styles/KMRContentArea.css\";\r\nimport MasterDataItem from './master-data-item/MasterDataItem';\r\nimport MasterDataEntry from './master-data-entry/MasterDataEntry';\r\nimport MasterDataEdit from './master-data-edit/MasterDataEdit';\r\n\r\n\r\nclass KMRContentArea extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fixed-content-area container-fluid\">\r\n                <Router>\r\n                    <Route exact path='/portal/dashboard' component={KMRClaims}></Route> \r\n                    <Route exact path='/portal/create/:claimid?' component={CreateClaim}></Route> \r\n                    <Route exact path='/portal/masterdata' component={MasterDataList}></Route> \r\n                    <Route exact path='/portal/masteritem/:item?/label/:label?' component={MasterDataItem}></Route> \r\n                    {/* For Master Data Entry */}\r\n                    <Route exact path='/portal/masterdataentry/:item?/label/:label?' component={MasterDataEntry}></Route> \r\n                    {/* For Child Data Entry*/}\r\n                    <Route exact path='/portal/masterdataentry/:item?/label/:label?/mid/:mid?' component={MasterDataEntry}></Route> \r\n\r\n                    {/* For Master Item Edit */}\r\n                    <Route exact path='/portal/masterdataedit/:item?/label/:label?/id/:id?/:cid?' component={MasterDataEdit}></Route>\r\n                    \r\n                    {/* For Child Item Edit : cid => child id*/}\r\n\t\t\t\t\t<Route exact path='/portal/masterdataedit/:item?/id/:id?/cid/:cid?' component={MasterDataEdit}></Route> \r\n                    \r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KMRContentArea;","import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport ApiService from './../../service/APIService';\r\nimport { Container, FormGroup } from 'react-bootstrap';\r\n\r\nimport \"./style.css\";\r\n\r\nclass Login extends React.Component {\r\n\r\n    apiService = new ApiService();\r\n   \r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            showNotification: false,\r\n            errorMessage: \"\"\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    changeUsername(event) {\r\n        this.setState({\"username\" : event.target.value})\r\n    }\r\n\r\n    changePassword(event) {\r\n        this.setState({\"password\" : event.target.value})\r\n    }\r\n\r\n    login() {\r\n        var payload = {\r\n            username : this.state.username,\r\n            password: this.state.password\r\n        }\r\n\r\n        var url = this.apiService.getApiUrl(\"login\");\r\n        var root = this;\r\n        this.apiService.invokePost(url, JSON.stringify(payload), this, function(response) {\r\n            try{\r\n\r\n                if(response.status == \"success\") {\r\n                    sessionStorage.setItem(\"loggedin\", 1);\r\n                    sessionStorage.setItem(\"user\", JSON.stringify(response.data));\r\n                    window.location.href = \"/portal/dashboard\";\r\n                } else {\r\n                    root.setState({\r\n                        errorMessage: response.message,\r\n                        showNotification: true\r\n                    })\r\n\r\n                }\r\n\r\n            } catch(e) {\r\n                console.error(e);\r\n                root.setState({\r\n                    errorMessage: \"Server Response Error!!\",\r\n                    showNotification: true\r\n                })\r\n            }\r\n        })\r\n\r\n    }\r\n                \r\n    render() {\r\n\r\n        var root = this;\r\n        return (\r\n            <Container className=\"login-container\" fluid>\r\n                <div class=\"alert-container\">\r\n                    <Alert key=\"alert\" variant=\"danger\" className={(this.state.showNotification ? 'show' : 'hidden')}>\r\n                        {this.state.errorMessage}\r\n                    </Alert>\r\n                </div>\r\n                <div className=\"overlay\"></div>\r\n                <div className=\"inclined-parent\">\r\n                    <div className=\"local-logo-area\">\r\n                        {/*<img src=\"../../assets/img/local-logo.png\" />*/}\r\n                    </div>\r\n                    <div className=\"local-tag-line-section\">\r\n                        <p>Live better, work union </p>\r\n                        <p>\r\n                        Phone:  780-426-3375 / 403-250-1060\r\n                        <br />\r\n                        Email: info@local8.ca\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"login-card\">\r\n\r\n                    <div className=\"login-card-overlay\"></div>\r\n                    <div className=\"kmr-logo-section\">\r\n                        <div className=\"kmr-logo-image-container\">\r\n                            {/*<img src=\"../assets/img/kmr-logo.png\"/>*/}\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"login-inputs\" >\r\n                            <div className=\"label-container\">\r\n                                <label>Username: </label>\r\n                            </div>\r\n                            <input id=\"username\" className=\"kmr-input\" type=\"text\" placeholder=\"Enter Username\" value={this.state.username} onChange={this.changeUsername.bind(this)}/>\r\n                            <br /> <br />\r\n                            <div className=\"label-container\">\r\n                                <label>Password: </label>\r\n                            </div>\r\n                            <input id=\"password\" className=\"kmr-input\" type=\"password\" placeholder=\"Enter Password\" value={this.state.password} onChange={this.changePassword.bind(this)}/>\r\n                            <br /> <br />\r\n\r\n                            <div className=\"rememberme-section\">\r\n                                &nbsp; &nbsp;\r\n                                <input id=\"rememberme\" type=\"checkbox\" /> &nbsp;\r\n                                <label> Remember Me </label>\r\n                                &nbsp; &nbsp;\r\n                                <a href=\"#\"> Forgot Password </a>\r\n                            </div>\r\n                            <br /> <br />\r\n                            <button className=\"kmr-button\" onClick={this.login.bind(this)}> Login </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'; \r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport KMRHeader from '../header/KMRHeader.jsx'\r\nimport KMRMenu from '../menu/KMRMenu.jsx';\r\nimport KMRContentArea from '../KMRContentArea.jsx';\r\n\r\nimport Login from '../login/Login.jsx';\r\n\r\nimport \"./style.css\";\r\n\r\nclass KMRParentComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loggedIn : \"false\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //check login\r\n        var checkLogin = sessionStorage.getItem(\"loggedin\");\r\n        if(checkLogin == undefined || checkLogin == 0)this.setState({'loggedIn' : false})\r\n        else this.setState({'loggedIn' : true})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={(!this.state.loggedIn ? 'show' : 'hidden')}>\r\n                    <Login></Login>\r\n                </div>\r\n                <div className={(this.state.loggedIn ? 'show' : 'hidden')}>\r\n                    <KMRHeader></KMRHeader>\r\n                    <KMRMenu></KMRMenu>\r\n                    <Router>\r\n                        <Route exact path='/portal/:path1?/:path2?/:path3?/:path4?/:path5?/:path6?' component={KMRContentArea}></Route> \r\n                    </Router>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KMRParentComponent;","import React from 'react';\n\nimport './App.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport KMRParentComponent from \"./components/parent/KMRParentComponent\";\n\nfunction App() {\n  return (\n    <KMRParentComponent></KMRParentComponent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter> \n      <App /> \n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}